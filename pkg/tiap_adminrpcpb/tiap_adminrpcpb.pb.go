// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiap_adminrpcpb.proto

package tiap_adminrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TableType int32

const (
	TableType_TableType_Invalid   TableType = 0
	TableType_TableType_Raw       TableType = 1
	TableType_TableType_HBaseLike TableType = 2
)

var TableType_name = map[int32]string{
	0: "TableType_Invalid",
	1: "TableType_Raw",
	2: "TableType_HBaseLike",
}
var TableType_value = map[string]int32{
	"TableType_Invalid":   0,
	"TableType_Raw":       1,
	"TableType_HBaseLike": 2,
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}
func (TableType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{0}
}

type TableState int32

const (
	TableState_TableState_Creating  TableState = 0
	TableState_TableState_Created   TableState = 1
	TableState_TableState_Tombstone TableState = 2
	TableState_TableState_Deleting  TableState = 3
	TableState_TableState_Deleted   TableState = 4
)

var TableState_name = map[int32]string{
	0: "TableState_Creating",
	1: "TableState_Created",
	2: "TableState_Tombstone",
	3: "TableState_Deleting",
	4: "TableState_Deleted",
}
var TableState_value = map[string]int32{
	"TableState_Creating":  0,
	"TableState_Created":   1,
	"TableState_Tombstone": 2,
	"TableState_Deleting":  3,
	"TableState_Deleted":   4,
}

func (x TableState) String() string {
	return proto.EnumName(TableState_name, int32(x))
}
func (TableState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{1}
}

type DBState int32

const (
	DBState_DBState_Creating  DBState = 0
	DBState_DBState_Created   DBState = 1
	DBState_DBState_Tombstone DBState = 2
	DBState_DBState_Deleting  DBState = 3
	DBState_DBState_Deleted   DBState = 4
)

var DBState_name = map[int32]string{
	0: "DBState_Creating",
	1: "DBState_Created",
	2: "DBState_Tombstone",
	3: "DBState_Deleting",
	4: "DBState_Deleted",
}
var DBState_value = map[string]int32{
	"DBState_Creating":  0,
	"DBState_Created":   1,
	"DBState_Tombstone": 2,
	"DBState_Deleting":  3,
	"DBState_Deleted":   4,
}

func (x DBState) String() string {
	return proto.EnumName(DBState_name, int32(x))
}
func (DBState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{2}
}

type AdminRequestHeader struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppName              string   `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	User                 string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminRequestHeader) Reset()         { *m = AdminRequestHeader{} }
func (m *AdminRequestHeader) String() string { return proto.CompactTextString(m) }
func (*AdminRequestHeader) ProtoMessage()    {}
func (*AdminRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{0}
}
func (m *AdminRequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequestHeader.Merge(dst, src)
}
func (m *AdminRequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequestHeader proto.InternalMessageInfo

func (m *AdminRequestHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AdminRequestHeader) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AdminRequestHeader) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type AdminResponseHeader struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminResponseHeader) Reset()         { *m = AdminResponseHeader{} }
func (m *AdminResponseHeader) String() string { return proto.CompactTextString(m) }
func (*AdminResponseHeader) ProtoMessage()    {}
func (*AdminResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{1}
}
func (m *AdminResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponseHeader.Merge(dst, src)
}
func (m *AdminResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponseHeader proto.InternalMessageInfo

func (m *AdminResponseHeader) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AdminRequest struct {
	Header *AdminRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*AdminRequest_CreateDbReq
	//	*AdminRequest_GetDbReq
	//	*AdminRequest_ListDbsReq
	//	*AdminRequest_DropDbReq
	Req                  isAdminRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminRequest) Reset()         { *m = AdminRequest{} }
func (m *AdminRequest) String() string { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()    {}
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{2}
}
func (m *AdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequest.Merge(dst, src)
}
func (m *AdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequest proto.InternalMessageInfo

type isAdminRequest_Req interface {
	isAdminRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminRequest_CreateDbReq struct {
	CreateDbReq *CreateDBRequest `protobuf:"bytes,2,opt,name=create_db_req,json=createDbReq,oneof"`
}
type AdminRequest_GetDbReq struct {
	GetDbReq *GetDBRequest `protobuf:"bytes,3,opt,name=get_db_req,json=getDbReq,oneof"`
}
type AdminRequest_ListDbsReq struct {
	ListDbsReq *ListDBsRequest `protobuf:"bytes,4,opt,name=list_dbs_req,json=listDbsReq,oneof"`
}
type AdminRequest_DropDbReq struct {
	DropDbReq *DropDBRequest `protobuf:"bytes,5,opt,name=drop_db_req,json=dropDbReq,oneof"`
}

func (*AdminRequest_CreateDbReq) isAdminRequest_Req() {}
func (*AdminRequest_GetDbReq) isAdminRequest_Req()    {}
func (*AdminRequest_ListDbsReq) isAdminRequest_Req()  {}
func (*AdminRequest_DropDbReq) isAdminRequest_Req()   {}

func (m *AdminRequest) GetReq() isAdminRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *AdminRequest) GetHeader() *AdminRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminRequest) GetCreateDbReq() *CreateDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_CreateDbReq); ok {
		return x.CreateDbReq
	}
	return nil
}

func (m *AdminRequest) GetGetDbReq() *GetDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_GetDbReq); ok {
		return x.GetDbReq
	}
	return nil
}

func (m *AdminRequest) GetListDbsReq() *ListDBsRequest {
	if x, ok := m.GetReq().(*AdminRequest_ListDbsReq); ok {
		return x.ListDbsReq
	}
	return nil
}

func (m *AdminRequest) GetDropDbReq() *DropDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_DropDbReq); ok {
		return x.DropDbReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminRequest_OneofMarshaler, _AdminRequest_OneofUnmarshaler, _AdminRequest_OneofSizer, []interface{}{
		(*AdminRequest_CreateDbReq)(nil),
		(*AdminRequest_GetDbReq)(nil),
		(*AdminRequest_ListDbsReq)(nil),
		(*AdminRequest_DropDbReq)(nil),
	}
}

func _AdminRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_CreateDbReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateDbReq); err != nil {
			return err
		}
	case *AdminRequest_GetDbReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetDbReq); err != nil {
			return err
		}
	case *AdminRequest_ListDbsReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListDbsReq); err != nil {
			return err
		}
	case *AdminRequest_DropDbReq:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropDbReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _AdminRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminRequest)
	switch tag {
	case 2: // req.create_db_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_CreateDbReq{msg}
		return true, err
	case 3: // req.get_db_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_GetDbReq{msg}
		return true, err
	case 4: // req.list_dbs_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListDBsRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_ListDbsReq{msg}
		return true, err
	case 5: // req.drop_db_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_DropDbReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_CreateDbReq:
		s := proto.Size(x.CreateDbReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_GetDbReq:
		s := proto.Size(x.GetDbReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_ListDbsReq:
		s := proto.Size(x.ListDbsReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_DropDbReq:
		s := proto.Size(x.DropDbReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AdminResponse struct {
	Header *AdminResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*AdminResponse_CreateDbResp
	//	*AdminResponse_GetDbResp
	//	*AdminResponse_ListDbsResp
	//	*AdminResponse_DropDbResp
	Resp                 isAdminResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AdminResponse) Reset()         { *m = AdminResponse{} }
func (m *AdminResponse) String() string { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()    {}
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{3}
}
func (m *AdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponse.Merge(dst, src)
}
func (m *AdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponse proto.InternalMessageInfo

type isAdminResponse_Resp interface {
	isAdminResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminResponse_CreateDbResp struct {
	CreateDbResp *CreateDBResponse `protobuf:"bytes,2,opt,name=create_db_resp,json=createDbResp,oneof"`
}
type AdminResponse_GetDbResp struct {
	GetDbResp *GetDBResponse `protobuf:"bytes,3,opt,name=get_db_resp,json=getDbResp,oneof"`
}
type AdminResponse_ListDbsResp struct {
	ListDbsResp *ListDBsResponse `protobuf:"bytes,4,opt,name=list_dbs_resp,json=listDbsResp,oneof"`
}
type AdminResponse_DropDbResp struct {
	DropDbResp *DropDBResponse `protobuf:"bytes,5,opt,name=drop_db_resp,json=dropDbResp,oneof"`
}

func (*AdminResponse_CreateDbResp) isAdminResponse_Resp() {}
func (*AdminResponse_GetDbResp) isAdminResponse_Resp()    {}
func (*AdminResponse_ListDbsResp) isAdminResponse_Resp()  {}
func (*AdminResponse_DropDbResp) isAdminResponse_Resp()   {}

func (m *AdminResponse) GetResp() isAdminResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *AdminResponse) GetHeader() *AdminResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminResponse) GetCreateDbResp() *CreateDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_CreateDbResp); ok {
		return x.CreateDbResp
	}
	return nil
}

func (m *AdminResponse) GetGetDbResp() *GetDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_GetDbResp); ok {
		return x.GetDbResp
	}
	return nil
}

func (m *AdminResponse) GetListDbsResp() *ListDBsResponse {
	if x, ok := m.GetResp().(*AdminResponse_ListDbsResp); ok {
		return x.ListDbsResp
	}
	return nil
}

func (m *AdminResponse) GetDropDbResp() *DropDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_DropDbResp); ok {
		return x.DropDbResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminResponse_OneofMarshaler, _AdminResponse_OneofUnmarshaler, _AdminResponse_OneofSizer, []interface{}{
		(*AdminResponse_CreateDbResp)(nil),
		(*AdminResponse_GetDbResp)(nil),
		(*AdminResponse_ListDbsResp)(nil),
		(*AdminResponse_DropDbResp)(nil),
	}
}

func _AdminResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_CreateDbResp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateDbResp); err != nil {
			return err
		}
	case *AdminResponse_GetDbResp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetDbResp); err != nil {
			return err
		}
	case *AdminResponse_ListDbsResp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListDbsResp); err != nil {
			return err
		}
	case *AdminResponse_DropDbResp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropDbResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _AdminResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminResponse)
	switch tag {
	case 2: // resp.create_db_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_CreateDbResp{msg}
		return true, err
	case 3: // resp.get_db_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_GetDbResp{msg}
		return true, err
	case 4: // resp.list_dbs_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListDBsResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_ListDbsResp{msg}
		return true, err
	case 5: // resp.drop_db_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_DropDbResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_CreateDbResp:
		s := proto.Size(x.CreateDbResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_GetDbResp:
		s := proto.Size(x.GetDbResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_ListDbsResp:
		s := proto.Size(x.ListDbsResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_DropDbResp:
		s := proto.Size(x.DropDbResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DBInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	State                DBState  `protobuf:"varint,3,opt,name=state,proto3,enum=tiap_adminrpcpb.DBState" json:"state,omitempty"`
	Quota                *DBQuota `protobuf:"bytes,4,opt,name=quota" json:"quota,omitempty"`
	Comment              []string `protobuf:"bytes,5,rep,name=comment" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBInfo) Reset()         { *m = DBInfo{} }
func (m *DBInfo) String() string { return proto.CompactTextString(m) }
func (*DBInfo) ProtoMessage()    {}
func (*DBInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{4}
}
func (m *DBInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DBInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBInfo.Merge(dst, src)
}
func (m *DBInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBInfo proto.InternalMessageInfo

func (m *DBInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DBInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DBInfo) GetState() DBState {
	if m != nil {
		return m.State
	}
	return DBState_DBState_Creating
}

func (m *DBInfo) GetQuota() *DBQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

func (m *DBInfo) GetComment() []string {
	if m != nil {
		return m.Comment
	}
	return nil
}

type TableInfo struct {
	Name                 string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64               `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	DbId                 int64               `protobuf:"varint,3,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	Token                string              `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Type                 TableType           `protobuf:"varint,5,opt,name=type,proto3,enum=tiap_adminrpcpb.TableType" json:"type,omitempty"`
	State                TableState          `protobuf:"varint,6,opt,name=state,proto3,enum=tiap_adminrpcpb.TableState" json:"state,omitempty"`
	Quota                *TableQuota         `protobuf:"bytes,7,opt,name=quota" json:"quota,omitempty"`
	Comment              []string            `protobuf:"bytes,8,rep,name=comment" json:"comment,omitempty"`
	RawExtra             *RawTableExtraInfo  `protobuf:"bytes,9,opt,name=raw_extra,json=rawExtra" json:"raw_extra,omitempty"`
	HbaseLikeExtra       *HBaseLikeTableInfo `protobuf:"bytes,10,opt,name=hbase_like_extra,json=hbaseLikeExtra" json:"hbase_like_extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TableInfo) Reset()         { *m = TableInfo{} }
func (m *TableInfo) String() string { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()    {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{5}
}
func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(dst, src)
}
func (m *TableInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

func (m *TableInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TableInfo) GetDbId() int64 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *TableInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TableInfo) GetType() TableType {
	if m != nil {
		return m.Type
	}
	return TableType_TableType_Invalid
}

func (m *TableInfo) GetState() TableState {
	if m != nil {
		return m.State
	}
	return TableState_TableState_Creating
}

func (m *TableInfo) GetQuota() *TableQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

func (m *TableInfo) GetComment() []string {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *TableInfo) GetRawExtra() *RawTableExtraInfo {
	if m != nil {
		return m.RawExtra
	}
	return nil
}

func (m *TableInfo) GetHbaseLikeExtra() *HBaseLikeTableInfo {
	if m != nil {
		return m.HbaseLikeExtra
	}
	return nil
}

type RawTableExtraInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTableExtraInfo) Reset()         { *m = RawTableExtraInfo{} }
func (m *RawTableExtraInfo) String() string { return proto.CompactTextString(m) }
func (*RawTableExtraInfo) ProtoMessage()    {}
func (*RawTableExtraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{6}
}
func (m *RawTableExtraInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawTableExtraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawTableExtraInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RawTableExtraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTableExtraInfo.Merge(dst, src)
}
func (m *RawTableExtraInfo) XXX_Size() int {
	return m.Size()
}
func (m *RawTableExtraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTableExtraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RawTableExtraInfo proto.InternalMessageInfo

type HBaseLikeTableInfo struct {
	Families             map[string]string `protobuf:"bytes,1,rep,name=families" json:"families,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Salted               bool              `protobuf:"varint,2,opt,name=salted,proto3" json:"salted,omitempty"`
	MultiVersion         bool              `protobuf:"varint,3,opt,name=multi_version,json=multiVersion,proto3" json:"multi_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HBaseLikeTableInfo) Reset()         { *m = HBaseLikeTableInfo{} }
func (m *HBaseLikeTableInfo) String() string { return proto.CompactTextString(m) }
func (*HBaseLikeTableInfo) ProtoMessage()    {}
func (*HBaseLikeTableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{7}
}
func (m *HBaseLikeTableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HBaseLikeTableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HBaseLikeTableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HBaseLikeTableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HBaseLikeTableInfo.Merge(dst, src)
}
func (m *HBaseLikeTableInfo) XXX_Size() int {
	return m.Size()
}
func (m *HBaseLikeTableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HBaseLikeTableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HBaseLikeTableInfo proto.InternalMessageInfo

func (m *HBaseLikeTableInfo) GetFamilies() map[string]string {
	if m != nil {
		return m.Families
	}
	return nil
}

func (m *HBaseLikeTableInfo) GetSalted() bool {
	if m != nil {
		return m.Salted
	}
	return false
}

func (m *HBaseLikeTableInfo) GetMultiVersion() bool {
	if m != nil {
		return m.MultiVersion
	}
	return false
}

type DBQuota struct {
	TableNumber          uint64   `protobuf:"varint,1,opt,name=table_number,json=tableNumber,proto3" json:"table_number,omitempty"`
	StorageCapacity      uint64   `protobuf:"varint,2,opt,name=storage_capacity,json=storageCapacity,proto3" json:"storage_capacity,omitempty"`
	MaxQps               uint64   `protobuf:"varint,3,opt,name=max_qps,json=maxQps,proto3" json:"max_qps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBQuota) Reset()         { *m = DBQuota{} }
func (m *DBQuota) String() string { return proto.CompactTextString(m) }
func (*DBQuota) ProtoMessage()    {}
func (*DBQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{8}
}
func (m *DBQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DBQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBQuota.Merge(dst, src)
}
func (m *DBQuota) XXX_Size() int {
	return m.Size()
}
func (m *DBQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_DBQuota.DiscardUnknown(m)
}

var xxx_messageInfo_DBQuota proto.InternalMessageInfo

func (m *DBQuota) GetTableNumber() uint64 {
	if m != nil {
		return m.TableNumber
	}
	return 0
}

func (m *DBQuota) GetStorageCapacity() uint64 {
	if m != nil {
		return m.StorageCapacity
	}
	return 0
}

func (m *DBQuota) GetMaxQps() uint64 {
	if m != nil {
		return m.MaxQps
	}
	return 0
}

type TableQuota struct {
	StorageCapacity      uint64   `protobuf:"varint,1,opt,name=storage_capacity,json=storageCapacity,proto3" json:"storage_capacity,omitempty"`
	MaxQps               uint64   `protobuf:"varint,2,opt,name=max_qps,json=maxQps,proto3" json:"max_qps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableQuota) Reset()         { *m = TableQuota{} }
func (m *TableQuota) String() string { return proto.CompactTextString(m) }
func (*TableQuota) ProtoMessage()    {}
func (*TableQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{9}
}
func (m *TableQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TableQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableQuota.Merge(dst, src)
}
func (m *TableQuota) XXX_Size() int {
	return m.Size()
}
func (m *TableQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_TableQuota.DiscardUnknown(m)
}

var xxx_messageInfo_TableQuota proto.InternalMessageInfo

func (m *TableQuota) GetStorageCapacity() uint64 {
	if m != nil {
		return m.StorageCapacity
	}
	return 0
}

func (m *TableQuota) GetMaxQps() uint64 {
	if m != nil {
		return m.MaxQps
	}
	return 0
}

type CreateDBRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Quota                *DBQuota `protobuf:"bytes,2,opt,name=quota" json:"quota,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDBRequest) Reset()         { *m = CreateDBRequest{} }
func (m *CreateDBRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDBRequest) ProtoMessage()    {}
func (*CreateDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{10}
}
func (m *CreateDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDBRequest.Merge(dst, src)
}
func (m *CreateDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDBRequest proto.InternalMessageInfo

func (m *CreateDBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateDBRequest) GetQuota() *DBQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

type CreateDBResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDBResponse) Reset()         { *m = CreateDBResponse{} }
func (m *CreateDBResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDBResponse) ProtoMessage()    {}
func (*CreateDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{11}
}
func (m *CreateDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDBResponse.Merge(dst, src)
}
func (m *CreateDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDBResponse proto.InternalMessageInfo

type GetDBRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDBRequest) Reset()         { *m = GetDBRequest{} }
func (m *GetDBRequest) String() string { return proto.CompactTextString(m) }
func (*GetDBRequest) ProtoMessage()    {}
func (*GetDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{12}
}
func (m *GetDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDBRequest.Merge(dst, src)
}
func (m *GetDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDBRequest proto.InternalMessageInfo

func (m *GetDBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetDBResponse struct {
	Info                 *DBInfo  `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDBResponse) Reset()         { *m = GetDBResponse{} }
func (m *GetDBResponse) String() string { return proto.CompactTextString(m) }
func (*GetDBResponse) ProtoMessage()    {}
func (*GetDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{13}
}
func (m *GetDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDBResponse.Merge(dst, src)
}
func (m *GetDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDBResponse proto.InternalMessageInfo

func (m *GetDBResponse) GetInfo() *DBInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListDBsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDBsRequest) Reset()         { *m = ListDBsRequest{} }
func (m *ListDBsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDBsRequest) ProtoMessage()    {}
func (*ListDBsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{14}
}
func (m *ListDBsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDBsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDBsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListDBsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDBsRequest.Merge(dst, src)
}
func (m *ListDBsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDBsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDBsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDBsRequest proto.InternalMessageInfo

type ListDBsResponse struct {
	Infos                []*DBInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListDBsResponse) Reset()         { *m = ListDBsResponse{} }
func (m *ListDBsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDBsResponse) ProtoMessage()    {}
func (*ListDBsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{15}
}
func (m *ListDBsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDBsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDBsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListDBsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDBsResponse.Merge(dst, src)
}
func (m *ListDBsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDBsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDBsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDBsResponse proto.InternalMessageInfo

func (m *ListDBsResponse) GetInfos() []*DBInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type DropDBRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropDBRequest) Reset()         { *m = DropDBRequest{} }
func (m *DropDBRequest) String() string { return proto.CompactTextString(m) }
func (*DropDBRequest) ProtoMessage()    {}
func (*DropDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{16}
}
func (m *DropDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DropDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropDBRequest.Merge(dst, src)
}
func (m *DropDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *DropDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DropDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DropDBRequest proto.InternalMessageInfo

func (m *DropDBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DropDBResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropDBResponse) Reset()         { *m = DropDBResponse{} }
func (m *DropDBResponse) String() string { return proto.CompactTextString(m) }
func (*DropDBResponse) ProtoMessage()    {}
func (*DropDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e, []int{17}
}
func (m *DropDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DropDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropDBResponse.Merge(dst, src)
}
func (m *DropDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *DropDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DropDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DropDBResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AdminRequestHeader)(nil), "tiap_adminrpcpb.AdminRequestHeader")
	proto.RegisterType((*AdminResponseHeader)(nil), "tiap_adminrpcpb.AdminResponseHeader")
	proto.RegisterType((*AdminRequest)(nil), "tiap_adminrpcpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "tiap_adminrpcpb.AdminResponse")
	proto.RegisterType((*DBInfo)(nil), "tiap_adminrpcpb.DBInfo")
	proto.RegisterType((*TableInfo)(nil), "tiap_adminrpcpb.TableInfo")
	proto.RegisterType((*RawTableExtraInfo)(nil), "tiap_adminrpcpb.RawTableExtraInfo")
	proto.RegisterType((*HBaseLikeTableInfo)(nil), "tiap_adminrpcpb.HBaseLikeTableInfo")
	proto.RegisterMapType((map[string]string)(nil), "tiap_adminrpcpb.HBaseLikeTableInfo.FamiliesEntry")
	proto.RegisterType((*DBQuota)(nil), "tiap_adminrpcpb.DBQuota")
	proto.RegisterType((*TableQuota)(nil), "tiap_adminrpcpb.TableQuota")
	proto.RegisterType((*CreateDBRequest)(nil), "tiap_adminrpcpb.CreateDBRequest")
	proto.RegisterType((*CreateDBResponse)(nil), "tiap_adminrpcpb.CreateDBResponse")
	proto.RegisterType((*GetDBRequest)(nil), "tiap_adminrpcpb.GetDBRequest")
	proto.RegisterType((*GetDBResponse)(nil), "tiap_adminrpcpb.GetDBResponse")
	proto.RegisterType((*ListDBsRequest)(nil), "tiap_adminrpcpb.ListDBsRequest")
	proto.RegisterType((*ListDBsResponse)(nil), "tiap_adminrpcpb.ListDBsResponse")
	proto.RegisterType((*DropDBRequest)(nil), "tiap_adminrpcpb.DropDBRequest")
	proto.RegisterType((*DropDBResponse)(nil), "tiap_adminrpcpb.DropDBResponse")
	proto.RegisterEnum("tiap_adminrpcpb.TableType", TableType_name, TableType_value)
	proto.RegisterEnum("tiap_adminrpcpb.TableState", TableState_name, TableState_value)
	proto.RegisterEnum("tiap_adminrpcpb.DBState", DBState_name, DBState_value)
}
func (m *AdminRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest_CreateDbReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateDbReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.CreateDbReq.Size()))
		n3, err := m.CreateDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AdminRequest_GetDbReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetDbReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.GetDbReq.Size()))
		n4, err := m.GetDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AdminRequest_ListDbsReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListDbsReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.ListDbsReq.Size()))
		n5, err := m.ListDbsReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AdminRequest_DropDbReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DropDbReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.DropDbReq.Size()))
		n6, err := m.DropDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Header.Size()))
		n7, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Resp != nil {
		nn8, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponse_CreateDbResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateDbResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.CreateDbResp.Size()))
		n9, err := m.CreateDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AdminResponse_GetDbResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetDbResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.GetDbResp.Size()))
		n10, err := m.GetDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AdminResponse_ListDbsResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListDbsResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.ListDbsResp.Size()))
		n11, err := m.ListDbsResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *AdminResponse_DropDbResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DropDbResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.DropDbResp.Size()))
		n12, err := m.DropDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *DBInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.State))
	}
	if m.Quota != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n13, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Comment) > 0 {
		for _, s := range m.Comment {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Id))
	}
	if m.DbId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.DbId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Type))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.State))
	}
	if m.Quota != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n14, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Comment) > 0 {
		for _, s := range m.Comment {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RawExtra != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.RawExtra.Size()))
		n15, err := m.RawExtra.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.HbaseLikeExtra != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.HbaseLikeExtra.Size()))
		n16, err := m.HbaseLikeExtra.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RawTableExtraInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawTableExtraInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HBaseLikeTableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HBaseLikeTableInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Families) > 0 {
		for k, _ := range m.Families {
			dAtA[i] = 0xa
			i++
			v := m.Families[k]
			mapSize := 1 + len(k) + sovTiapAdminrpcpb(uint64(len(k))) + 1 + len(v) + sovTiapAdminrpcpb(uint64(len(v)))
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Salted {
		dAtA[i] = 0x10
		i++
		if m.Salted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MultiVersion {
		dAtA[i] = 0x18
		i++
		if m.MultiVersion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DBQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBQuota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.TableNumber))
	}
	if m.StorageCapacity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxQps))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableQuota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StorageCapacity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxQps))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Quota != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n17, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Info.Size()))
		n18, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListDBsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDBsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListDBsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDBsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DropDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DropDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTiapAdminrpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminRequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Timestamp))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponseHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest_CreateDbReq) Size() (n int) {
	var l int
	_ = l
	if m.CreateDbReq != nil {
		l = m.CreateDbReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_GetDbReq) Size() (n int) {
	var l int
	_ = l
	if m.GetDbReq != nil {
		l = m.GetDbReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_ListDbsReq) Size() (n int) {
	var l int
	_ = l
	if m.ListDbsReq != nil {
		l = m.ListDbsReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_DropDbReq) Size() (n int) {
	var l int
	_ = l
	if m.DropDbReq != nil {
		l = m.DropDbReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponse_CreateDbResp) Size() (n int) {
	var l int
	_ = l
	if m.CreateDbResp != nil {
		l = m.CreateDbResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_GetDbResp) Size() (n int) {
	var l int
	_ = l
	if m.GetDbResp != nil {
		l = m.GetDbResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_ListDbsResp) Size() (n int) {
	var l int
	_ = l
	if m.ListDbsResp != nil {
		l = m.ListDbsResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_DropDbResp) Size() (n int) {
	var l int
	_ = l
	if m.DropDbResp != nil {
		l = m.DropDbResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *DBInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.State))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if len(m.Comment) > 0 {
		for _, s := range m.Comment {
			l = len(s)
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Id))
	}
	if m.DbId != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.DbId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Type))
	}
	if m.State != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.State))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if len(m.Comment) > 0 {
		for _, s := range m.Comment {
			l = len(s)
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.RawExtra != nil {
		l = m.RawExtra.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.HbaseLikeExtra != nil {
		l = m.HbaseLikeExtra.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RawTableExtraInfo) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HBaseLikeTableInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Families) > 0 {
		for k, v := range m.Families {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTiapAdminrpcpb(uint64(len(k))) + 1 + len(v) + sovTiapAdminrpcpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovTiapAdminrpcpb(uint64(mapEntrySize))
		}
	}
	if m.Salted {
		n += 2
	}
	if m.MultiVersion {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBQuota) Size() (n int) {
	var l int
	_ = l
	if m.TableNumber != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.TableNumber))
	}
	if m.StorageCapacity != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxQps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableQuota) Size() (n int) {
	var l int
	_ = l
	if m.StorageCapacity != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxQps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDBRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDBResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDBRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDBResponse) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDBsRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDBsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropDBRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropDBResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTiapAdminrpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTiapAdminrpcpb(x uint64) (n int) {
	return sovTiapAdminrpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_CreateDbReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_GetDbReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDbsReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDBsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_ListDbsReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_DropDbReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_CreateDbResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_GetDbResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDbsResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDBsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_ListDbsResp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_DropDbResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (DBState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &DBQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = append(m.Comment, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TableType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TableState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &TableQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = append(m.Comment, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawExtra == nil {
				m.RawExtra = &RawTableExtraInfo{}
			}
			if err := m.RawExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HbaseLikeExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HbaseLikeExtra == nil {
				m.HbaseLikeExtra = &HBaseLikeTableInfo{}
			}
			if err := m.HbaseLikeExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawTableExtraInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawTableExtraInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawTableExtraInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HBaseLikeTableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HBaseLikeTableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HBaseLikeTableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Families", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Families == nil {
				m.Families = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTiapAdminrpcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTiapAdminrpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTiapAdminrpcpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTiapAdminrpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTiapAdminrpcpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTiapAdminrpcpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Families[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Salted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiVersion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiVersion = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableNumber", wireType)
			}
			m.TableNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageCapacity", wireType)
			}
			m.StorageCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageCapacity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQps", wireType)
			}
			m.MaxQps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageCapacity", wireType)
			}
			m.StorageCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageCapacity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQps", wireType)
			}
			m.MaxQps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &DBQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DBInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDBsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDBsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDBsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDBsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDBsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDBsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &DBInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTiapAdminrpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTiapAdminrpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTiapAdminrpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTiapAdminrpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTiapAdminrpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTiapAdminrpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tiap_adminrpcpb.proto", fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e)
}

var fileDescriptor_tiap_adminrpcpb_831f58cea8bcd16e = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0xc7, 0x4d, 0x9d, 0x2c, 0x8d, 0x0e, 0xa6, 0xd7, 0x4e, 0xa2, 0x2f, 0xf9, 0xaa, 0x28, 0x4c,
	0x2f, 0x5c, 0x07, 0x51, 0x61, 0xf7, 0xa6, 0x68, 0x52, 0x34, 0x95, 0x95, 0x34, 0x06, 0x12, 0xa3,
	0xd9, 0xba, 0xbd, 0x25, 0x56, 0xe2, 0x5a, 0x26, 0x2c, 0x92, 0x2b, 0xee, 0xca, 0x87, 0x37, 0xe8,
	0x23, 0x14, 0x7d, 0x80, 0x3e, 0x4b, 0x2f, 0xfb, 0x02, 0x05, 0x02, 0xf7, 0x01, 0xfa, 0x0a, 0xc5,
	0x0e, 0x57, 0x14, 0x75, 0x6a, 0x7d, 0x25, 0xee, 0x70, 0xe6, 0x37, 0xc3, 0xff, 0xce, 0xce, 0x0a,
	0xee, 0x29, 0x9f, 0x09, 0x97, 0x79, 0x81, 0x1f, 0xc6, 0x62, 0x20, 0xfa, 0x1d, 0x11, 0x47, 0x2a,
	0x22, 0x5b, 0x0b, 0xe6, 0x87, 0xbb, 0xc3, 0x68, 0x18, 0xe1, 0xbb, 0xcf, 0xf5, 0x53, 0xe2, 0xe6,
	0x30, 0x20, 0xdf, 0x6a, 0x1f, 0xca, 0xc7, 0x13, 0x2e, 0xd5, 0x5b, 0xce, 0x3c, 0x1e, 0x93, 0xff,
	0x43, 0x45, 0xf9, 0x01, 0x97, 0x8a, 0x05, 0xa2, 0x69, 0xb5, 0xad, 0xbd, 0x3c, 0x9d, 0x19, 0xc8,
	0xff, 0xa0, 0xcc, 0x84, 0x70, 0x43, 0x16, 0xf0, 0x66, 0xae, 0x6d, 0xed, 0x55, 0xe8, 0x26, 0x13,
	0xe2, 0x84, 0x05, 0x9c, 0x10, 0x28, 0x4c, 0x24, 0x8f, 0x9b, 0x79, 0x34, 0xe3, 0xb3, 0xf3, 0x0c,
	0x76, 0x4c, 0x0a, 0x29, 0xa2, 0x50, 0x72, 0x93, 0x63, 0x17, 0x8a, 0x3c, 0x8e, 0xa3, 0x18, 0xf9,
	0x15, 0x9a, 0x2c, 0x9c, 0x8f, 0x39, 0xa8, 0x65, 0x0b, 0x22, 0x2f, 0xa0, 0x74, 0x8e, 0x01, 0xe8,
	0x57, 0x3d, 0x7c, 0xda, 0x59, 0xfc, 0xde, 0xe5, 0xfa, 0xa9, 0x09, 0x21, 0x6f, 0xa0, 0x3e, 0x88,
	0x39, 0x53, 0xdc, 0xf5, 0xfa, 0x6e, 0xcc, 0xc7, 0x58, 0x6e, 0xf5, 0xb0, 0xbd, 0xc4, 0x38, 0x42,
	0xaf, 0x5e, 0x77, 0x8a, 0xd9, 0xa0, 0xd5, 0x24, 0xb0, 0xd7, 0xa7, 0x7c, 0x4c, 0xbe, 0x06, 0x18,
	0x72, 0x35, 0x85, 0xe4, 0x11, 0xf2, 0xc9, 0x12, 0xe4, 0x3b, 0xae, 0xb2, 0x84, 0xf2, 0x90, 0xab,
	0x24, 0xfc, 0x08, 0x6a, 0x23, 0x5f, 0xea, 0x78, 0x89, 0x80, 0x02, 0x02, 0x1e, 0x2f, 0x01, 0xde,
	0xf9, 0x52, 0xf5, 0xba, 0x72, 0x86, 0x00, 0x1d, 0xd6, 0xeb, 0x6b, 0x0b, 0x79, 0x05, 0x55, 0x2f,
	0x8e, 0xc4, 0xb4, 0x88, 0x22, 0x32, 0x5a, 0x4b, 0x8c, 0x5e, 0x1c, 0x89, 0x6c, 0x15, 0x15, 0x1d,
	0x84, 0x65, 0x74, 0x8b, 0x90, 0x8f, 0xf9, 0xd8, 0xf9, 0x3b, 0x07, 0xf5, 0xb9, 0x0d, 0x21, 0x2f,
	0x17, 0x34, 0xfe, 0x74, 0x9d, 0xc6, 0xd9, 0x0d, 0x4c, 0x45, 0x3e, 0x86, 0x46, 0x56, 0x64, 0x29,
	0x8c, 0xca, 0x4f, 0xfe, 0x45, 0x65, 0x03, 0xda, 0xa0, 0xb5, 0x99, 0xcc, 0x52, 0xe8, 0x6f, 0x4c,
	0x75, 0x96, 0xc2, 0x08, 0xdd, 0x5a, 0x27, 0x74, 0x0a, 0xa9, 0x18, 0xa5, 0xa5, 0xd0, 0x3b, 0x9e,
	0x91, 0x5a, 0x0a, 0xa3, 0x75, 0x7b, 0xbd, 0xd6, 0x29, 0xa5, 0x9a, 0x8a, 0x2d, 0x85, 0xde, 0xb2,
	0x99, 0xda, 0x52, 0x18, 0xb9, 0x1f, 0xaf, 0x95, 0x3b, 0xa5, 0xc0, 0x54, 0x6f, 0x29, 0xba, 0x25,
	0x28, 0xe8, 0x60, 0xe7, 0x37, 0x0b, 0x4a, 0xbd, 0xee, 0x71, 0x78, 0x16, 0xe9, 0x03, 0x82, 0xe7,
	0x26, 0x69, 0x7a, 0x7c, 0x26, 0x0d, 0xc8, 0xf9, 0x1e, 0x8a, 0x96, 0xa7, 0x39, 0xdf, 0x23, 0x1d,
	0x28, 0x4a, 0xc5, 0x14, 0xc7, 0xef, 0x6f, 0x1c, 0x36, 0x97, 0x93, 0x76, 0x7f, 0xd0, 0xef, 0x69,
	0xe2, 0xa6, 0xfd, 0xc7, 0x93, 0x48, 0x31, 0xf3, 0xad, 0xab, 0xfc, 0x3f, 0xe8, 0xf7, 0x34, 0x71,
	0x23, 0x4d, 0xd8, 0x1c, 0x44, 0x41, 0xc0, 0x43, 0xd5, 0x2c, 0xb6, 0xf3, 0xfa, 0xf8, 0x9a, 0xa5,
	0xf3, 0x6b, 0x1e, 0x2a, 0xa7, 0xac, 0x3f, 0xe2, 0x77, 0xae, 0x75, 0x07, 0x8a, 0x5e, 0xdf, 0xf5,
	0x3d, 0xac, 0x35, 0x4f, 0x0b, 0x5e, 0xff, 0xd8, 0xd3, 0x47, 0x5b, 0x45, 0x17, 0x3c, 0xc4, 0x82,
	0x2a, 0x34, 0x59, 0x90, 0x0e, 0x14, 0xd4, 0x8d, 0xe0, 0x28, 0x65, 0xe3, 0xf0, 0xe1, 0x52, 0x95,
	0x98, 0xf8, 0xf4, 0x46, 0x70, 0x8a, 0x7e, 0xe4, 0x60, 0x2a, 0x43, 0x09, 0x03, 0x1e, 0xad, 0x0e,
	0x98, 0x53, 0xe2, 0x60, 0xaa, 0xc4, 0x26, 0x2a, 0xb1, 0x26, 0x64, 0x9d, 0x18, 0xe5, 0x39, 0x31,
	0xc8, 0x37, 0x50, 0x89, 0xd9, 0x95, 0xcb, 0xaf, 0x55, 0xcc, 0x9a, 0x15, 0x04, 0x3a, 0x4b, 0x40,
	0xca, 0xae, 0x90, 0xf9, 0x5a, 0x7b, 0x69, 0xd5, 0x68, 0x39, 0x66, 0x57, 0xb8, 0x22, 0xef, 0xc1,
	0x3e, 0xef, 0x33, 0xc9, 0xdd, 0x91, 0x7f, 0xc1, 0x0d, 0x07, 0xd6, 0x0c, 0xb1, 0xb7, 0x5d, 0x26,
	0xf9, 0x3b, 0xff, 0x82, 0xa7, 0xf2, 0xd3, 0x06, 0x06, 0x6b, 0x1b, 0xe2, 0x9c, 0x1d, 0xd8, 0x5e,
	0xca, 0xe6, 0xfc, 0x69, 0x01, 0x59, 0x8e, 0x25, 0xef, 0xa1, 0x7c, 0xc6, 0x02, 0x7f, 0xe4, 0x73,
	0xd9, 0xb4, 0xda, 0xf9, 0xbd, 0xea, 0xe1, 0xc1, 0x1d, 0x52, 0x76, 0xde, 0x98, 0x98, 0xd7, 0xa1,
	0x8a, 0x6f, 0x68, 0x8a, 0x20, 0xf7, 0xa1, 0x24, 0xd9, 0x48, 0xf1, 0x64, 0xe7, 0xcb, 0xd4, 0xac,
	0xc8, 0x53, 0xa8, 0x07, 0x93, 0x91, 0xf2, 0xdd, 0x4b, 0x1e, 0x4b, 0x3f, 0x0a, 0xb1, 0x0b, 0xca,
	0xb4, 0x86, 0xc6, 0x9f, 0x12, 0xdb, 0xc3, 0x17, 0x50, 0x9f, 0xe3, 0x12, 0x1b, 0xf2, 0x17, 0xfc,
	0xc6, 0xb4, 0x95, 0x7e, 0xd4, 0x0d, 0x73, 0xc9, 0x46, 0x93, 0xe9, 0x75, 0x92, 0x2c, 0xbe, 0xca,
	0x7d, 0x69, 0x39, 0x02, 0x36, 0x4d, 0xf7, 0x92, 0x27, 0x50, 0x53, 0xba, 0x52, 0x37, 0x9c, 0x04,
	0x7d, 0x33, 0xab, 0x0a, 0xb4, 0x8a, 0xb6, 0x13, 0x34, 0x91, 0xcf, 0xc0, 0x96, 0x2a, 0x8a, 0xd9,
	0x90, 0xbb, 0x03, 0x26, 0xd8, 0xc0, 0x57, 0x37, 0x88, 0x2c, 0xd0, 0x2d, 0x63, 0x3f, 0x32, 0x66,
	0xf2, 0x00, 0x36, 0x03, 0x76, 0xed, 0x8e, 0x85, 0xc4, 0xa2, 0x0b, 0xb4, 0x14, 0xb0, 0xeb, 0x0f,
	0x42, 0x3a, 0xdf, 0x03, 0xcc, 0xba, 0x64, 0x25, 0xd1, 0xfa, 0x4f, 0x62, 0x6e, 0x8e, 0xf8, 0x23,
	0x6c, 0x2d, 0xdc, 0x2f, 0x2b, 0x8f, 0x56, 0x7a, 0x8c, 0x73, 0x77, 0x3a, 0xc6, 0x0e, 0x01, 0x7b,
	0x71, 0xa0, 0x3a, 0x0e, 0xd4, 0xb2, 0xb7, 0xd0, 0xaa, 0x3c, 0xce, 0x4b, 0xa8, 0xcf, 0x0d, 0x50,
	0xf2, 0x0c, 0x0a, 0x7e, 0x78, 0x16, 0x99, 0xe1, 0xff, 0x60, 0x45, 0x5e, 0xec, 0x47, 0x74, 0x72,
	0x6c, 0x68, 0xcc, 0x5f, 0x53, 0xce, 0x2b, 0xd8, 0x5a, 0x18, 0xa6, 0xe4, 0x39, 0x14, 0xb5, 0xf3,
	0xb4, 0xf7, 0xd6, 0x22, 0x13, 0x2f, 0xe7, 0x29, 0xd4, 0xe7, 0xae, 0xad, 0x95, 0x65, 0xdb, 0xd0,
	0x98, 0x1f, 0xb6, 0xfb, 0x27, 0x66, 0x58, 0xe9, 0x99, 0x41, 0xee, 0xc1, 0x76, 0xba, 0x70, 0x8f,
	0xc3, 0x4b, 0x36, 0xf2, 0x3d, 0x7b, 0x83, 0x6c, 0x43, 0x7d, 0x66, 0xa6, 0xec, 0xca, 0xb6, 0xc8,
	0x03, 0xd8, 0x99, 0x99, 0xd2, 0x43, 0x60, 0xe7, 0xf6, 0x7f, 0xb6, 0xcc, 0xd6, 0xe3, 0x4c, 0x49,
	0xfd, 0x70, 0xe5, 0xa2, 0xd4, 0x7e, 0x38, 0xb4, 0x37, 0xc8, 0x7d, 0x20, 0x8b, 0x2f, 0xb8, 0x67,
	0x5b, 0xa4, 0x09, 0xbb, 0x19, 0xfb, 0x69, 0x14, 0xf4, 0xa5, 0x8a, 0x42, 0x6e, 0xe7, 0x16, 0x50,
	0x3d, 0x3e, 0xe2, 0x88, 0xca, 0x2f, 0xa0, 0xf0, 0x05, 0xf7, 0xec, 0xc2, 0xfe, 0xa5, 0x6e, 0xfb,
	0xa4, 0x8c, 0x5d, 0xb0, 0xcd, 0x63, 0xb6, 0x86, 0x1d, 0xd8, 0x9a, 0xb3, 0x62, 0x01, 0xf7, 0x60,
	0x7b, 0x6a, 0xcc, 0x66, 0xcf, 0x10, 0x32, 0xa9, 0x33, 0x84, 0x34, 0x6f, 0xf7, 0xf9, 0xef, 0xb7,
	0x2d, 0xeb, 0x8f, 0xdb, 0x96, 0xf5, 0xf1, 0xb6, 0x65, 0xfd, 0xf2, 0x57, 0x6b, 0x03, 0x1e, 0x0d,
	0xa2, 0xa0, 0x23, 0xcf, 0x23, 0xc1, 0x79, 0xc7, 0xf3, 0x3b, 0x17, 0x97, 0xba, 0xed, 0x79, 0xf2,
	0xef, 0xb1, 0x5f, 0xc2, 0x9f, 0x2f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x59, 0x93, 0x8f,
	0x84, 0x0a, 0x00, 0x00,
}
