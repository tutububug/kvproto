// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiap_adminrpcpb.proto

package tiap_adminrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TableType int32

const (
	TableType_TypeInvalid   TableType = 0
	TableType_TypeRaw       TableType = 1
	TableType_TypeHBaseLike TableType = 2
)

var TableType_name = map[int32]string{
	0: "TypeInvalid",
	1: "TypeRaw",
	2: "TypeHBaseLike",
}
var TableType_value = map[string]int32{
	"TypeInvalid":   0,
	"TypeRaw":       1,
	"TypeHBaseLike": 2,
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}
func (TableType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{0}
}

type SchemaState int32

const (
	SchemaState_StateInvalid  SchemaState = 0
	SchemaState_StateCreating SchemaState = 1
	SchemaState_StateCreated  SchemaState = 2
	SchemaState_StateDeleting SchemaState = 3
	SchemaState_StateDeleted  SchemaState = 5
)

var SchemaState_name = map[int32]string{
	0: "StateInvalid",
	1: "StateCreating",
	2: "StateCreated",
	3: "StateDeleting",
	5: "StateDeleted",
}
var SchemaState_value = map[string]int32{
	"StateInvalid":  0,
	"StateCreating": 1,
	"StateCreated":  2,
	"StateDeleting": 3,
	"StateDeleted":  5,
}

func (x SchemaState) String() string {
	return proto.EnumName(SchemaState_name, int32(x))
}
func (SchemaState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{1}
}

type AdminRequestHeader struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppName              string   `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	User                 string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminRequestHeader) Reset()         { *m = AdminRequestHeader{} }
func (m *AdminRequestHeader) String() string { return proto.CompactTextString(m) }
func (*AdminRequestHeader) ProtoMessage()    {}
func (*AdminRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{0}
}
func (m *AdminRequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequestHeader.Merge(dst, src)
}
func (m *AdminRequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequestHeader proto.InternalMessageInfo

func (m *AdminRequestHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AdminRequestHeader) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AdminRequestHeader) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type AdminResponseHeader struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminResponseHeader) Reset()         { *m = AdminResponseHeader{} }
func (m *AdminResponseHeader) String() string { return proto.CompactTextString(m) }
func (*AdminResponseHeader) ProtoMessage()    {}
func (*AdminResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{1}
}
func (m *AdminResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponseHeader.Merge(dst, src)
}
func (m *AdminResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponseHeader proto.InternalMessageInfo

func (m *AdminResponseHeader) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AdminRequest struct {
	Header *AdminRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*AdminRequest_CreateDbReq
	//	*AdminRequest_GetDbReq
	//	*AdminRequest_ListDbsReq
	//	*AdminRequest_DropDbReq
	Req                  isAdminRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminRequest) Reset()         { *m = AdminRequest{} }
func (m *AdminRequest) String() string { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()    {}
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{2}
}
func (m *AdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequest.Merge(dst, src)
}
func (m *AdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequest proto.InternalMessageInfo

type isAdminRequest_Req interface {
	isAdminRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminRequest_CreateDbReq struct {
	CreateDbReq *CreateDBRequest `protobuf:"bytes,2,opt,name=create_db_req,json=createDbReq,oneof"`
}
type AdminRequest_GetDbReq struct {
	GetDbReq *GetDBRequest `protobuf:"bytes,3,opt,name=get_db_req,json=getDbReq,oneof"`
}
type AdminRequest_ListDbsReq struct {
	ListDbsReq *ListDBsRequest `protobuf:"bytes,4,opt,name=list_dbs_req,json=listDbsReq,oneof"`
}
type AdminRequest_DropDbReq struct {
	DropDbReq *DropDBRequest `protobuf:"bytes,5,opt,name=drop_db_req,json=dropDbReq,oneof"`
}

func (*AdminRequest_CreateDbReq) isAdminRequest_Req() {}
func (*AdminRequest_GetDbReq) isAdminRequest_Req()    {}
func (*AdminRequest_ListDbsReq) isAdminRequest_Req()  {}
func (*AdminRequest_DropDbReq) isAdminRequest_Req()   {}

func (m *AdminRequest) GetReq() isAdminRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *AdminRequest) GetHeader() *AdminRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminRequest) GetCreateDbReq() *CreateDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_CreateDbReq); ok {
		return x.CreateDbReq
	}
	return nil
}

func (m *AdminRequest) GetGetDbReq() *GetDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_GetDbReq); ok {
		return x.GetDbReq
	}
	return nil
}

func (m *AdminRequest) GetListDbsReq() *ListDBsRequest {
	if x, ok := m.GetReq().(*AdminRequest_ListDbsReq); ok {
		return x.ListDbsReq
	}
	return nil
}

func (m *AdminRequest) GetDropDbReq() *DropDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_DropDbReq); ok {
		return x.DropDbReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminRequest_OneofMarshaler, _AdminRequest_OneofUnmarshaler, _AdminRequest_OneofSizer, []interface{}{
		(*AdminRequest_CreateDbReq)(nil),
		(*AdminRequest_GetDbReq)(nil),
		(*AdminRequest_ListDbsReq)(nil),
		(*AdminRequest_DropDbReq)(nil),
	}
}

func _AdminRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_CreateDbReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateDbReq); err != nil {
			return err
		}
	case *AdminRequest_GetDbReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetDbReq); err != nil {
			return err
		}
	case *AdminRequest_ListDbsReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListDbsReq); err != nil {
			return err
		}
	case *AdminRequest_DropDbReq:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropDbReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _AdminRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminRequest)
	switch tag {
	case 2: // req.create_db_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_CreateDbReq{msg}
		return true, err
	case 3: // req.get_db_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_GetDbReq{msg}
		return true, err
	case 4: // req.list_dbs_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListDBsRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_ListDbsReq{msg}
		return true, err
	case 5: // req.drop_db_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_DropDbReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_CreateDbReq:
		s := proto.Size(x.CreateDbReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_GetDbReq:
		s := proto.Size(x.GetDbReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_ListDbsReq:
		s := proto.Size(x.ListDbsReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_DropDbReq:
		s := proto.Size(x.DropDbReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AdminResponse struct {
	Header *AdminResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*AdminResponse_CreateDbResp
	//	*AdminResponse_GetDbResp
	//	*AdminResponse_ListDbsResp
	//	*AdminResponse_DropDbResp
	Resp                 isAdminResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AdminResponse) Reset()         { *m = AdminResponse{} }
func (m *AdminResponse) String() string { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()    {}
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{3}
}
func (m *AdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponse.Merge(dst, src)
}
func (m *AdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponse proto.InternalMessageInfo

type isAdminResponse_Resp interface {
	isAdminResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminResponse_CreateDbResp struct {
	CreateDbResp *CreateDBResponse `protobuf:"bytes,2,opt,name=create_db_resp,json=createDbResp,oneof"`
}
type AdminResponse_GetDbResp struct {
	GetDbResp *GetDBResponse `protobuf:"bytes,3,opt,name=get_db_resp,json=getDbResp,oneof"`
}
type AdminResponse_ListDbsResp struct {
	ListDbsResp *ListDBsResponse `protobuf:"bytes,4,opt,name=list_dbs_resp,json=listDbsResp,oneof"`
}
type AdminResponse_DropDbResp struct {
	DropDbResp *DropDBResponse `protobuf:"bytes,5,opt,name=drop_db_resp,json=dropDbResp,oneof"`
}

func (*AdminResponse_CreateDbResp) isAdminResponse_Resp() {}
func (*AdminResponse_GetDbResp) isAdminResponse_Resp()    {}
func (*AdminResponse_ListDbsResp) isAdminResponse_Resp()  {}
func (*AdminResponse_DropDbResp) isAdminResponse_Resp()   {}

func (m *AdminResponse) GetResp() isAdminResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *AdminResponse) GetHeader() *AdminResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminResponse) GetCreateDbResp() *CreateDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_CreateDbResp); ok {
		return x.CreateDbResp
	}
	return nil
}

func (m *AdminResponse) GetGetDbResp() *GetDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_GetDbResp); ok {
		return x.GetDbResp
	}
	return nil
}

func (m *AdminResponse) GetListDbsResp() *ListDBsResponse {
	if x, ok := m.GetResp().(*AdminResponse_ListDbsResp); ok {
		return x.ListDbsResp
	}
	return nil
}

func (m *AdminResponse) GetDropDbResp() *DropDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_DropDbResp); ok {
		return x.DropDbResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminResponse_OneofMarshaler, _AdminResponse_OneofUnmarshaler, _AdminResponse_OneofSizer, []interface{}{
		(*AdminResponse_CreateDbResp)(nil),
		(*AdminResponse_GetDbResp)(nil),
		(*AdminResponse_ListDbsResp)(nil),
		(*AdminResponse_DropDbResp)(nil),
	}
}

func _AdminResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_CreateDbResp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateDbResp); err != nil {
			return err
		}
	case *AdminResponse_GetDbResp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetDbResp); err != nil {
			return err
		}
	case *AdminResponse_ListDbsResp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListDbsResp); err != nil {
			return err
		}
	case *AdminResponse_DropDbResp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropDbResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _AdminResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminResponse)
	switch tag {
	case 2: // resp.create_db_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_CreateDbResp{msg}
		return true, err
	case 3: // resp.get_db_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_GetDbResp{msg}
		return true, err
	case 4: // resp.list_dbs_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListDBsResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_ListDbsResp{msg}
		return true, err
	case 5: // resp.drop_db_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_DropDbResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_CreateDbResp:
		s := proto.Size(x.CreateDbResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_GetDbResp:
		s := proto.Size(x.GetDbResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_ListDbsResp:
		s := proto.Size(x.ListDbsResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_DropDbResp:
		s := proto.Size(x.DropDbResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DBInfo struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	State                SchemaState `protobuf:"varint,3,opt,name=state,proto3,enum=tiap_adminrpcpb.SchemaState" json:"state,omitempty"`
	Quota                *DBQuota    `protobuf:"bytes,4,opt,name=quota" json:"quota,omitempty"`
	Token                string      `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Comments             []string    `protobuf:"bytes,6,rep,name=comments" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DBInfo) Reset()         { *m = DBInfo{} }
func (m *DBInfo) String() string { return proto.CompactTextString(m) }
func (*DBInfo) ProtoMessage()    {}
func (*DBInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{4}
}
func (m *DBInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DBInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBInfo.Merge(dst, src)
}
func (m *DBInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBInfo proto.InternalMessageInfo

func (m *DBInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DBInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DBInfo) GetState() SchemaState {
	if m != nil {
		return m.State
	}
	return SchemaState_StateInvalid
}

func (m *DBInfo) GetQuota() *DBQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

func (m *DBInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DBInfo) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

type TableInfo struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64                     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	DbId                 int64                     `protobuf:"varint,3,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	Type                 TableType                 `protobuf:"varint,5,opt,name=type,proto3,enum=tiap_adminrpcpb.TableType" json:"type,omitempty"`
	State                SchemaState               `protobuf:"varint,6,opt,name=state,proto3,enum=tiap_adminrpcpb.SchemaState" json:"state,omitempty"`
	Quota                *TableQuota               `protobuf:"bytes,7,opt,name=quota" json:"quota,omitempty"`
	Comments             []string                  `protobuf:"bytes,8,rep,name=comments" json:"comments,omitempty"`
	RawExtInfo           *RawTableExtendInfo       `protobuf:"bytes,9,opt,name=raw_ext_info,json=rawExtInfo" json:"raw_ext_info,omitempty"`
	HbaseLikeExtInfo     *HBaseLikeTableExtendInfo `protobuf:"bytes,10,opt,name=hbase_like_ext_info,json=hbaseLikeExtInfo" json:"hbase_like_ext_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TableInfo) Reset()         { *m = TableInfo{} }
func (m *TableInfo) String() string { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()    {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{5}
}
func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(dst, src)
}
func (m *TableInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

func (m *TableInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TableInfo) GetDbId() int64 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *TableInfo) GetType() TableType {
	if m != nil {
		return m.Type
	}
	return TableType_TypeInvalid
}

func (m *TableInfo) GetState() SchemaState {
	if m != nil {
		return m.State
	}
	return SchemaState_StateInvalid
}

func (m *TableInfo) GetQuota() *TableQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

func (m *TableInfo) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *TableInfo) GetRawExtInfo() *RawTableExtendInfo {
	if m != nil {
		return m.RawExtInfo
	}
	return nil
}

func (m *TableInfo) GetHbaseLikeExtInfo() *HBaseLikeTableExtendInfo {
	if m != nil {
		return m.HbaseLikeExtInfo
	}
	return nil
}

type RawTableExtendInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTableExtendInfo) Reset()         { *m = RawTableExtendInfo{} }
func (m *RawTableExtendInfo) String() string { return proto.CompactTextString(m) }
func (*RawTableExtendInfo) ProtoMessage()    {}
func (*RawTableExtendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{6}
}
func (m *RawTableExtendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawTableExtendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawTableExtendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RawTableExtendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTableExtendInfo.Merge(dst, src)
}
func (m *RawTableExtendInfo) XXX_Size() int {
	return m.Size()
}
func (m *RawTableExtendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTableExtendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RawTableExtendInfo proto.InternalMessageInfo

type HBaseLikeTableExtendInfo struct {
	Salted               bool            `protobuf:"varint,1,opt,name=salted,proto3" json:"salted,omitempty"`
	MultiVersion         bool            `protobuf:"varint,2,opt,name=multi_version,json=multiVersion,proto3" json:"multi_version,omitempty"`
	Families             []*ColumnFamily `protobuf:"bytes,3,rep,name=families" json:"families,omitempty"`
	MaxAssignId          int64           `protobuf:"varint,4,opt,name=max_assign_id,json=maxAssignId,proto3" json:"max_assign_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HBaseLikeTableExtendInfo) Reset()         { *m = HBaseLikeTableExtendInfo{} }
func (m *HBaseLikeTableExtendInfo) String() string { return proto.CompactTextString(m) }
func (*HBaseLikeTableExtendInfo) ProtoMessage()    {}
func (*HBaseLikeTableExtendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{7}
}
func (m *HBaseLikeTableExtendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HBaseLikeTableExtendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HBaseLikeTableExtendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HBaseLikeTableExtendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HBaseLikeTableExtendInfo.Merge(dst, src)
}
func (m *HBaseLikeTableExtendInfo) XXX_Size() int {
	return m.Size()
}
func (m *HBaseLikeTableExtendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HBaseLikeTableExtendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HBaseLikeTableExtendInfo proto.InternalMessageInfo

func (m *HBaseLikeTableExtendInfo) GetSalted() bool {
	if m != nil {
		return m.Salted
	}
	return false
}

func (m *HBaseLikeTableExtendInfo) GetMultiVersion() bool {
	if m != nil {
		return m.MultiVersion
	}
	return false
}

func (m *HBaseLikeTableExtendInfo) GetFamilies() []*ColumnFamily {
	if m != nil {
		return m.Families
	}
	return nil
}

func (m *HBaseLikeTableExtendInfo) GetMaxAssignId() int64 {
	if m != nil {
		return m.MaxAssignId
	}
	return 0
}

type ColumnFamily struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	State                SchemaState `protobuf:"varint,3,opt,name=state,proto3,enum=tiap_adminrpcpb.SchemaState" json:"state,omitempty"`
	Columns              []*Column   `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ColumnFamily) Reset()         { *m = ColumnFamily{} }
func (m *ColumnFamily) String() string { return proto.CompactTextString(m) }
func (*ColumnFamily) ProtoMessage()    {}
func (*ColumnFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{8}
}
func (m *ColumnFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnFamily.Merge(dst, src)
}
func (m *ColumnFamily) XXX_Size() int {
	return m.Size()
}
func (m *ColumnFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnFamily.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnFamily proto.InternalMessageInfo

func (m *ColumnFamily) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnFamily) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ColumnFamily) GetState() SchemaState {
	if m != nil {
		return m.State
	}
	return SchemaState_StateInvalid
}

func (m *ColumnFamily) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Column struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	State                SchemaState `protobuf:"varint,3,opt,name=state,proto3,enum=tiap_adminrpcpb.SchemaState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{9}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(dst, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Column) GetState() SchemaState {
	if m != nil {
		return m.State
	}
	return SchemaState_StateInvalid
}

type DBQuota struct {
	TableNumber          uint64   `protobuf:"varint,1,opt,name=table_number,json=tableNumber,proto3" json:"table_number,omitempty"`
	StorageCapacity      uint64   `protobuf:"varint,2,opt,name=storage_capacity,json=storageCapacity,proto3" json:"storage_capacity,omitempty"`
	MaxQps               uint64   `protobuf:"varint,3,opt,name=max_qps,json=maxQps,proto3" json:"max_qps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBQuota) Reset()         { *m = DBQuota{} }
func (m *DBQuota) String() string { return proto.CompactTextString(m) }
func (*DBQuota) ProtoMessage()    {}
func (*DBQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{10}
}
func (m *DBQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DBQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBQuota.Merge(dst, src)
}
func (m *DBQuota) XXX_Size() int {
	return m.Size()
}
func (m *DBQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_DBQuota.DiscardUnknown(m)
}

var xxx_messageInfo_DBQuota proto.InternalMessageInfo

func (m *DBQuota) GetTableNumber() uint64 {
	if m != nil {
		return m.TableNumber
	}
	return 0
}

func (m *DBQuota) GetStorageCapacity() uint64 {
	if m != nil {
		return m.StorageCapacity
	}
	return 0
}

func (m *DBQuota) GetMaxQps() uint64 {
	if m != nil {
		return m.MaxQps
	}
	return 0
}

type TableQuota struct {
	StorageCapacity       uint64   `protobuf:"varint,1,opt,name=storage_capacity,json=storageCapacity,proto3" json:"storage_capacity,omitempty"`
	MaxQps                uint64   `protobuf:"varint,2,opt,name=max_qps,json=maxQps,proto3" json:"max_qps,omitempty"`
	MaxColumnFamily       uint64   `protobuf:"varint,3,opt,name=max_column_family,json=maxColumnFamily,proto3" json:"max_column_family,omitempty"`
	MaxColumnPerFamily    uint64   `protobuf:"varint,4,opt,name=max_column_per_family,json=maxColumnPerFamily,proto3" json:"max_column_per_family,omitempty"`
	MaxColumnVersionCount uint64   `protobuf:"varint,5,opt,name=max_column_version_count,json=maxColumnVersionCount,proto3" json:"max_column_version_count,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TableQuota) Reset()         { *m = TableQuota{} }
func (m *TableQuota) String() string { return proto.CompactTextString(m) }
func (*TableQuota) ProtoMessage()    {}
func (*TableQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{11}
}
func (m *TableQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TableQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableQuota.Merge(dst, src)
}
func (m *TableQuota) XXX_Size() int {
	return m.Size()
}
func (m *TableQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_TableQuota.DiscardUnknown(m)
}

var xxx_messageInfo_TableQuota proto.InternalMessageInfo

func (m *TableQuota) GetStorageCapacity() uint64 {
	if m != nil {
		return m.StorageCapacity
	}
	return 0
}

func (m *TableQuota) GetMaxQps() uint64 {
	if m != nil {
		return m.MaxQps
	}
	return 0
}

func (m *TableQuota) GetMaxColumnFamily() uint64 {
	if m != nil {
		return m.MaxColumnFamily
	}
	return 0
}

func (m *TableQuota) GetMaxColumnPerFamily() uint64 {
	if m != nil {
		return m.MaxColumnPerFamily
	}
	return 0
}

func (m *TableQuota) GetMaxColumnVersionCount() uint64 {
	if m != nil {
		return m.MaxColumnVersionCount
	}
	return 0
}

type CreateDBRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Quota                *DBQuota `protobuf:"bytes,2,opt,name=quota" json:"quota,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDBRequest) Reset()         { *m = CreateDBRequest{} }
func (m *CreateDBRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDBRequest) ProtoMessage()    {}
func (*CreateDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{12}
}
func (m *CreateDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDBRequest.Merge(dst, src)
}
func (m *CreateDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDBRequest proto.InternalMessageInfo

func (m *CreateDBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateDBRequest) GetQuota() *DBQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

type CreateDBResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDBResponse) Reset()         { *m = CreateDBResponse{} }
func (m *CreateDBResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDBResponse) ProtoMessage()    {}
func (*CreateDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{13}
}
func (m *CreateDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDBResponse.Merge(dst, src)
}
func (m *CreateDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDBResponse proto.InternalMessageInfo

func (m *CreateDBResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetDBRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDBRequest) Reset()         { *m = GetDBRequest{} }
func (m *GetDBRequest) String() string { return proto.CompactTextString(m) }
func (*GetDBRequest) ProtoMessage()    {}
func (*GetDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{14}
}
func (m *GetDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDBRequest.Merge(dst, src)
}
func (m *GetDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDBRequest proto.InternalMessageInfo

func (m *GetDBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetDBResponse struct {
	Info                 *DBInfo  `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDBResponse) Reset()         { *m = GetDBResponse{} }
func (m *GetDBResponse) String() string { return proto.CompactTextString(m) }
func (*GetDBResponse) ProtoMessage()    {}
func (*GetDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{15}
}
func (m *GetDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDBResponse.Merge(dst, src)
}
func (m *GetDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDBResponse proto.InternalMessageInfo

func (m *GetDBResponse) GetInfo() *DBInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListDBsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDBsRequest) Reset()         { *m = ListDBsRequest{} }
func (m *ListDBsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDBsRequest) ProtoMessage()    {}
func (*ListDBsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{16}
}
func (m *ListDBsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDBsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDBsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListDBsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDBsRequest.Merge(dst, src)
}
func (m *ListDBsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDBsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDBsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDBsRequest proto.InternalMessageInfo

type ListDBsResponse struct {
	Infos                []*DBInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListDBsResponse) Reset()         { *m = ListDBsResponse{} }
func (m *ListDBsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDBsResponse) ProtoMessage()    {}
func (*ListDBsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{17}
}
func (m *ListDBsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDBsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDBsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListDBsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDBsResponse.Merge(dst, src)
}
func (m *ListDBsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDBsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDBsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDBsResponse proto.InternalMessageInfo

func (m *ListDBsResponse) GetInfos() []*DBInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type DropDBRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropDBRequest) Reset()         { *m = DropDBRequest{} }
func (m *DropDBRequest) String() string { return proto.CompactTextString(m) }
func (*DropDBRequest) ProtoMessage()    {}
func (*DropDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{18}
}
func (m *DropDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DropDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropDBRequest.Merge(dst, src)
}
func (m *DropDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *DropDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DropDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DropDBRequest proto.InternalMessageInfo

func (m *DropDBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DropDBResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropDBResponse) Reset()         { *m = DropDBResponse{} }
func (m *DropDBResponse) String() string { return proto.CompactTextString(m) }
func (*DropDBResponse) ProtoMessage()    {}
func (*DropDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1, []int{19}
}
func (m *DropDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DropDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropDBResponse.Merge(dst, src)
}
func (m *DropDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *DropDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DropDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DropDBResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AdminRequestHeader)(nil), "tiap_adminrpcpb.AdminRequestHeader")
	proto.RegisterType((*AdminResponseHeader)(nil), "tiap_adminrpcpb.AdminResponseHeader")
	proto.RegisterType((*AdminRequest)(nil), "tiap_adminrpcpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "tiap_adminrpcpb.AdminResponse")
	proto.RegisterType((*DBInfo)(nil), "tiap_adminrpcpb.DBInfo")
	proto.RegisterType((*TableInfo)(nil), "tiap_adminrpcpb.TableInfo")
	proto.RegisterType((*RawTableExtendInfo)(nil), "tiap_adminrpcpb.RawTableExtendInfo")
	proto.RegisterType((*HBaseLikeTableExtendInfo)(nil), "tiap_adminrpcpb.HBaseLikeTableExtendInfo")
	proto.RegisterType((*ColumnFamily)(nil), "tiap_adminrpcpb.ColumnFamily")
	proto.RegisterType((*Column)(nil), "tiap_adminrpcpb.Column")
	proto.RegisterType((*DBQuota)(nil), "tiap_adminrpcpb.DBQuota")
	proto.RegisterType((*TableQuota)(nil), "tiap_adminrpcpb.TableQuota")
	proto.RegisterType((*CreateDBRequest)(nil), "tiap_adminrpcpb.CreateDBRequest")
	proto.RegisterType((*CreateDBResponse)(nil), "tiap_adminrpcpb.CreateDBResponse")
	proto.RegisterType((*GetDBRequest)(nil), "tiap_adminrpcpb.GetDBRequest")
	proto.RegisterType((*GetDBResponse)(nil), "tiap_adminrpcpb.GetDBResponse")
	proto.RegisterType((*ListDBsRequest)(nil), "tiap_adminrpcpb.ListDBsRequest")
	proto.RegisterType((*ListDBsResponse)(nil), "tiap_adminrpcpb.ListDBsResponse")
	proto.RegisterType((*DropDBRequest)(nil), "tiap_adminrpcpb.DropDBRequest")
	proto.RegisterType((*DropDBResponse)(nil), "tiap_adminrpcpb.DropDBResponse")
	proto.RegisterEnum("tiap_adminrpcpb.TableType", TableType_name, TableType_value)
	proto.RegisterEnum("tiap_adminrpcpb.SchemaState", SchemaState_name, SchemaState_value)
}
func (m *AdminRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest_CreateDbReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateDbReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.CreateDbReq.Size()))
		n3, err := m.CreateDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AdminRequest_GetDbReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetDbReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.GetDbReq.Size()))
		n4, err := m.GetDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AdminRequest_ListDbsReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListDbsReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.ListDbsReq.Size()))
		n5, err := m.ListDbsReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AdminRequest_DropDbReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DropDbReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.DropDbReq.Size()))
		n6, err := m.DropDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Header.Size()))
		n7, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Resp != nil {
		nn8, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponse_CreateDbResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateDbResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.CreateDbResp.Size()))
		n9, err := m.CreateDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AdminResponse_GetDbResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetDbResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.GetDbResp.Size()))
		n10, err := m.GetDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AdminResponse_ListDbsResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListDbsResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.ListDbsResp.Size()))
		n11, err := m.ListDbsResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *AdminResponse_DropDbResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DropDbResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.DropDbResp.Size()))
		n12, err := m.DropDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *DBInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.State))
	}
	if m.Quota != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n13, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Id))
	}
	if m.DbId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.DbId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Type))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.State))
	}
	if m.Quota != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n14, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RawExtInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.RawExtInfo.Size()))
		n15, err := m.RawExtInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.HbaseLikeExtInfo != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.HbaseLikeExtInfo.Size()))
		n16, err := m.HbaseLikeExtInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RawTableExtendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawTableExtendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HBaseLikeTableExtendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HBaseLikeTableExtendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Salted {
		dAtA[i] = 0x8
		i++
		if m.Salted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MultiVersion {
		dAtA[i] = 0x10
		i++
		if m.MultiVersion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Families) > 0 {
		for _, msg := range m.Families {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxAssignId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxAssignId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnFamily) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.State))
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DBQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBQuota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.TableNumber))
	}
	if m.StorageCapacity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxQps))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableQuota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StorageCapacity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxQps))
	}
	if m.MaxColumnFamily != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxColumnFamily))
	}
	if m.MaxColumnPerFamily != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxColumnPerFamily))
	}
	if m.MaxColumnVersionCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.MaxColumnVersionCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Quota != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n17, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(m.Info.Size()))
		n18, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListDBsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDBsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListDBsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDBsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DropDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DropDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTiapAdminrpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminRequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Timestamp))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponseHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest_CreateDbReq) Size() (n int) {
	var l int
	_ = l
	if m.CreateDbReq != nil {
		l = m.CreateDbReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_GetDbReq) Size() (n int) {
	var l int
	_ = l
	if m.GetDbReq != nil {
		l = m.GetDbReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_ListDbsReq) Size() (n int) {
	var l int
	_ = l
	if m.ListDbsReq != nil {
		l = m.ListDbsReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_DropDbReq) Size() (n int) {
	var l int
	_ = l
	if m.DropDbReq != nil {
		l = m.DropDbReq.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponse_CreateDbResp) Size() (n int) {
	var l int
	_ = l
	if m.CreateDbResp != nil {
		l = m.CreateDbResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_GetDbResp) Size() (n int) {
	var l int
	_ = l
	if m.GetDbResp != nil {
		l = m.GetDbResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_ListDbsResp) Size() (n int) {
	var l int
	_ = l
	if m.ListDbsResp != nil {
		l = m.ListDbsResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_DropDbResp) Size() (n int) {
	var l int
	_ = l
	if m.DropDbResp != nil {
		l = m.DropDbResp.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	return n
}
func (m *DBInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.State))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			l = len(s)
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Id))
	}
	if m.DbId != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.DbId))
	}
	if m.Type != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Type))
	}
	if m.State != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.State))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			l = len(s)
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.RawExtInfo != nil {
		l = m.RawExtInfo.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.HbaseLikeExtInfo != nil {
		l = m.HbaseLikeExtInfo.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RawTableExtendInfo) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HBaseLikeTableExtendInfo) Size() (n int) {
	var l int
	_ = l
	if m.Salted {
		n += 2
	}
	if m.MultiVersion {
		n += 2
	}
	if len(m.Families) > 0 {
		for _, e := range m.Families {
			l = e.Size()
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.MaxAssignId != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxAssignId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnFamily) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.State))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Column) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBQuota) Size() (n int) {
	var l int
	_ = l
	if m.TableNumber != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.TableNumber))
	}
	if m.StorageCapacity != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxQps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableQuota) Size() (n int) {
	var l int
	_ = l
	if m.StorageCapacity != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.StorageCapacity))
	}
	if m.MaxQps != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxQps))
	}
	if m.MaxColumnFamily != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxColumnFamily))
	}
	if m.MaxColumnPerFamily != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxColumnPerFamily))
	}
	if m.MaxColumnVersionCount != 0 {
		n += 1 + sovTiapAdminrpcpb(uint64(m.MaxColumnVersionCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDBRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDBResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDBRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDBResponse) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDBsRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDBsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovTiapAdminrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropDBRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropDBResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTiapAdminrpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTiapAdminrpcpb(x uint64) (n int) {
	return sovTiapAdminrpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_CreateDbReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_GetDbReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDbsReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDBsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_ListDbsReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_DropDbReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_CreateDbResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_GetDbResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDbsResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDBsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_ListDbsResp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_DropDbResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (SchemaState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &DBQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TableType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (SchemaState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &TableQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawExtInfo == nil {
				m.RawExtInfo = &RawTableExtendInfo{}
			}
			if err := m.RawExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HbaseLikeExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HbaseLikeExtInfo == nil {
				m.HbaseLikeExtInfo = &HBaseLikeTableExtendInfo{}
			}
			if err := m.HbaseLikeExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawTableExtendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawTableExtendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawTableExtendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HBaseLikeTableExtendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HBaseLikeTableExtendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HBaseLikeTableExtendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Salted = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiVersion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiVersion = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Families", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Families = append(m.Families, &ColumnFamily{})
			if err := m.Families[len(m.Families)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAssignId", wireType)
			}
			m.MaxAssignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAssignId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (SchemaState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Column{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (SchemaState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableNumber", wireType)
			}
			m.TableNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageCapacity", wireType)
			}
			m.StorageCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageCapacity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQps", wireType)
			}
			m.MaxQps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageCapacity", wireType)
			}
			m.StorageCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageCapacity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQps", wireType)
			}
			m.MaxQps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxColumnFamily", wireType)
			}
			m.MaxColumnFamily = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxColumnFamily |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxColumnPerFamily", wireType)
			}
			m.MaxColumnPerFamily = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxColumnPerFamily |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxColumnVersionCount", wireType)
			}
			m.MaxColumnVersionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxColumnVersionCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &DBQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DBInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDBsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDBsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDBsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDBsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDBsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDBsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &DBInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTiapAdminrpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTiapAdminrpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapAdminrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTiapAdminrpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTiapAdminrpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTiapAdminrpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTiapAdminrpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTiapAdminrpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tiap_adminrpcpb.proto", fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1)
}

var fileDescriptor_tiap_adminrpcpb_e5621edcf12d61a1 = []byte{
	// 1152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x37, 0x25, 0xea, 0x6b, 0xf4, 0xc5, 0x6c, 0x92, 0x7f, 0xf4, 0x4f, 0x52, 0x45, 0x61, 0x7a,
	0x70, 0x12, 0x44, 0x85, 0xdd, 0x43, 0x51, 0xd4, 0x05, 0x12, 0x59, 0x4e, 0x63, 0x20, 0x08, 0x9a,
	0x4d, 0x5a, 0xf4, 0xc6, 0xae, 0xc4, 0xb5, 0x4c, 0x58, 0x24, 0x57, 0xdc, 0x95, 0x2d, 0xbf, 0x49,
	0xfa, 0x22, 0x7d, 0x80, 0x9e, 0x7a, 0xec, 0x23, 0x04, 0xee, 0xa5, 0xb7, 0xbe, 0x42, 0xb1, 0x43,
	0x8a, 0xa2, 0xbe, 0x5a, 0x5f, 0x72, 0x22, 0x39, 0xfb, 0x9b, 0xdf, 0xcc, 0xfc, 0x66, 0x77, 0x96,
	0x70, 0x5b, 0x79, 0x4c, 0x38, 0xcc, 0xf5, 0xbd, 0x20, 0x12, 0x43, 0x31, 0xe8, 0x8a, 0x28, 0x54,
	0x21, 0x69, 0xae, 0x98, 0xef, 0xde, 0x1a, 0x85, 0xa3, 0x10, 0xd7, 0xbe, 0xd0, 0x6f, 0x31, 0xcc,
	0x66, 0x40, 0x5e, 0x68, 0x0c, 0xe5, 0x93, 0x29, 0x97, 0xea, 0x15, 0x67, 0x2e, 0x8f, 0xc8, 0x7d,
	0xa8, 0x28, 0xcf, 0xe7, 0x52, 0x31, 0x5f, 0xb4, 0x8c, 0x8e, 0xb1, 0x9b, 0xa7, 0x0b, 0x03, 0xf9,
	0x3f, 0x94, 0x99, 0x10, 0x4e, 0xc0, 0x7c, 0xde, 0xca, 0x75, 0x8c, 0xdd, 0x0a, 0x2d, 0x31, 0x21,
	0xde, 0x30, 0x9f, 0x13, 0x02, 0xe6, 0x54, 0xf2, 0xa8, 0x95, 0x47, 0x33, 0xbe, 0xdb, 0x4f, 0xe1,
	0x66, 0x12, 0x42, 0x8a, 0x30, 0x90, 0x3c, 0x89, 0x71, 0x0b, 0x0a, 0x3c, 0x8a, 0xc2, 0x08, 0xf9,
	0x2b, 0x34, 0xfe, 0xb0, 0x3f, 0xe6, 0xa0, 0x96, 0x4d, 0x88, 0x7c, 0x03, 0xc5, 0x53, 0x74, 0x40,
	0x5c, 0x75, 0xff, 0x51, 0x77, 0xb5, 0xde, 0xf5, 0xfc, 0x69, 0xe2, 0x42, 0x5e, 0x42, 0x7d, 0x18,
	0x71, 0xa6, 0xb8, 0xe3, 0x0e, 0x9c, 0x88, 0x4f, 0x30, 0xdd, 0xea, 0x7e, 0x67, 0x8d, 0xe3, 0x10,
	0x51, 0xfd, 0xde, 0x9c, 0x66, 0x87, 0x56, 0x63, 0xc7, 0xfe, 0x80, 0xf2, 0x09, 0xf9, 0x16, 0x60,
	0xc4, 0xd5, 0x9c, 0x24, 0x8f, 0x24, 0x9f, 0xad, 0x91, 0x7c, 0xc7, 0x55, 0x96, 0xa1, 0x3c, 0xe2,
	0x2a, 0x76, 0x3f, 0x84, 0xda, 0xd8, 0x93, 0xda, 0x5f, 0x22, 0x81, 0x89, 0x04, 0x0f, 0xd6, 0x08,
	0x5e, 0x7b, 0x52, 0xf5, 0x7b, 0x72, 0x41, 0x01, 0xda, 0xad, 0x3f, 0xd0, 0x16, 0xf2, 0x1c, 0xaa,
	0x6e, 0x14, 0x8a, 0x79, 0x12, 0x05, 0xe4, 0x68, 0xaf, 0x71, 0xf4, 0xa3, 0x50, 0x64, 0xb3, 0xa8,
	0x68, 0x27, 0x4c, 0xa3, 0x57, 0x80, 0x7c, 0xc4, 0x27, 0xf6, 0xdf, 0x39, 0xa8, 0x2f, 0x35, 0x84,
	0x1c, 0xac, 0x68, 0xfc, 0xf9, 0x36, 0x8d, 0xb3, 0x0d, 0x4c, 0x45, 0x3e, 0x86, 0x46, 0x56, 0x64,
	0x29, 0x12, 0x95, 0x1f, 0xfe, 0x8b, 0xca, 0x09, 0xd1, 0x0e, 0xad, 0x2d, 0x64, 0x96, 0x42, 0xd7,
	0x98, 0xea, 0x2c, 0x45, 0x22, 0x74, 0x7b, 0x9b, 0xd0, 0x29, 0x49, 0x25, 0x51, 0x5a, 0x0a, 0xdd,
	0xf1, 0x8c, 0xd4, 0x52, 0x24, 0x5a, 0x77, 0xb6, 0x6b, 0x9d, 0xb2, 0x54, 0x53, 0xb1, 0xa5, 0xd0,
	0x2d, 0x5b, 0xa8, 0x2d, 0x45, 0x22, 0xf7, 0x83, 0xad, 0x72, 0xa7, 0x2c, 0x30, 0xd7, 0x5b, 0x8a,
	0x5e, 0x11, 0x4c, 0xed, 0x6c, 0xff, 0x66, 0x40, 0xb1, 0xdf, 0x3b, 0x0e, 0x4e, 0x42, 0x7d, 0x40,
	0xf0, 0xdc, 0xc4, 0x9b, 0x1e, 0xdf, 0x49, 0x03, 0x72, 0x9e, 0x8b, 0xa2, 0xe5, 0x69, 0xce, 0x73,
	0xc9, 0x3e, 0x14, 0xa4, 0x62, 0x8a, 0x63, 0xfd, 0x8d, 0xfd, 0xfb, 0x6b, 0x41, 0xdf, 0x0d, 0x4f,
	0xb9, 0xcf, 0xde, 0x69, 0x0c, 0x8d, 0xa1, 0xa4, 0x0b, 0x85, 0xc9, 0x34, 0x54, 0x2c, 0xa9, 0xb7,
	0xb5, 0x9e, 0x68, 0xef, 0xad, 0x5e, 0xa7, 0x31, 0x4c, 0x9f, 0x3e, 0x15, 0x9e, 0xf1, 0x00, 0x0b,
	0xab, 0xd0, 0xf8, 0x83, 0xdc, 0x85, 0xf2, 0x30, 0xf4, 0x7d, 0x1e, 0x28, 0xd9, 0x2a, 0x76, 0xf2,
	0xbb, 0x15, 0x9a, 0x7e, 0xdb, 0x1f, 0xf2, 0x50, 0x79, 0xcf, 0x06, 0x63, 0x7e, 0xed, 0x3a, 0x6e,
	0x42, 0xc1, 0x1d, 0x38, 0x9e, 0x8b, 0x75, 0xe4, 0xa9, 0xe9, 0x0e, 0x8e, 0x5d, 0xd2, 0x05, 0x53,
	0x5d, 0x0a, 0x8e, 0x71, 0x1b, 0xfb, 0x77, 0xd7, 0xf2, 0xc4, 0x10, 0xef, 0x2f, 0x05, 0xa7, 0x88,
	0x5b, 0x88, 0x51, 0xbc, 0xbe, 0x18, 0x7b, 0x73, 0x31, 0x4a, 0x28, 0xc6, 0xbd, 0xcd, 0x41, 0x96,
	0xf4, 0xc8, 0x56, 0x5e, 0x5e, 0xae, 0x9c, 0x1c, 0x41, 0x2d, 0x62, 0x17, 0x0e, 0x9f, 0x29, 0xc7,
	0x0b, 0x4e, 0xc2, 0x56, 0x65, 0xcb, 0x20, 0xa2, 0xec, 0x02, 0x89, 0x8f, 0x66, 0x8a, 0x07, 0xae,
	0x96, 0x89, 0x42, 0xc4, 0x2e, 0x8e, 0x66, 0x0a, 0x25, 0xfb, 0x09, 0x6e, 0x9e, 0x0e, 0x98, 0xe4,
	0xce, 0xd8, 0x3b, 0xe3, 0x0b, 0x36, 0x40, 0xb6, 0xc7, 0x6b, 0x6c, 0xaf, 0x7a, 0x4c, 0xf2, 0xd7,
	0xde, 0x19, 0x5f, 0xe5, 0xb4, 0x90, 0x45, 0xaf, 0x24, 0xcc, 0xf6, 0x2d, 0x20, 0xeb, 0xb1, 0xed,
	0x5f, 0x0d, 0x68, 0x6d, 0x23, 0x21, 0xff, 0x83, 0xa2, 0x64, 0x63, 0xc5, 0x5d, 0xec, 0x60, 0x99,
	0x26, 0x5f, 0xe4, 0x11, 0xd4, 0xfd, 0xe9, 0x58, 0x79, 0xce, 0x39, 0x8f, 0xa4, 0x17, 0x06, 0xd8,
	0xce, 0x32, 0xad, 0xa1, 0xf1, 0xc7, 0xd8, 0x46, 0xbe, 0x86, 0xf2, 0x09, 0xf3, 0xbd, 0xb1, 0xc7,
	0x65, 0x2b, 0xdf, 0xc9, 0x6f, 0x1c, 0x86, 0x87, 0xe1, 0x78, 0xea, 0x07, 0x2f, 0x35, 0xec, 0x92,
	0xa6, 0x70, 0x62, 0x43, 0xdd, 0x67, 0x33, 0x87, 0x49, 0xe9, 0x8d, 0x02, 0xbd, 0x37, 0x4c, 0xdc,
	0x1b, 0x55, 0x9f, 0xcd, 0x5e, 0xa0, 0xed, 0xd8, 0xb5, 0x7f, 0x31, 0xa0, 0x96, 0x75, 0xff, 0x64,
	0x87, 0x66, 0x0f, 0x4a, 0x43, 0x8c, 0x23, 0x5b, 0x26, 0x96, 0x71, 0x67, 0x4b, 0x19, 0x74, 0x8e,
	0xb3, 0x7f, 0x86, 0x62, 0x6c, 0xfa, 0x54, 0x49, 0xd9, 0x02, 0x4a, 0xc9, 0x59, 0x25, 0x0f, 0xa1,
	0xa6, 0x74, 0xdf, 0x9c, 0x60, 0xea, 0x0f, 0x92, 0xe9, 0x6c, 0xd2, 0x2a, 0xda, 0xde, 0xa0, 0x89,
	0x3c, 0x06, 0x4b, 0xaa, 0x30, 0x62, 0x23, 0xee, 0x0c, 0x99, 0x60, 0x43, 0x4f, 0x5d, 0x62, 0x7c,
	0x93, 0x36, 0x13, 0xfb, 0x61, 0x62, 0x26, 0x77, 0xa0, 0xa4, 0xa5, 0x9f, 0x08, 0x89, 0xe9, 0x98,
	0xb4, 0xe8, 0xb3, 0xd9, 0x5b, 0x21, 0xed, 0xbf, 0x0c, 0x80, 0xc5, 0x89, 0xd8, 0x48, 0x69, 0xfc,
	0x27, 0x65, 0x2e, 0x4b, 0x49, 0x9e, 0xc0, 0x0d, 0xbd, 0x10, 0xab, 0xe6, 0x60, 0xf7, 0x2f, 0x93,
	0xa8, 0x4d, 0x9f, 0xcd, 0x96, 0xba, 0xbb, 0x07, 0xb7, 0x33, 0x58, 0xc1, 0xa3, 0x39, 0xde, 0x44,
	0x3c, 0x49, 0xf1, 0xdf, 0xf3, 0x28, 0x71, 0xf9, 0x0a, 0x5a, 0x19, 0x97, 0x64, 0xab, 0x3a, 0xc3,
	0x70, 0x1a, 0x28, 0x1c, 0x2c, 0x26, 0xbd, 0x9d, 0x7a, 0x25, 0x9b, 0xf6, 0x50, 0x2f, 0xda, 0x3f,
	0x40, 0x73, 0xe5, 0xaa, 0xdf, 0xd8, 0xc7, 0x74, 0x9a, 0xe6, 0xae, 0x35, 0x4d, 0xed, 0x5d, 0xb0,
	0x56, 0xef, 0xb6, 0xc5, 0x84, 0x35, 0x32, 0x13, 0xd6, 0xb6, 0xa1, 0x96, 0xfd, 0x4d, 0xd8, 0x14,
	0xdd, 0x3e, 0x80, 0xfa, 0xd2, 0x0d, 0x47, 0x9e, 0x82, 0x89, 0xa3, 0x22, 0xbe, 0x9d, 0xef, 0x6c,
	0xc8, 0x06, 0x07, 0x03, 0x82, 0x6c, 0x0b, 0x1a, 0xcb, 0xff, 0x11, 0xf6, 0x73, 0x68, 0xae, 0xdc,
	0x76, 0xe4, 0x19, 0x14, 0x34, 0x58, 0xb6, 0x8c, 0x2d, 0xfb, 0x3e, 0xa1, 0x8c, 0x51, 0xf6, 0x23,
	0xa8, 0x2f, 0xfd, 0x57, 0x6c, 0x4c, 0xdb, 0x82, 0xc6, 0xf2, 0x6d, 0xf8, 0xe4, 0x20, 0xb9, 0x31,
	0xf4, 0x38, 0x27, 0x4d, 0xa8, 0xea, 0xe7, 0x71, 0x70, 0xce, 0xc6, 0x9e, 0x6b, 0xed, 0x90, 0x2a,
	0x94, 0x70, 0xce, 0xb3, 0x0b, 0xcb, 0x20, 0x37, 0xa0, 0xae, 0x3f, 0xd2, 0x79, 0x65, 0xe5, 0x9e,
	0x78, 0x50, 0xcd, 0x1c, 0x0f, 0x62, 0x41, 0x0d, 0x5f, 0x16, 0x04, 0x37, 0xa0, 0x8e, 0x16, 0x94,
	0xde, 0x0b, 0x46, 0x96, 0x91, 0x82, 0xe2, 0x6e, 0xb8, 0x56, 0x2e, 0x05, 0xf5, 0xf9, 0x98, 0x23,
	0x28, 0x9f, 0x82, 0xd0, 0xc4, 0x5d, 0xab, 0xd0, 0x7b, 0xf6, 0xfb, 0x55, 0xdb, 0xf8, 0xe3, 0xaa,
	0x6d, 0x7c, 0xbc, 0x6a, 0x1b, 0x1f, 0xfe, 0x6c, 0xef, 0xc0, 0xbd, 0x61, 0xe8, 0x77, 0xe5, 0x69,
	0x28, 0x38, 0xef, 0xba, 0x5e, 0xf7, 0xec, 0x5c, 0x6f, 0x7d, 0x1e, 0xff, 0x34, 0x0f, 0x8a, 0xf8,
	0xf8, 0xf2, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xcf, 0x78, 0xfc, 0x7b, 0x0b, 0x00, 0x00,
}
