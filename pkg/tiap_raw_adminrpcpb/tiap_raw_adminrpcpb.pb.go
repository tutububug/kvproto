// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiap_raw_adminrpcpb.proto

package tiap_raw_adminrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	tiap_adminrpcpb "github.com/tutububug/kvproto/pkg/tiap_adminrpcpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AdminRequest struct {
	Header *tiap_adminrpcpb.AdminRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*AdminRequest_CreateTableReq
	//	*AdminRequest_GetTableReq
	//	*AdminRequest_ListTablesReq
	//	*AdminRequest_DropTableReq
	Req                  isAdminRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminRequest) Reset()         { *m = AdminRequest{} }
func (m *AdminRequest) String() string { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()    {}
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{0}
}
func (m *AdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequest.Merge(dst, src)
}
func (m *AdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequest proto.InternalMessageInfo

type isAdminRequest_Req interface {
	isAdminRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminRequest_CreateTableReq struct {
	CreateTableReq *CreateTableRequest `protobuf:"bytes,2,opt,name=create_table_req,json=createTableReq,oneof"`
}
type AdminRequest_GetTableReq struct {
	GetTableReq *GetTableRequest `protobuf:"bytes,3,opt,name=get_table_req,json=getTableReq,oneof"`
}
type AdminRequest_ListTablesReq struct {
	ListTablesReq *ListTablesRequest `protobuf:"bytes,4,opt,name=list_tables_req,json=listTablesReq,oneof"`
}
type AdminRequest_DropTableReq struct {
	DropTableReq *DropTableRequest `protobuf:"bytes,5,opt,name=drop_table_req,json=dropTableReq,oneof"`
}

func (*AdminRequest_CreateTableReq) isAdminRequest_Req() {}
func (*AdminRequest_GetTableReq) isAdminRequest_Req()    {}
func (*AdminRequest_ListTablesReq) isAdminRequest_Req()  {}
func (*AdminRequest_DropTableReq) isAdminRequest_Req()   {}

func (m *AdminRequest) GetReq() isAdminRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *AdminRequest) GetHeader() *tiap_adminrpcpb.AdminRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminRequest) GetCreateTableReq() *CreateTableRequest {
	if x, ok := m.GetReq().(*AdminRequest_CreateTableReq); ok {
		return x.CreateTableReq
	}
	return nil
}

func (m *AdminRequest) GetGetTableReq() *GetTableRequest {
	if x, ok := m.GetReq().(*AdminRequest_GetTableReq); ok {
		return x.GetTableReq
	}
	return nil
}

func (m *AdminRequest) GetListTablesReq() *ListTablesRequest {
	if x, ok := m.GetReq().(*AdminRequest_ListTablesReq); ok {
		return x.ListTablesReq
	}
	return nil
}

func (m *AdminRequest) GetDropTableReq() *DropTableRequest {
	if x, ok := m.GetReq().(*AdminRequest_DropTableReq); ok {
		return x.DropTableReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminRequest_OneofMarshaler, _AdminRequest_OneofUnmarshaler, _AdminRequest_OneofSizer, []interface{}{
		(*AdminRequest_CreateTableReq)(nil),
		(*AdminRequest_GetTableReq)(nil),
		(*AdminRequest_ListTablesReq)(nil),
		(*AdminRequest_DropTableReq)(nil),
	}
}

func _AdminRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_CreateTableReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTableReq); err != nil {
			return err
		}
	case *AdminRequest_GetTableReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetTableReq); err != nil {
			return err
		}
	case *AdminRequest_ListTablesReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListTablesReq); err != nil {
			return err
		}
	case *AdminRequest_DropTableReq:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropTableReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _AdminRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminRequest)
	switch tag {
	case 2: // req.create_table_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateTableRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_CreateTableReq{msg}
		return true, err
	case 3: // req.get_table_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetTableRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_GetTableReq{msg}
		return true, err
	case 4: // req.list_tables_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListTablesRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_ListTablesReq{msg}
		return true, err
	case 5: // req.drop_table_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropTableRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_DropTableReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_CreateTableReq:
		s := proto.Size(x.CreateTableReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_GetTableReq:
		s := proto.Size(x.GetTableReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_ListTablesReq:
		s := proto.Size(x.ListTablesReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_DropTableReq:
		s := proto.Size(x.DropTableReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AdminResponse struct {
	Header *tiap_adminrpcpb.AdminResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*AdminResponse_CreateTableResp
	//	*AdminResponse_GetTableResp
	//	*AdminResponse_ListTablesResp
	//	*AdminResponse_DropTableResp
	Resp                 isAdminResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AdminResponse) Reset()         { *m = AdminResponse{} }
func (m *AdminResponse) String() string { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()    {}
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{1}
}
func (m *AdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponse.Merge(dst, src)
}
func (m *AdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponse proto.InternalMessageInfo

type isAdminResponse_Resp interface {
	isAdminResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminResponse_CreateTableResp struct {
	CreateTableResp *CreateTableResponse `protobuf:"bytes,2,opt,name=create_table_resp,json=createTableResp,oneof"`
}
type AdminResponse_GetTableResp struct {
	GetTableResp *GetTableResponse `protobuf:"bytes,3,opt,name=get_table_resp,json=getTableResp,oneof"`
}
type AdminResponse_ListTablesResp struct {
	ListTablesResp *ListTablesResponse `protobuf:"bytes,4,opt,name=list_tables_resp,json=listTablesResp,oneof"`
}
type AdminResponse_DropTableResp struct {
	DropTableResp *DropTableResponse `protobuf:"bytes,5,opt,name=drop_table_resp,json=dropTableResp,oneof"`
}

func (*AdminResponse_CreateTableResp) isAdminResponse_Resp() {}
func (*AdminResponse_GetTableResp) isAdminResponse_Resp()    {}
func (*AdminResponse_ListTablesResp) isAdminResponse_Resp()  {}
func (*AdminResponse_DropTableResp) isAdminResponse_Resp()   {}

func (m *AdminResponse) GetResp() isAdminResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *AdminResponse) GetHeader() *tiap_adminrpcpb.AdminResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminResponse) GetCreateTableResp() *CreateTableResponse {
	if x, ok := m.GetResp().(*AdminResponse_CreateTableResp); ok {
		return x.CreateTableResp
	}
	return nil
}

func (m *AdminResponse) GetGetTableResp() *GetTableResponse {
	if x, ok := m.GetResp().(*AdminResponse_GetTableResp); ok {
		return x.GetTableResp
	}
	return nil
}

func (m *AdminResponse) GetListTablesResp() *ListTablesResponse {
	if x, ok := m.GetResp().(*AdminResponse_ListTablesResp); ok {
		return x.ListTablesResp
	}
	return nil
}

func (m *AdminResponse) GetDropTableResp() *DropTableResponse {
	if x, ok := m.GetResp().(*AdminResponse_DropTableResp); ok {
		return x.DropTableResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminResponse_OneofMarshaler, _AdminResponse_OneofUnmarshaler, _AdminResponse_OneofSizer, []interface{}{
		(*AdminResponse_CreateTableResp)(nil),
		(*AdminResponse_GetTableResp)(nil),
		(*AdminResponse_ListTablesResp)(nil),
		(*AdminResponse_DropTableResp)(nil),
	}
}

func _AdminResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_CreateTableResp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTableResp); err != nil {
			return err
		}
	case *AdminResponse_GetTableResp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetTableResp); err != nil {
			return err
		}
	case *AdminResponse_ListTablesResp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListTablesResp); err != nil {
			return err
		}
	case *AdminResponse_DropTableResp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropTableResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _AdminResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminResponse)
	switch tag {
	case 2: // resp.create_table_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateTableResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_CreateTableResp{msg}
		return true, err
	case 3: // resp.get_table_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetTableResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_GetTableResp{msg}
		return true, err
	case 4: // resp.list_tables_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListTablesResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_ListTablesResp{msg}
		return true, err
	case 5: // resp.drop_table_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropTableResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_DropTableResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_CreateTableResp:
		s := proto.Size(x.CreateTableResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_GetTableResp:
		s := proto.Size(x.GetTableResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_ListTablesResp:
		s := proto.Size(x.ListTablesResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_DropTableResp:
		s := proto.Size(x.DropTableResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TableInfo struct {
	Common               *tiap_adminrpcpb.TableInfo `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TableInfo) Reset()         { *m = TableInfo{} }
func (m *TableInfo) String() string { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()    {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{2}
}
func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(dst, src)
}
func (m *TableInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

func (m *TableInfo) GetCommon() *tiap_adminrpcpb.TableInfo {
	if m != nil {
		return m.Common
	}
	return nil
}

type CreateTableRequest struct {
	DbName               string                      `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Quota                *tiap_adminrpcpb.TableQuota `protobuf:"bytes,3,opt,name=quota" json:"quota,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateTableRequest) Reset()         { *m = CreateTableRequest{} }
func (m *CreateTableRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTableRequest) ProtoMessage()    {}
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{3}
}
func (m *CreateTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTableRequest.Merge(dst, src)
}
func (m *CreateTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTableRequest proto.InternalMessageInfo

func (m *CreateTableRequest) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *CreateTableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTableRequest) GetQuota() *tiap_adminrpcpb.TableQuota {
	if m != nil {
		return m.Quota
	}
	return nil
}

type CreateTableResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTableResponse) Reset()         { *m = CreateTableResponse{} }
func (m *CreateTableResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTableResponse) ProtoMessage()    {}
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{4}
}
func (m *CreateTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTableResponse.Merge(dst, src)
}
func (m *CreateTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTableResponse proto.InternalMessageInfo

type GetTableRequest struct {
	DbName               string   `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTableRequest) Reset()         { *m = GetTableRequest{} }
func (m *GetTableRequest) String() string { return proto.CompactTextString(m) }
func (*GetTableRequest) ProtoMessage()    {}
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{5}
}
func (m *GetTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTableRequest.Merge(dst, src)
}
func (m *GetTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTableRequest proto.InternalMessageInfo

func (m *GetTableRequest) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *GetTableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetTableResponse struct {
	Info                 *TableInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetTableResponse) Reset()         { *m = GetTableResponse{} }
func (m *GetTableResponse) String() string { return proto.CompactTextString(m) }
func (*GetTableResponse) ProtoMessage()    {}
func (*GetTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{6}
}
func (m *GetTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTableResponse.Merge(dst, src)
}
func (m *GetTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTableResponse proto.InternalMessageInfo

func (m *GetTableResponse) GetInfo() *TableInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListTablesRequest struct {
	DbName               string   `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTablesRequest) Reset()         { *m = ListTablesRequest{} }
func (m *ListTablesRequest) String() string { return proto.CompactTextString(m) }
func (*ListTablesRequest) ProtoMessage()    {}
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{7}
}
func (m *ListTablesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTablesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTablesRequest.Merge(dst, src)
}
func (m *ListTablesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTablesRequest proto.InternalMessageInfo

func (m *ListTablesRequest) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

type ListTablesResponse struct {
	Infos                []*TableInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListTablesResponse) Reset()         { *m = ListTablesResponse{} }
func (m *ListTablesResponse) String() string { return proto.CompactTextString(m) }
func (*ListTablesResponse) ProtoMessage()    {}
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{8}
}
func (m *ListTablesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTablesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTablesResponse.Merge(dst, src)
}
func (m *ListTablesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTablesResponse proto.InternalMessageInfo

func (m *ListTablesResponse) GetInfos() []*TableInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type DropTableRequest struct {
	DbName               string   `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropTableRequest) Reset()         { *m = DropTableRequest{} }
func (m *DropTableRequest) String() string { return proto.CompactTextString(m) }
func (*DropTableRequest) ProtoMessage()    {}
func (*DropTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{9}
}
func (m *DropTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DropTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropTableRequest.Merge(dst, src)
}
func (m *DropTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *DropTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DropTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DropTableRequest proto.InternalMessageInfo

func (m *DropTableRequest) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *DropTableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DropTableResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropTableResponse) Reset()         { *m = DropTableResponse{} }
func (m *DropTableResponse) String() string { return proto.CompactTextString(m) }
func (*DropTableResponse) ProtoMessage()    {}
func (*DropTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58, []int{10}
}
func (m *DropTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DropTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropTableResponse.Merge(dst, src)
}
func (m *DropTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *DropTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DropTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DropTableResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AdminRequest)(nil), "tiap_raw_adminrpcpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "tiap_raw_adminrpcpb.AdminResponse")
	proto.RegisterType((*TableInfo)(nil), "tiap_raw_adminrpcpb.TableInfo")
	proto.RegisterType((*CreateTableRequest)(nil), "tiap_raw_adminrpcpb.CreateTableRequest")
	proto.RegisterType((*CreateTableResponse)(nil), "tiap_raw_adminrpcpb.CreateTableResponse")
	proto.RegisterType((*GetTableRequest)(nil), "tiap_raw_adminrpcpb.GetTableRequest")
	proto.RegisterType((*GetTableResponse)(nil), "tiap_raw_adminrpcpb.GetTableResponse")
	proto.RegisterType((*ListTablesRequest)(nil), "tiap_raw_adminrpcpb.ListTablesRequest")
	proto.RegisterType((*ListTablesResponse)(nil), "tiap_raw_adminrpcpb.ListTablesResponse")
	proto.RegisterType((*DropTableRequest)(nil), "tiap_raw_adminrpcpb.DropTableRequest")
	proto.RegisterType((*DropTableResponse)(nil), "tiap_raw_adminrpcpb.DropTableResponse")
}
func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest_CreateTableReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateTableReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.CreateTableReq.Size()))
		n3, err := m.CreateTableReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AdminRequest_GetTableReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetTableReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.GetTableReq.Size()))
		n4, err := m.GetTableReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AdminRequest_ListTablesReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListTablesReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.ListTablesReq.Size()))
		n5, err := m.ListTablesReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AdminRequest_DropTableReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DropTableReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.DropTableReq.Size()))
		n6, err := m.DropTableReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.Header.Size()))
		n7, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Resp != nil {
		nn8, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponse_CreateTableResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateTableResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.CreateTableResp.Size()))
		n9, err := m.CreateTableResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AdminResponse_GetTableResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetTableResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.GetTableResp.Size()))
		n10, err := m.GetTableResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AdminResponse_ListTablesResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListTablesResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.ListTablesResp.Size()))
		n11, err := m.ListTablesResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *AdminResponse_DropTableResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DropTableResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.DropTableResp.Size()))
		n12, err := m.DropTableResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Common != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.Common.Size()))
		n13, err := m.Common.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTableRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Quota != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.Quota.Size()))
		n14, err := m.Quota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTableResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTableRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTableResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(m.Info.Size()))
		n15, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTablesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTablesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTablesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTablesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DropTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropTableRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapRawAdminrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DropTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropTableResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTiapRawAdminrpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest_CreateTableReq) Size() (n int) {
	var l int
	_ = l
	if m.CreateTableReq != nil {
		l = m.CreateTableReq.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_GetTableReq) Size() (n int) {
	var l int
	_ = l
	if m.GetTableReq != nil {
		l = m.GetTableReq.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_ListTablesReq) Size() (n int) {
	var l int
	_ = l
	if m.ListTablesReq != nil {
		l = m.ListTablesReq.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminRequest_DropTableReq) Size() (n int) {
	var l int
	_ = l
	if m.DropTableReq != nil {
		l = m.DropTableReq.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponse_CreateTableResp) Size() (n int) {
	var l int
	_ = l
	if m.CreateTableResp != nil {
		l = m.CreateTableResp.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_GetTableResp) Size() (n int) {
	var l int
	_ = l
	if m.GetTableResp != nil {
		l = m.GetTableResp.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_ListTablesResp) Size() (n int) {
	var l int
	_ = l
	if m.ListTablesResp != nil {
		l = m.ListTablesResp.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *AdminResponse_DropTableResp) Size() (n int) {
	var l int
	_ = l
	if m.DropTableResp != nil {
		l = m.DropTableResp.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	return n
}
func (m *TableInfo) Size() (n int) {
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTableRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTableResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTableRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTableResponse) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTablesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTablesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropTableRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapRawAdminrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropTableResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTiapRawAdminrpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTiapRawAdminrpcpb(x uint64) (n int) {
	return sovTiapRawAdminrpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_adminrpcpb.AdminRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTableReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateTableRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_CreateTableReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTableReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetTableRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_GetTableReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTablesReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListTablesRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_ListTablesReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTableReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropTableRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_DropTableReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_adminrpcpb.AdminResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTableResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateTableResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_CreateTableResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTableResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetTableResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_GetTableResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTablesResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListTablesResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_ListTablesResp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTableResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropTableResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_DropTableResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &tiap_adminrpcpb.TableInfo{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &tiap_adminrpcpb.TableQuota{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &TableInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTablesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTablesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &TableInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapRawAdminrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapRawAdminrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTiapRawAdminrpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTiapRawAdminrpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapRawAdminrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTiapRawAdminrpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTiapRawAdminrpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTiapRawAdminrpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTiapRawAdminrpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTiapRawAdminrpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tiap_raw_adminrpcpb.proto", fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58)
}

var fileDescriptor_tiap_raw_adminrpcpb_4d073542d94dcd58 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x9b, 0x49, 0x1b, 0x34, 0x67, 0x7a, 0x75, 0x19, 0x51, 0x8a, 0x14, 0x8d, 0xcc, 0xdc,
	0x16, 0xa8, 0x88, 0xc2, 0x0e, 0xc4, 0x88, 0x82, 0xb8, 0x8c, 0x00, 0x41, 0x40, 0x6c, 0xa3, 0x5c,
	0x3c, 0x21, 0x52, 0x13, 0xbb, 0x71, 0x46, 0xbc, 0x08, 0x0b, 0xf6, 0xbc, 0x0c, 0x4b, 0x1e, 0x01,
	0x95, 0x17, 0x41, 0x71, 0x4c, 0x9b, 0x38, 0x19, 0x75, 0xba, 0xab, 0xfe, 0xfc, 0xfe, 0xe2, 0x9c,
	0xcf, 0x2e, 0xdc, 0x4e, 0x43, 0x87, 0xd9, 0x89, 0xf3, 0xcd, 0x76, 0xfc, 0x28, 0x8c, 0x13, 0xe6,
	0x31, 0x77, 0xc2, 0x12, 0x9a, 0x52, 0x34, 0xac, 0x79, 0x34, 0xbe, 0x19, 0xd0, 0x80, 0x8a, 0xe7,
	0xf7, 0xb3, 0x5f, 0x79, 0x75, 0xbc, 0x2f, 0xaa, 0x2a, 0x01, 0x7f, 0xd7, 0xa1, 0xfd, 0x2c, 0x0b,
	0x2d, 0xb2, 0xb8, 0x24, 0x3c, 0x45, 0x8f, 0xc1, 0xf8, 0x4a, 0x1c, 0x9f, 0x24, 0x23, 0xed, 0x40,
	0x3b, 0xdd, 0x9b, 0xde, 0x9d, 0xa8, 0x0b, 0x8b, 0xf5, 0xd7, 0xa2, 0x6a, 0xc9, 0x25, 0xe8, 0x13,
	0xf4, 0xbd, 0x84, 0x38, 0x29, 0xb1, 0x53, 0xc7, 0x9d, 0x13, 0x3b, 0x21, 0x8b, 0xd1, 0x8e, 0xc0,
	0x9c, 0x4c, 0xea, 0xbe, 0xe2, 0xb9, 0x28, 0x7f, 0xce, 0xba, 0xff, 0x81, 0x0d, 0xab, 0xeb, 0x95,
	0x52, 0x74, 0x0e, 0x9d, 0x80, 0xa4, 0x05, 0xa2, 0x2e, 0x88, 0x87, 0xb5, 0xc4, 0x57, 0x24, 0x55,
	0x70, 0x7b, 0xc1, 0x3a, 0x42, 0x1f, 0xa0, 0x37, 0x0f, 0xb9, 0x84, 0x71, 0x41, 0x6b, 0x0a, 0xda,
	0x71, 0x2d, 0xed, 0x6d, 0xc8, 0xf3, 0xb5, 0x7c, 0xcd, 0xeb, 0xcc, 0x8b, 0x21, 0x7a, 0x07, 0x5d,
	0x3f, 0xa1, 0xac, 0xb0, 0xbd, 0x96, 0x00, 0x1e, 0xd5, 0x02, 0x5f, 0x24, 0x94, 0x29, 0xfb, 0x6b,
	0xfb, 0x85, 0x6c, 0xd6, 0x02, 0x3d, 0x21, 0x0b, 0xfc, 0x53, 0x87, 0x8e, 0x9c, 0x33, 0x67, 0x34,
	0xe6, 0x04, 0x3d, 0x51, 0xbc, 0x1c, 0x5e, 0xe5, 0x25, 0xef, 0x2b, 0x62, 0xbe, 0xc0, 0x40, 0x11,
	0xc3, 0x99, 0x34, 0x73, 0xba, 0xd9, 0x8c, 0x44, 0x36, 0xac, 0x9e, 0x57, 0x8e, 0xb3, 0xaf, 0x2f,
	0xba, 0xe1, 0x4c, 0xca, 0x39, 0xda, 0x20, 0x67, 0x45, 0x6c, 0x07, 0x85, 0x2c, 0x3b, 0x3f, 0x65,
	0x3d, 0x9c, 0x49, 0x3f, 0x27, 0x1b, 0xfd, 0xac, 0x90, 0xdd, 0x79, 0x29, 0xcd, 0x9c, 0x97, 0x0c,
	0x71, 0x26, 0x15, 0x1d, 0x6f, 0x52, 0xb4, 0x42, 0x76, 0xfc, 0x62, 0x38, 0x33, 0xa0, 0x99, 0x61,
	0xf0, 0x19, 0xec, 0x8a, 0xf0, 0x4d, 0x7c, 0x41, 0xd1, 0x14, 0x0c, 0x8f, 0x46, 0x11, 0x8d, 0xa5,
	0xa0, 0x71, 0x45, 0xd0, 0xaa, 0x6b, 0xc9, 0x26, 0x4e, 0x01, 0x55, 0xaf, 0x00, 0xba, 0x05, 0x37,
	0x7c, 0xd7, 0x8e, 0x9d, 0x88, 0x08, 0xd4, 0xae, 0x65, 0xf8, 0xee, 0x7b, 0x27, 0x22, 0x08, 0x41,
	0x53, 0xa4, 0x3b, 0x22, 0x15, 0xbf, 0xd1, 0x03, 0x68, 0x2d, 0x2e, 0x69, 0xea, 0xc8, 0xc1, 0xdf,
	0xa9, 0x7f, 0xeb, 0xc7, 0xac, 0x62, 0xe5, 0x4d, 0xbc, 0x0f, 0xc3, 0x1a, 0xbd, 0xf8, 0x29, 0xf4,
	0x94, 0xdb, 0xb3, 0xd5, 0x4e, 0xf0, 0x4b, 0xe8, 0xab, 0x82, 0xd1, 0x14, 0x9a, 0x61, 0x7c, 0x41,
	0xe5, 0x48, 0xcc, 0xda, 0x81, 0xaf, 0xc7, 0x22, 0xba, 0xf8, 0x1e, 0x0c, 0x2a, 0xf7, 0xee, 0xca,
	0x9d, 0xe0, 0x73, 0x40, 0xd5, 0x53, 0x80, 0x1e, 0x41, 0x2b, 0x63, 0xf1, 0x91, 0x76, 0xa0, 0x5f,
	0xe3, 0xc5, 0x79, 0x19, 0x9f, 0x41, 0x5f, 0xbd, 0xa0, 0xdb, 0x8d, 0x60, 0x08, 0x83, 0xca, 0xf1,
	0x99, 0xf5, 0x7f, 0x2d, 0x4d, 0xed, 0xf7, 0xd2, 0xd4, 0xfe, 0x2c, 0x4d, 0xed, 0xc7, 0x5f, 0xb3,
	0xe1, 0x1a, 0xe2, 0xbf, 0xf7, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0xb6, 0x73, 0x1f,
	0xda, 0x05, 0x00, 0x00,
}
