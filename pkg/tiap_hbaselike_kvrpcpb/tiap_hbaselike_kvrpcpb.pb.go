// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiap_hbaselike_kvrpcpb.proto

package tiap_hbaselike_kvrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	tiap_kvrpcpb "github.com/tutububug/kvproto/pkg/tiap_kvrpcpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KVRequest struct {
	Header *tiap_kvrpcpb.KVRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*KVRequest_GetCellReq
	//	*KVRequest_PutCellReq
	//	*KVRequest_DeleteCellReq
	//	*KVRequest_BatchGetCellReq
	//	*KVRequest_BatchPutCellReq
	//	*KVRequest_BatchDeleteCellReq
	//	*KVRequest_GetAllRowOfCfReq
	//	*KVRequest_DeleteAllRowOfCfReq
	//	*KVRequest_GetOneRowOfCfReq
	//	*KVRequest_DeleteOneRowOfCfReq
	//	*KVRequest_GetOneColumnOfCfReq
	Req                  isKVRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KVRequest) Reset()         { *m = KVRequest{} }
func (m *KVRequest) String() string { return proto.CompactTextString(m) }
func (*KVRequest) ProtoMessage()    {}
func (*KVRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{0}
}
func (m *KVRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KVRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVRequest.Merge(dst, src)
}
func (m *KVRequest) XXX_Size() int {
	return m.Size()
}
func (m *KVRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KVRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KVRequest proto.InternalMessageInfo

type isKVRequest_Req interface {
	isKVRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVRequest_GetCellReq struct {
	GetCellReq *GetCellRequest `protobuf:"bytes,2,opt,name=get_cell_req,json=getCellReq,oneof"`
}
type KVRequest_PutCellReq struct {
	PutCellReq *PutCellRequest `protobuf:"bytes,3,opt,name=put_cell_req,json=putCellReq,oneof"`
}
type KVRequest_DeleteCellReq struct {
	DeleteCellReq *DeleteCellRequest `protobuf:"bytes,4,opt,name=delete_cell_req,json=deleteCellReq,oneof"`
}
type KVRequest_BatchGetCellReq struct {
	BatchGetCellReq *BatchGetCellRequest `protobuf:"bytes,5,opt,name=batch_get_cell_req,json=batchGetCellReq,oneof"`
}
type KVRequest_BatchPutCellReq struct {
	BatchPutCellReq *BatchPutCellRequest `protobuf:"bytes,6,opt,name=batch_put_cell_req,json=batchPutCellReq,oneof"`
}
type KVRequest_BatchDeleteCellReq struct {
	BatchDeleteCellReq *BatchDeleteCellRequest `protobuf:"bytes,7,opt,name=batch_delete_cell_req,json=batchDeleteCellReq,oneof"`
}
type KVRequest_GetAllRowOfCfReq struct {
	GetAllRowOfCfReq *GetAllRowOfColumnFamilyRequest `protobuf:"bytes,8,opt,name=get_all_row_of_cf_req,json=getAllRowOfCfReq,oneof"`
}
type KVRequest_DeleteAllRowOfCfReq struct {
	DeleteAllRowOfCfReq *DeleteAllRowOfColumnFamilyRequest `protobuf:"bytes,9,opt,name=delete_all_row_of_cf_req,json=deleteAllRowOfCfReq,oneof"`
}
type KVRequest_GetOneRowOfCfReq struct {
	GetOneRowOfCfReq *GetOneRowOfColumnFamilyRequest `protobuf:"bytes,10,opt,name=get_one_row_of_cf_req,json=getOneRowOfCfReq,oneof"`
}
type KVRequest_DeleteOneRowOfCfReq struct {
	DeleteOneRowOfCfReq *DeleteOneRowOfColumnFamilyRequest `protobuf:"bytes,11,opt,name=delete_one_row_of_cf_req,json=deleteOneRowOfCfReq,oneof"`
}
type KVRequest_GetOneColumnOfCfReq struct {
	GetOneColumnOfCfReq *GetOneColumnOfColumnFamilyRequest `protobuf:"bytes,12,opt,name=get_one_column_of_cf_req,json=getOneColumnOfCfReq,oneof"`
}

func (*KVRequest_GetCellReq) isKVRequest_Req()          {}
func (*KVRequest_PutCellReq) isKVRequest_Req()          {}
func (*KVRequest_DeleteCellReq) isKVRequest_Req()       {}
func (*KVRequest_BatchGetCellReq) isKVRequest_Req()     {}
func (*KVRequest_BatchPutCellReq) isKVRequest_Req()     {}
func (*KVRequest_BatchDeleteCellReq) isKVRequest_Req()  {}
func (*KVRequest_GetAllRowOfCfReq) isKVRequest_Req()    {}
func (*KVRequest_DeleteAllRowOfCfReq) isKVRequest_Req() {}
func (*KVRequest_GetOneRowOfCfReq) isKVRequest_Req()    {}
func (*KVRequest_DeleteOneRowOfCfReq) isKVRequest_Req() {}
func (*KVRequest_GetOneColumnOfCfReq) isKVRequest_Req() {}

func (m *KVRequest) GetReq() isKVRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *KVRequest) GetHeader() *tiap_kvrpcpb.KVRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *KVRequest) GetGetCellReq() *GetCellRequest {
	if x, ok := m.GetReq().(*KVRequest_GetCellReq); ok {
		return x.GetCellReq
	}
	return nil
}

func (m *KVRequest) GetPutCellReq() *PutCellRequest {
	if x, ok := m.GetReq().(*KVRequest_PutCellReq); ok {
		return x.PutCellReq
	}
	return nil
}

func (m *KVRequest) GetDeleteCellReq() *DeleteCellRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteCellReq); ok {
		return x.DeleteCellReq
	}
	return nil
}

func (m *KVRequest) GetBatchGetCellReq() *BatchGetCellRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchGetCellReq); ok {
		return x.BatchGetCellReq
	}
	return nil
}

func (m *KVRequest) GetBatchPutCellReq() *BatchPutCellRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchPutCellReq); ok {
		return x.BatchPutCellReq
	}
	return nil
}

func (m *KVRequest) GetBatchDeleteCellReq() *BatchDeleteCellRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchDeleteCellReq); ok {
		return x.BatchDeleteCellReq
	}
	return nil
}

func (m *KVRequest) GetGetAllRowOfCfReq() *GetAllRowOfColumnFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_GetAllRowOfCfReq); ok {
		return x.GetAllRowOfCfReq
	}
	return nil
}

func (m *KVRequest) GetDeleteAllRowOfCfReq() *DeleteAllRowOfColumnFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteAllRowOfCfReq); ok {
		return x.DeleteAllRowOfCfReq
	}
	return nil
}

func (m *KVRequest) GetGetOneRowOfCfReq() *GetOneRowOfColumnFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_GetOneRowOfCfReq); ok {
		return x.GetOneRowOfCfReq
	}
	return nil
}

func (m *KVRequest) GetDeleteOneRowOfCfReq() *DeleteOneRowOfColumnFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteOneRowOfCfReq); ok {
		return x.DeleteOneRowOfCfReq
	}
	return nil
}

func (m *KVRequest) GetGetOneColumnOfCfReq() *GetOneColumnOfColumnFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_GetOneColumnOfCfReq); ok {
		return x.GetOneColumnOfCfReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVRequest_OneofMarshaler, _KVRequest_OneofUnmarshaler, _KVRequest_OneofSizer, []interface{}{
		(*KVRequest_GetCellReq)(nil),
		(*KVRequest_PutCellReq)(nil),
		(*KVRequest_DeleteCellReq)(nil),
		(*KVRequest_BatchGetCellReq)(nil),
		(*KVRequest_BatchPutCellReq)(nil),
		(*KVRequest_BatchDeleteCellReq)(nil),
		(*KVRequest_GetAllRowOfCfReq)(nil),
		(*KVRequest_DeleteAllRowOfCfReq)(nil),
		(*KVRequest_GetOneRowOfCfReq)(nil),
		(*KVRequest_DeleteOneRowOfCfReq)(nil),
		(*KVRequest_GetOneColumnOfCfReq)(nil),
	}
}

func _KVRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVRequest)
	// req
	switch x := m.Req.(type) {
	case *KVRequest_GetCellReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCellReq); err != nil {
			return err
		}
	case *KVRequest_PutCellReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutCellReq); err != nil {
			return err
		}
	case *KVRequest_DeleteCellReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteCellReq); err != nil {
			return err
		}
	case *KVRequest_BatchGetCellReq:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchGetCellReq); err != nil {
			return err
		}
	case *KVRequest_BatchPutCellReq:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchPutCellReq); err != nil {
			return err
		}
	case *KVRequest_BatchDeleteCellReq:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchDeleteCellReq); err != nil {
			return err
		}
	case *KVRequest_GetAllRowOfCfReq:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetAllRowOfCfReq); err != nil {
			return err
		}
	case *KVRequest_DeleteAllRowOfCfReq:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteAllRowOfCfReq); err != nil {
			return err
		}
	case *KVRequest_GetOneRowOfCfReq:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneRowOfCfReq); err != nil {
			return err
		}
	case *KVRequest_DeleteOneRowOfCfReq:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteOneRowOfCfReq); err != nil {
			return err
		}
	case *KVRequest_GetOneColumnOfCfReq:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneColumnOfCfReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KVRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _KVRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVRequest)
	switch tag {
	case 2: // req.get_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetCellReq{msg}
		return true, err
	case 3: // req.put_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_PutCellReq{msg}
		return true, err
	case 4: // req.delete_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteCellReq{msg}
		return true, err
	case 5: // req.batch_get_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchGetCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchGetCellReq{msg}
		return true, err
	case 6: // req.batch_put_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchPutCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchPutCellReq{msg}
		return true, err
	case 7: // req.batch_delete_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchDeleteCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchDeleteCellReq{msg}
		return true, err
	case 8: // req.get_all_row_of_cf_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetAllRowOfColumnFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetAllRowOfCfReq{msg}
		return true, err
	case 9: // req.delete_all_row_of_cf_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteAllRowOfColumnFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteAllRowOfCfReq{msg}
		return true, err
	case 10: // req.get_one_row_of_cf_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneRowOfColumnFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetOneRowOfCfReq{msg}
		return true, err
	case 11: // req.delete_one_row_of_cf_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteOneRowOfColumnFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteOneRowOfCfReq{msg}
		return true, err
	case 12: // req.get_one_column_of_cf_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneColumnOfColumnFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetOneColumnOfCfReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KVRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVRequest)
	// req
	switch x := m.Req.(type) {
	case *KVRequest_GetCellReq:
		s := proto.Size(x.GetCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_PutCellReq:
		s := proto.Size(x.PutCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteCellReq:
		s := proto.Size(x.DeleteCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchGetCellReq:
		s := proto.Size(x.BatchGetCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchPutCellReq:
		s := proto.Size(x.BatchPutCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchDeleteCellReq:
		s := proto.Size(x.BatchDeleteCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_GetAllRowOfCfReq:
		s := proto.Size(x.GetAllRowOfCfReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteAllRowOfCfReq:
		s := proto.Size(x.DeleteAllRowOfCfReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_GetOneRowOfCfReq:
		s := proto.Size(x.GetOneRowOfCfReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteOneRowOfCfReq:
		s := proto.Size(x.DeleteOneRowOfCfReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_GetOneColumnOfCfReq:
		s := proto.Size(x.GetOneColumnOfCfReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KVResponse struct {
	Header *tiap_kvrpcpb.KVResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*KVResponse_GetCellResp
	//	*KVResponse_PutCellResp
	//	*KVResponse_DeleteCellResp
	//	*KVResponse_BatchGetCellResp
	//	*KVResponse_BatchPutCellResp
	//	*KVResponse_BatchDeleteCellResp
	//	*KVResponse_GetAllRowOfCfResp
	//	*KVResponse_DeleteAllRowOfCfResp
	//	*KVResponse_GetOneRowOfCfResp
	//	*KVResponse_DeleteOneRowOfCfResp
	//	*KVResponse_GetOneColumnOfCfResp
	Resp                 isKVResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KVResponse) Reset()         { *m = KVResponse{} }
func (m *KVResponse) String() string { return proto.CompactTextString(m) }
func (*KVResponse) ProtoMessage()    {}
func (*KVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{1}
}
func (m *KVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVResponse.Merge(dst, src)
}
func (m *KVResponse) XXX_Size() int {
	return m.Size()
}
func (m *KVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KVResponse proto.InternalMessageInfo

type isKVResponse_Resp interface {
	isKVResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVResponse_GetCellResp struct {
	GetCellResp *GetCellResponse `protobuf:"bytes,2,opt,name=get_cell_resp,json=getCellResp,oneof"`
}
type KVResponse_PutCellResp struct {
	PutCellResp *PutCellResponse `protobuf:"bytes,3,opt,name=put_cell_resp,json=putCellResp,oneof"`
}
type KVResponse_DeleteCellResp struct {
	DeleteCellResp *DeleteCellResponse `protobuf:"bytes,4,opt,name=delete_cell_resp,json=deleteCellResp,oneof"`
}
type KVResponse_BatchGetCellResp struct {
	BatchGetCellResp *BatchGetCellResponse `protobuf:"bytes,5,opt,name=batch_get_cell_resp,json=batchGetCellResp,oneof"`
}
type KVResponse_BatchPutCellResp struct {
	BatchPutCellResp *BatchPutCellResponse `protobuf:"bytes,6,opt,name=batch_put_cell_resp,json=batchPutCellResp,oneof"`
}
type KVResponse_BatchDeleteCellResp struct {
	BatchDeleteCellResp *BatchDeleteCellResponse `protobuf:"bytes,7,opt,name=batch_delete_cell_resp,json=batchDeleteCellResp,oneof"`
}
type KVResponse_GetAllRowOfCfResp struct {
	GetAllRowOfCfResp *GetAllRowOfColumnFamilyResponse `protobuf:"bytes,8,opt,name=get_all_row_of_cf_resp,json=getAllRowOfCfResp,oneof"`
}
type KVResponse_DeleteAllRowOfCfResp struct {
	DeleteAllRowOfCfResp *DeleteAllRowOfColumnFamilyResponse `protobuf:"bytes,9,opt,name=delete_all_row_of_cf_resp,json=deleteAllRowOfCfResp,oneof"`
}
type KVResponse_GetOneRowOfCfResp struct {
	GetOneRowOfCfResp *GetOneRowOfColumnFamilyResponse `protobuf:"bytes,10,opt,name=get_one_row_of_cf_resp,json=getOneRowOfCfResp,oneof"`
}
type KVResponse_DeleteOneRowOfCfResp struct {
	DeleteOneRowOfCfResp *DeleteOneRowOfColumnFamilyResponse `protobuf:"bytes,11,opt,name=delete_one_row_of_cf_resp,json=deleteOneRowOfCfResp,oneof"`
}
type KVResponse_GetOneColumnOfCfResp struct {
	GetOneColumnOfCfResp *GetOneColumnOfColumnFamilyResponse `protobuf:"bytes,12,opt,name=get_one_column_of_cf_resp,json=getOneColumnOfCfResp,oneof"`
}

func (*KVResponse_GetCellResp) isKVResponse_Resp()          {}
func (*KVResponse_PutCellResp) isKVResponse_Resp()          {}
func (*KVResponse_DeleteCellResp) isKVResponse_Resp()       {}
func (*KVResponse_BatchGetCellResp) isKVResponse_Resp()     {}
func (*KVResponse_BatchPutCellResp) isKVResponse_Resp()     {}
func (*KVResponse_BatchDeleteCellResp) isKVResponse_Resp()  {}
func (*KVResponse_GetAllRowOfCfResp) isKVResponse_Resp()    {}
func (*KVResponse_DeleteAllRowOfCfResp) isKVResponse_Resp() {}
func (*KVResponse_GetOneRowOfCfResp) isKVResponse_Resp()    {}
func (*KVResponse_DeleteOneRowOfCfResp) isKVResponse_Resp() {}
func (*KVResponse_GetOneColumnOfCfResp) isKVResponse_Resp() {}

func (m *KVResponse) GetResp() isKVResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *KVResponse) GetHeader() *tiap_kvrpcpb.KVResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *KVResponse) GetGetCellResp() *GetCellResponse {
	if x, ok := m.GetResp().(*KVResponse_GetCellResp); ok {
		return x.GetCellResp
	}
	return nil
}

func (m *KVResponse) GetPutCellResp() *PutCellResponse {
	if x, ok := m.GetResp().(*KVResponse_PutCellResp); ok {
		return x.PutCellResp
	}
	return nil
}

func (m *KVResponse) GetDeleteCellResp() *DeleteCellResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteCellResp); ok {
		return x.DeleteCellResp
	}
	return nil
}

func (m *KVResponse) GetBatchGetCellResp() *BatchGetCellResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchGetCellResp); ok {
		return x.BatchGetCellResp
	}
	return nil
}

func (m *KVResponse) GetBatchPutCellResp() *BatchPutCellResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchPutCellResp); ok {
		return x.BatchPutCellResp
	}
	return nil
}

func (m *KVResponse) GetBatchDeleteCellResp() *BatchDeleteCellResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchDeleteCellResp); ok {
		return x.BatchDeleteCellResp
	}
	return nil
}

func (m *KVResponse) GetGetAllRowOfCfResp() *GetAllRowOfColumnFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_GetAllRowOfCfResp); ok {
		return x.GetAllRowOfCfResp
	}
	return nil
}

func (m *KVResponse) GetDeleteAllRowOfCfResp() *DeleteAllRowOfColumnFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteAllRowOfCfResp); ok {
		return x.DeleteAllRowOfCfResp
	}
	return nil
}

func (m *KVResponse) GetGetOneRowOfCfResp() *GetOneRowOfColumnFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_GetOneRowOfCfResp); ok {
		return x.GetOneRowOfCfResp
	}
	return nil
}

func (m *KVResponse) GetDeleteOneRowOfCfResp() *DeleteOneRowOfColumnFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteOneRowOfCfResp); ok {
		return x.DeleteOneRowOfCfResp
	}
	return nil
}

func (m *KVResponse) GetGetOneColumnOfCfResp() *GetOneColumnOfColumnFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_GetOneColumnOfCfResp); ok {
		return x.GetOneColumnOfCfResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVResponse_OneofMarshaler, _KVResponse_OneofUnmarshaler, _KVResponse_OneofSizer, []interface{}{
		(*KVResponse_GetCellResp)(nil),
		(*KVResponse_PutCellResp)(nil),
		(*KVResponse_DeleteCellResp)(nil),
		(*KVResponse_BatchGetCellResp)(nil),
		(*KVResponse_BatchPutCellResp)(nil),
		(*KVResponse_BatchDeleteCellResp)(nil),
		(*KVResponse_GetAllRowOfCfResp)(nil),
		(*KVResponse_DeleteAllRowOfCfResp)(nil),
		(*KVResponse_GetOneRowOfCfResp)(nil),
		(*KVResponse_DeleteOneRowOfCfResp)(nil),
		(*KVResponse_GetOneColumnOfCfResp)(nil),
	}
}

func _KVResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVResponse)
	// resp
	switch x := m.Resp.(type) {
	case *KVResponse_GetCellResp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCellResp); err != nil {
			return err
		}
	case *KVResponse_PutCellResp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutCellResp); err != nil {
			return err
		}
	case *KVResponse_DeleteCellResp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteCellResp); err != nil {
			return err
		}
	case *KVResponse_BatchGetCellResp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchGetCellResp); err != nil {
			return err
		}
	case *KVResponse_BatchPutCellResp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchPutCellResp); err != nil {
			return err
		}
	case *KVResponse_BatchDeleteCellResp:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchDeleteCellResp); err != nil {
			return err
		}
	case *KVResponse_GetAllRowOfCfResp:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetAllRowOfCfResp); err != nil {
			return err
		}
	case *KVResponse_DeleteAllRowOfCfResp:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteAllRowOfCfResp); err != nil {
			return err
		}
	case *KVResponse_GetOneRowOfCfResp:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneRowOfCfResp); err != nil {
			return err
		}
	case *KVResponse_DeleteOneRowOfCfResp:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteOneRowOfCfResp); err != nil {
			return err
		}
	case *KVResponse_GetOneColumnOfCfResp:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneColumnOfCfResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KVResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _KVResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVResponse)
	switch tag {
	case 2: // resp.get_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetCellResp{msg}
		return true, err
	case 3: // resp.put_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_PutCellResp{msg}
		return true, err
	case 4: // resp.delete_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteCellResp{msg}
		return true, err
	case 5: // resp.batch_get_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchGetCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchGetCellResp{msg}
		return true, err
	case 6: // resp.batch_put_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchPutCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchPutCellResp{msg}
		return true, err
	case 7: // resp.batch_delete_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchDeleteCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchDeleteCellResp{msg}
		return true, err
	case 8: // resp.get_all_row_of_cf_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetAllRowOfColumnFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetAllRowOfCfResp{msg}
		return true, err
	case 9: // resp.delete_all_row_of_cf_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteAllRowOfColumnFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteAllRowOfCfResp{msg}
		return true, err
	case 10: // resp.get_one_row_of_cf_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneRowOfColumnFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetOneRowOfCfResp{msg}
		return true, err
	case 11: // resp.delete_one_row_of_cf_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteOneRowOfColumnFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteOneRowOfCfResp{msg}
		return true, err
	case 12: // resp.get_one_column_of_cf_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneColumnOfColumnFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetOneColumnOfCfResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KVResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVResponse)
	// resp
	switch x := m.Resp.(type) {
	case *KVResponse_GetCellResp:
		s := proto.Size(x.GetCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_PutCellResp:
		s := proto.Size(x.PutCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteCellResp:
		s := proto.Size(x.DeleteCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchGetCellResp:
		s := proto.Size(x.BatchGetCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchPutCellResp:
		s := proto.Size(x.BatchPutCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchDeleteCellResp:
		s := proto.Size(x.BatchDeleteCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_GetAllRowOfCfResp:
		s := proto.Size(x.GetAllRowOfCfResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteAllRowOfCfResp:
		s := proto.Size(x.DeleteAllRowOfCfResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_GetOneRowOfCfResp:
		s := proto.Size(x.GetOneRowOfCfResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteOneRowOfCfResp:
		s := proto.Size(x.DeleteOneRowOfCfResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_GetOneColumnOfCfResp:
		s := proto.Size(x.GetOneColumnOfCfResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Cell struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	RowKey               []byte   `protobuf:"bytes,2,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	Column               string   `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	Version              int64    `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{2}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(dst, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Cell) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *Cell) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *Cell) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RowResult struct {
	RowKey               []byte        `protobuf:"bytes,1,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	ColumnInfo           []*ColumnInfo `protobuf:"bytes,2,rep,name=column_info,json=columnInfo" json:"column_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RowResult) Reset()         { *m = RowResult{} }
func (m *RowResult) String() string { return proto.CompactTextString(m) }
func (*RowResult) ProtoMessage()    {}
func (*RowResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{3}
}
func (m *RowResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowResult.Merge(dst, src)
}
func (m *RowResult) XXX_Size() int {
	return m.Size()
}
func (m *RowResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RowResult.DiscardUnknown(m)
}

var xxx_messageInfo_RowResult proto.InternalMessageInfo

func (m *RowResult) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *RowResult) GetColumnInfo() []*ColumnInfo {
	if m != nil {
		return m.ColumnInfo
	}
	return nil
}

type ColumnInfo struct {
	ColumnName           string   `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnValue          []byte   `protobuf:"bytes,2,opt,name=column_value,json=columnValue,proto3" json:"column_value,omitempty"`
	Version              int64    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnInfo) Reset()         { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()    {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{4}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(dst, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ColumnInfo) GetColumnValue() []byte {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

func (m *ColumnInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ColumnResult struct {
	ColumnName           string     `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	RowInfo              []*RowInfo `protobuf:"bytes,2,rep,name=row_info,json=rowInfo" json:"row_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ColumnResult) Reset()         { *m = ColumnResult{} }
func (m *ColumnResult) String() string { return proto.CompactTextString(m) }
func (*ColumnResult) ProtoMessage()    {}
func (*ColumnResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{5}
}
func (m *ColumnResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnResult.Merge(dst, src)
}
func (m *ColumnResult) XXX_Size() int {
	return m.Size()
}
func (m *ColumnResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnResult.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnResult proto.InternalMessageInfo

func (m *ColumnResult) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ColumnResult) GetRowInfo() []*RowInfo {
	if m != nil {
		return m.RowInfo
	}
	return nil
}

type RowInfo struct {
	RowKey               []byte   `protobuf:"bytes,1,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	ColumnValue          []byte   `protobuf:"bytes,2,opt,name=column_value,json=columnValue,proto3" json:"column_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowInfo) Reset()         { *m = RowInfo{} }
func (m *RowInfo) String() string { return proto.CompactTextString(m) }
func (*RowInfo) ProtoMessage()    {}
func (*RowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{6}
}
func (m *RowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowInfo.Merge(dst, src)
}
func (m *RowInfo) XXX_Size() int {
	return m.Size()
}
func (m *RowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RowInfo proto.InternalMessageInfo

func (m *RowInfo) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *RowInfo) GetColumnValue() []byte {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

type GetCellRequest struct {
	Cell                 *Cell    `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCellRequest) Reset()         { *m = GetCellRequest{} }
func (m *GetCellRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellRequest) ProtoMessage()    {}
func (*GetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{7}
}
func (m *GetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellRequest.Merge(dst, src)
}
func (m *GetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellRequest proto.InternalMessageInfo

func (m *GetCellRequest) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type GetCellResponse struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCellResponse) Reset()         { *m = GetCellResponse{} }
func (m *GetCellResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellResponse) ProtoMessage()    {}
func (*GetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{8}
}
func (m *GetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellResponse.Merge(dst, src)
}
func (m *GetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellResponse proto.InternalMessageInfo

func (m *GetCellResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutCellRequest struct {
	Cell                 *Cell    `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutCellRequest) Reset()         { *m = PutCellRequest{} }
func (m *PutCellRequest) String() string { return proto.CompactTextString(m) }
func (*PutCellRequest) ProtoMessage()    {}
func (*PutCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{9}
}
func (m *PutCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutCellRequest.Merge(dst, src)
}
func (m *PutCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutCellRequest proto.InternalMessageInfo

func (m *PutCellRequest) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *PutCellRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutCellResponse) Reset()         { *m = PutCellResponse{} }
func (m *PutCellResponse) String() string { return proto.CompactTextString(m) }
func (*PutCellResponse) ProtoMessage()    {}
func (*PutCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{10}
}
func (m *PutCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutCellResponse.Merge(dst, src)
}
func (m *PutCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *PutCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutCellResponse proto.InternalMessageInfo

type DeleteCellRequest struct {
	Cell                 *Cell    `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCellRequest) Reset()         { *m = DeleteCellRequest{} }
func (m *DeleteCellRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCellRequest) ProtoMessage()    {}
func (*DeleteCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{11}
}
func (m *DeleteCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCellRequest.Merge(dst, src)
}
func (m *DeleteCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCellRequest proto.InternalMessageInfo

func (m *DeleteCellRequest) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type DeleteCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCellResponse) Reset()         { *m = DeleteCellResponse{} }
func (m *DeleteCellResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCellResponse) ProtoMessage()    {}
func (*DeleteCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{12}
}
func (m *DeleteCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCellResponse.Merge(dst, src)
}
func (m *DeleteCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCellResponse proto.InternalMessageInfo

type BatchGetCellRequest struct {
	Cells                []*Cell  `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetCellRequest) Reset()         { *m = BatchGetCellRequest{} }
func (m *BatchGetCellRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetCellRequest) ProtoMessage()    {}
func (*BatchGetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{13}
}
func (m *BatchGetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchGetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetCellRequest.Merge(dst, src)
}
func (m *BatchGetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetCellRequest proto.InternalMessageInfo

func (m *BatchGetCellRequest) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type BatchGetCellResponse struct {
	Values               [][]byte `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetCellResponse) Reset()         { *m = BatchGetCellResponse{} }
func (m *BatchGetCellResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetCellResponse) ProtoMessage()    {}
func (*BatchGetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{14}
}
func (m *BatchGetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchGetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetCellResponse.Merge(dst, src)
}
func (m *BatchGetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetCellResponse proto.InternalMessageInfo

func (m *BatchGetCellResponse) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type BatchPutCellRequest struct {
	Cells                []*Cell  `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	Values               [][]byte `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchPutCellRequest) Reset()         { *m = BatchPutCellRequest{} }
func (m *BatchPutCellRequest) String() string { return proto.CompactTextString(m) }
func (*BatchPutCellRequest) ProtoMessage()    {}
func (*BatchPutCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{15}
}
func (m *BatchPutCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPutCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPutCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchPutCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPutCellRequest.Merge(dst, src)
}
func (m *BatchPutCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchPutCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPutCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPutCellRequest proto.InternalMessageInfo

func (m *BatchPutCellRequest) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *BatchPutCellRequest) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type BatchPutCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchPutCellResponse) Reset()         { *m = BatchPutCellResponse{} }
func (m *BatchPutCellResponse) String() string { return proto.CompactTextString(m) }
func (*BatchPutCellResponse) ProtoMessage()    {}
func (*BatchPutCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{16}
}
func (m *BatchPutCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPutCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPutCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchPutCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPutCellResponse.Merge(dst, src)
}
func (m *BatchPutCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchPutCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPutCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPutCellResponse proto.InternalMessageInfo

type BatchDeleteCellRequest struct {
	Cells                []*Cell  `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeleteCellRequest) Reset()         { *m = BatchDeleteCellRequest{} }
func (m *BatchDeleteCellRequest) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteCellRequest) ProtoMessage()    {}
func (*BatchDeleteCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{17}
}
func (m *BatchDeleteCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDeleteCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDeleteCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchDeleteCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteCellRequest.Merge(dst, src)
}
func (m *BatchDeleteCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchDeleteCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteCellRequest proto.InternalMessageInfo

func (m *BatchDeleteCellRequest) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type BatchDeleteCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeleteCellResponse) Reset()         { *m = BatchDeleteCellResponse{} }
func (m *BatchDeleteCellResponse) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteCellResponse) ProtoMessage()    {}
func (*BatchDeleteCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{18}
}
func (m *BatchDeleteCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDeleteCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDeleteCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchDeleteCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteCellResponse.Merge(dst, src)
}
func (m *BatchDeleteCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchDeleteCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteCellResponse proto.InternalMessageInfo

type GetAllRowOfColumnFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllRowOfColumnFamilyRequest) Reset()         { *m = GetAllRowOfColumnFamilyRequest{} }
func (m *GetAllRowOfColumnFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRowOfColumnFamilyRequest) ProtoMessage()    {}
func (*GetAllRowOfColumnFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{19}
}
func (m *GetAllRowOfColumnFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRowOfColumnFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRowOfColumnFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllRowOfColumnFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRowOfColumnFamilyRequest.Merge(dst, src)
}
func (m *GetAllRowOfColumnFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRowOfColumnFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRowOfColumnFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRowOfColumnFamilyRequest proto.InternalMessageInfo

func (m *GetAllRowOfColumnFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type GetAllRowOfColumnFamilyResponse struct {
	Rows                 []*RowResult `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetAllRowOfColumnFamilyResponse) Reset()         { *m = GetAllRowOfColumnFamilyResponse{} }
func (m *GetAllRowOfColumnFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllRowOfColumnFamilyResponse) ProtoMessage()    {}
func (*GetAllRowOfColumnFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{20}
}
func (m *GetAllRowOfColumnFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRowOfColumnFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRowOfColumnFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllRowOfColumnFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRowOfColumnFamilyResponse.Merge(dst, src)
}
func (m *GetAllRowOfColumnFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRowOfColumnFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRowOfColumnFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRowOfColumnFamilyResponse proto.InternalMessageInfo

func (m *GetAllRowOfColumnFamilyResponse) GetRows() []*RowResult {
	if m != nil {
		return m.Rows
	}
	return nil
}

type DeleteAllRowOfColumnFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllRowOfColumnFamilyRequest) Reset()         { *m = DeleteAllRowOfColumnFamilyRequest{} }
func (m *DeleteAllRowOfColumnFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAllRowOfColumnFamilyRequest) ProtoMessage()    {}
func (*DeleteAllRowOfColumnFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{21}
}
func (m *DeleteAllRowOfColumnFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllRowOfColumnFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllRowOfColumnFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAllRowOfColumnFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllRowOfColumnFamilyRequest.Merge(dst, src)
}
func (m *DeleteAllRowOfColumnFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllRowOfColumnFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllRowOfColumnFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllRowOfColumnFamilyRequest proto.InternalMessageInfo

func (m *DeleteAllRowOfColumnFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type DeleteAllRowOfColumnFamilyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllRowOfColumnFamilyResponse) Reset()         { *m = DeleteAllRowOfColumnFamilyResponse{} }
func (m *DeleteAllRowOfColumnFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAllRowOfColumnFamilyResponse) ProtoMessage()    {}
func (*DeleteAllRowOfColumnFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{22}
}
func (m *DeleteAllRowOfColumnFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllRowOfColumnFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllRowOfColumnFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAllRowOfColumnFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllRowOfColumnFamilyResponse.Merge(dst, src)
}
func (m *DeleteAllRowOfColumnFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllRowOfColumnFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllRowOfColumnFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllRowOfColumnFamilyResponse proto.InternalMessageInfo

type GetOneRowOfColumnFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	RowKey               []byte   `protobuf:"bytes,2,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOneRowOfColumnFamilyRequest) Reset()         { *m = GetOneRowOfColumnFamilyRequest{} }
func (m *GetOneRowOfColumnFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GetOneRowOfColumnFamilyRequest) ProtoMessage()    {}
func (*GetOneRowOfColumnFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{23}
}
func (m *GetOneRowOfColumnFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneRowOfColumnFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneRowOfColumnFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneRowOfColumnFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneRowOfColumnFamilyRequest.Merge(dst, src)
}
func (m *GetOneRowOfColumnFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneRowOfColumnFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneRowOfColumnFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneRowOfColumnFamilyRequest proto.InternalMessageInfo

func (m *GetOneRowOfColumnFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *GetOneRowOfColumnFamilyRequest) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

type GetOneRowOfColumnFamilyResponse struct {
	Row                  *RowResult `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetOneRowOfColumnFamilyResponse) Reset()         { *m = GetOneRowOfColumnFamilyResponse{} }
func (m *GetOneRowOfColumnFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GetOneRowOfColumnFamilyResponse) ProtoMessage()    {}
func (*GetOneRowOfColumnFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{24}
}
func (m *GetOneRowOfColumnFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneRowOfColumnFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneRowOfColumnFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneRowOfColumnFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneRowOfColumnFamilyResponse.Merge(dst, src)
}
func (m *GetOneRowOfColumnFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneRowOfColumnFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneRowOfColumnFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneRowOfColumnFamilyResponse proto.InternalMessageInfo

func (m *GetOneRowOfColumnFamilyResponse) GetRow() *RowResult {
	if m != nil {
		return m.Row
	}
	return nil
}

type DeleteOneRowOfColumnFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	RowKey               []byte   `protobuf:"bytes,2,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOneRowOfColumnFamilyRequest) Reset()         { *m = DeleteOneRowOfColumnFamilyRequest{} }
func (m *DeleteOneRowOfColumnFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOneRowOfColumnFamilyRequest) ProtoMessage()    {}
func (*DeleteOneRowOfColumnFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{25}
}
func (m *DeleteOneRowOfColumnFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOneRowOfColumnFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOneRowOfColumnFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteOneRowOfColumnFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOneRowOfColumnFamilyRequest.Merge(dst, src)
}
func (m *DeleteOneRowOfColumnFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOneRowOfColumnFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOneRowOfColumnFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOneRowOfColumnFamilyRequest proto.InternalMessageInfo

func (m *DeleteOneRowOfColumnFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *DeleteOneRowOfColumnFamilyRequest) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

type DeleteOneRowOfColumnFamilyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOneRowOfColumnFamilyResponse) Reset()         { *m = DeleteOneRowOfColumnFamilyResponse{} }
func (m *DeleteOneRowOfColumnFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteOneRowOfColumnFamilyResponse) ProtoMessage()    {}
func (*DeleteOneRowOfColumnFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{26}
}
func (m *DeleteOneRowOfColumnFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOneRowOfColumnFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOneRowOfColumnFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteOneRowOfColumnFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOneRowOfColumnFamilyResponse.Merge(dst, src)
}
func (m *DeleteOneRowOfColumnFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOneRowOfColumnFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOneRowOfColumnFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOneRowOfColumnFamilyResponse proto.InternalMessageInfo

type GetOneColumnOfColumnFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Column               string   `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	StartRowKey          []byte   `protobuf:"bytes,3,opt,name=start_row_key,json=startRowKey,proto3" json:"start_row_key,omitempty"`
	EndRowKey            []byte   `protobuf:"bytes,4,opt,name=end_row_key,json=endRowKey,proto3" json:"end_row_key,omitempty"`
	Limit                int64    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOneColumnOfColumnFamilyRequest) Reset()         { *m = GetOneColumnOfColumnFamilyRequest{} }
func (m *GetOneColumnOfColumnFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GetOneColumnOfColumnFamilyRequest) ProtoMessage()    {}
func (*GetOneColumnOfColumnFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{27}
}
func (m *GetOneColumnOfColumnFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneColumnOfColumnFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneColumnOfColumnFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneColumnOfColumnFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneColumnOfColumnFamilyRequest.Merge(dst, src)
}
func (m *GetOneColumnOfColumnFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneColumnOfColumnFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneColumnOfColumnFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneColumnOfColumnFamilyRequest proto.InternalMessageInfo

func (m *GetOneColumnOfColumnFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *GetOneColumnOfColumnFamilyRequest) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *GetOneColumnOfColumnFamilyRequest) GetStartRowKey() []byte {
	if m != nil {
		return m.StartRowKey
	}
	return nil
}

func (m *GetOneColumnOfColumnFamilyRequest) GetEndRowKey() []byte {
	if m != nil {
		return m.EndRowKey
	}
	return nil
}

func (m *GetOneColumnOfColumnFamilyRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetOneColumnOfColumnFamilyResponse struct {
	Column               *ColumnResult `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	LastRowKey           []byte        `protobuf:"bytes,2,opt,name=last_row_key,json=lastRowKey,proto3" json:"last_row_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetOneColumnOfColumnFamilyResponse) Reset()         { *m = GetOneColumnOfColumnFamilyResponse{} }
func (m *GetOneColumnOfColumnFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GetOneColumnOfColumnFamilyResponse) ProtoMessage()    {}
func (*GetOneColumnOfColumnFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f, []int{28}
}
func (m *GetOneColumnOfColumnFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneColumnOfColumnFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneColumnOfColumnFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneColumnOfColumnFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneColumnOfColumnFamilyResponse.Merge(dst, src)
}
func (m *GetOneColumnOfColumnFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneColumnOfColumnFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneColumnOfColumnFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneColumnOfColumnFamilyResponse proto.InternalMessageInfo

func (m *GetOneColumnOfColumnFamilyResponse) GetColumn() *ColumnResult {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *GetOneColumnOfColumnFamilyResponse) GetLastRowKey() []byte {
	if m != nil {
		return m.LastRowKey
	}
	return nil
}

func init() {
	proto.RegisterType((*KVRequest)(nil), "tiap_hbaselike_kvrpcpb.KVRequest")
	proto.RegisterType((*KVResponse)(nil), "tiap_hbaselike_kvrpcpb.KVResponse")
	proto.RegisterType((*Cell)(nil), "tiap_hbaselike_kvrpcpb.Cell")
	proto.RegisterType((*RowResult)(nil), "tiap_hbaselike_kvrpcpb.RowResult")
	proto.RegisterType((*ColumnInfo)(nil), "tiap_hbaselike_kvrpcpb.ColumnInfo")
	proto.RegisterType((*ColumnResult)(nil), "tiap_hbaselike_kvrpcpb.ColumnResult")
	proto.RegisterType((*RowInfo)(nil), "tiap_hbaselike_kvrpcpb.RowInfo")
	proto.RegisterType((*GetCellRequest)(nil), "tiap_hbaselike_kvrpcpb.GetCellRequest")
	proto.RegisterType((*GetCellResponse)(nil), "tiap_hbaselike_kvrpcpb.GetCellResponse")
	proto.RegisterType((*PutCellRequest)(nil), "tiap_hbaselike_kvrpcpb.PutCellRequest")
	proto.RegisterType((*PutCellResponse)(nil), "tiap_hbaselike_kvrpcpb.PutCellResponse")
	proto.RegisterType((*DeleteCellRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteCellRequest")
	proto.RegisterType((*DeleteCellResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteCellResponse")
	proto.RegisterType((*BatchGetCellRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchGetCellRequest")
	proto.RegisterType((*BatchGetCellResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchGetCellResponse")
	proto.RegisterType((*BatchPutCellRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchPutCellRequest")
	proto.RegisterType((*BatchPutCellResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchPutCellResponse")
	proto.RegisterType((*BatchDeleteCellRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchDeleteCellRequest")
	proto.RegisterType((*BatchDeleteCellResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchDeleteCellResponse")
	proto.RegisterType((*GetAllRowOfColumnFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.GetAllRowOfColumnFamilyRequest")
	proto.RegisterType((*GetAllRowOfColumnFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.GetAllRowOfColumnFamilyResponse")
	proto.RegisterType((*DeleteAllRowOfColumnFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteAllRowOfColumnFamilyRequest")
	proto.RegisterType((*DeleteAllRowOfColumnFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteAllRowOfColumnFamilyResponse")
	proto.RegisterType((*GetOneRowOfColumnFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.GetOneRowOfColumnFamilyRequest")
	proto.RegisterType((*GetOneRowOfColumnFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.GetOneRowOfColumnFamilyResponse")
	proto.RegisterType((*DeleteOneRowOfColumnFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteOneRowOfColumnFamilyRequest")
	proto.RegisterType((*DeleteOneRowOfColumnFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteOneRowOfColumnFamilyResponse")
	proto.RegisterType((*GetOneColumnOfColumnFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.GetOneColumnOfColumnFamilyRequest")
	proto.RegisterType((*GetOneColumnOfColumnFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.GetOneColumnOfColumnFamilyResponse")
}
func (m *KVRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KVRequest_GetCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetCellReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetCellReq.Size()))
		n3, err := m.GetCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *KVRequest_PutCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PutCellReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.PutCellReq.Size()))
		n4, err := m.PutCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *KVRequest_DeleteCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteCellReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteCellReq.Size()))
		n5, err := m.DeleteCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *KVRequest_BatchGetCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchGetCellReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchGetCellReq.Size()))
		n6, err := m.BatchGetCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *KVRequest_BatchPutCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchPutCellReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchPutCellReq.Size()))
		n7, err := m.BatchPutCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *KVRequest_BatchDeleteCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchDeleteCellReq != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchDeleteCellReq.Size()))
		n8, err := m.BatchDeleteCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *KVRequest_GetAllRowOfCfReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetAllRowOfCfReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetAllRowOfCfReq.Size()))
		n9, err := m.GetAllRowOfCfReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *KVRequest_DeleteAllRowOfCfReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteAllRowOfCfReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteAllRowOfCfReq.Size()))
		n10, err := m.DeleteAllRowOfCfReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *KVRequest_GetOneRowOfCfReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneRowOfCfReq != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneRowOfCfReq.Size()))
		n11, err := m.GetOneRowOfCfReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *KVRequest_DeleteOneRowOfCfReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteOneRowOfCfReq != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteOneRowOfCfReq.Size()))
		n12, err := m.DeleteOneRowOfCfReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *KVRequest_GetOneColumnOfCfReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneColumnOfCfReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneColumnOfCfReq.Size()))
		n13, err := m.GetOneColumnOfCfReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *KVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Header.Size()))
		n14, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Resp != nil {
		nn15, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KVResponse_GetCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetCellResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetCellResp.Size()))
		n16, err := m.GetCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *KVResponse_PutCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PutCellResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.PutCellResp.Size()))
		n17, err := m.PutCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *KVResponse_DeleteCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteCellResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteCellResp.Size()))
		n18, err := m.DeleteCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *KVResponse_BatchGetCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchGetCellResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchGetCellResp.Size()))
		n19, err := m.BatchGetCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *KVResponse_BatchPutCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchPutCellResp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchPutCellResp.Size()))
		n20, err := m.BatchPutCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *KVResponse_BatchDeleteCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchDeleteCellResp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchDeleteCellResp.Size()))
		n21, err := m.BatchDeleteCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *KVResponse_GetAllRowOfCfResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetAllRowOfCfResp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetAllRowOfCfResp.Size()))
		n22, err := m.GetAllRowOfCfResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *KVResponse_DeleteAllRowOfCfResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteAllRowOfCfResp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteAllRowOfCfResp.Size()))
		n23, err := m.DeleteAllRowOfCfResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *KVResponse_GetOneRowOfCfResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneRowOfCfResp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneRowOfCfResp.Size()))
		n24, err := m.GetOneRowOfCfResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *KVResponse_DeleteOneRowOfCfResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteOneRowOfCfResp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteOneRowOfCfResp.Size()))
		n25, err := m.DeleteOneRowOfCfResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *KVResponse_GetOneColumnOfCfResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneColumnOfCfResp != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneColumnOfCfResp.Size()))
		n26, err := m.GetOneColumnOfCfResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if len(m.Column) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Column)))
		i += copy(dAtA[i:], m.Column)
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if len(m.ColumnInfo) > 0 {
		for _, msg := range m.ColumnInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if len(m.ColumnValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnValue)))
		i += copy(dAtA[i:], m.ColumnValue)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if len(m.RowInfo) > 0 {
		for _, msg := range m.RowInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if len(m.ColumnValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnValue)))
		i += copy(dAtA[i:], m.ColumnValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Cell.Size()))
		n27, err := m.Cell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Cell.Size()))
		n28, err := m.Cell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Cell.Size()))
		n29, err := m.Cell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchGetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchGetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPutCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPutCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPutCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPutCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDeleteCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDeleteCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDeleteCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDeleteCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllRowOfColumnFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRowOfColumnFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllRowOfColumnFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRowOfColumnFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAllRowOfColumnFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllRowOfColumnFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAllRowOfColumnFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllRowOfColumnFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneRowOfColumnFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneRowOfColumnFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneRowOfColumnFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneRowOfColumnFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Row != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Row.Size()))
		n30, err := m.Row.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteOneRowOfColumnFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOneRowOfColumnFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteOneRowOfColumnFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOneRowOfColumnFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneColumnOfColumnFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneColumnOfColumnFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.Column) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Column)))
		i += copy(dAtA[i:], m.Column)
	}
	if len(m.StartRowKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.StartRowKey)))
		i += copy(dAtA[i:], m.StartRowKey)
	}
	if len(m.EndRowKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.EndRowKey)))
		i += copy(dAtA[i:], m.EndRowKey)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneColumnOfColumnFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneColumnOfColumnFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Column != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Column.Size()))
		n31, err := m.Column.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.LastRowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.LastRowKey)))
		i += copy(dAtA[i:], m.LastRowKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTiapHbaselikeKvrpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KVRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVRequest_GetCellReq) Size() (n int) {
	var l int
	_ = l
	if m.GetCellReq != nil {
		l = m.GetCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_PutCellReq) Size() (n int) {
	var l int
	_ = l
	if m.PutCellReq != nil {
		l = m.PutCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteCellReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteCellReq != nil {
		l = m.DeleteCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchGetCellReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchGetCellReq != nil {
		l = m.BatchGetCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchPutCellReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchPutCellReq != nil {
		l = m.BatchPutCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchDeleteCellReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchDeleteCellReq != nil {
		l = m.BatchDeleteCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_GetAllRowOfCfReq) Size() (n int) {
	var l int
	_ = l
	if m.GetAllRowOfCfReq != nil {
		l = m.GetAllRowOfCfReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteAllRowOfCfReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteAllRowOfCfReq != nil {
		l = m.DeleteAllRowOfCfReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_GetOneRowOfCfReq) Size() (n int) {
	var l int
	_ = l
	if m.GetOneRowOfCfReq != nil {
		l = m.GetOneRowOfCfReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteOneRowOfCfReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteOneRowOfCfReq != nil {
		l = m.DeleteOneRowOfCfReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_GetOneColumnOfCfReq) Size() (n int) {
	var l int
	_ = l
	if m.GetOneColumnOfCfReq != nil {
		l = m.GetOneColumnOfCfReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVResponse_GetCellResp) Size() (n int) {
	var l int
	_ = l
	if m.GetCellResp != nil {
		l = m.GetCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_PutCellResp) Size() (n int) {
	var l int
	_ = l
	if m.PutCellResp != nil {
		l = m.PutCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteCellResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteCellResp != nil {
		l = m.DeleteCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchGetCellResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchGetCellResp != nil {
		l = m.BatchGetCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchPutCellResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchPutCellResp != nil {
		l = m.BatchPutCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchDeleteCellResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchDeleteCellResp != nil {
		l = m.BatchDeleteCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_GetAllRowOfCfResp) Size() (n int) {
	var l int
	_ = l
	if m.GetAllRowOfCfResp != nil {
		l = m.GetAllRowOfCfResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteAllRowOfCfResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteAllRowOfCfResp != nil {
		l = m.DeleteAllRowOfCfResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_GetOneRowOfCfResp) Size() (n int) {
	var l int
	_ = l
	if m.GetOneRowOfCfResp != nil {
		l = m.GetOneRowOfCfResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteOneRowOfCfResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteOneRowOfCfResp != nil {
		l = m.DeleteOneRowOfCfResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_GetOneColumnOfCfResp) Size() (n int) {
	var l int
	_ = l
	if m.GetOneColumnOfCfResp != nil {
		l = m.GetOneColumnOfCfResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *Cell) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Column)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if len(m.ColumnInfo) > 0 {
		for _, e := range m.ColumnInfo {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.ColumnValue)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if len(m.RowInfo) > 0 {
		for _, e := range m.RowInfo {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.ColumnValue)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCellRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCellResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutCellRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCellRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetCellRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetCellResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPutCellRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPutCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDeleteCellRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDeleteCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllRowOfColumnFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllRowOfColumnFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllRowOfColumnFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllRowOfColumnFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneRowOfColumnFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneRowOfColumnFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOneRowOfColumnFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOneRowOfColumnFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneColumnOfColumnFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Column)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.StartRowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.EndRowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneColumnOfColumnFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.LastRowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTiapHbaselikeKvrpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTiapHbaselikeKvrpcpb(x uint64) (n int) {
	return sovTiapHbaselikeKvrpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KVRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_kvrpcpb.KVRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetCellReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_PutCellReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteCellReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchGetCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchGetCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchGetCellReq{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPutCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchPutCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchPutCellReq{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDeleteCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchDeleteCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchDeleteCellReq{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAllRowOfCfReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetAllRowOfColumnFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetAllRowOfCfReq{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAllRowOfCfReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteAllRowOfColumnFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteAllRowOfCfReq{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneRowOfCfReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneRowOfColumnFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetOneRowOfCfReq{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteOneRowOfCfReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteOneRowOfColumnFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteOneRowOfCfReq{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneColumnOfCfReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneColumnOfColumnFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetOneColumnOfCfReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_kvrpcpb.KVResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetCellResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_PutCellResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteCellResp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchGetCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchGetCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchGetCellResp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPutCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchPutCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchPutCellResp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDeleteCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchDeleteCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchDeleteCellResp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAllRowOfCfResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetAllRowOfColumnFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetAllRowOfCfResp{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAllRowOfCfResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteAllRowOfColumnFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteAllRowOfCfResp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneRowOfCfResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneRowOfColumnFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetOneRowOfCfResp{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteOneRowOfCfResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteOneRowOfColumnFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteOneRowOfCfResp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneColumnOfCfResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneColumnOfColumnFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetOneColumnOfCfResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnInfo = append(m.ColumnInfo, &ColumnInfo{})
			if err := m.ColumnInfo[len(m.ColumnInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnValue = append(m.ColumnValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ColumnValue == nil {
				m.ColumnValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowInfo = append(m.RowInfo, &RowInfo{})
			if err := m.RowInfo[len(m.RowInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnValue = append(m.ColumnValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ColumnValue == nil {
				m.ColumnValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPutCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPutCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPutCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPutCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPutCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPutCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDeleteCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDeleteCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDeleteCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDeleteCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDeleteCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDeleteCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRowOfColumnFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRowOfColumnFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRowOfColumnFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRowOfColumnFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRowOfColumnFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRowOfColumnFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &RowResult{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllRowOfColumnFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllRowOfColumnFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllRowOfColumnFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllRowOfColumnFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllRowOfColumnFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllRowOfColumnFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneRowOfColumnFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneRowOfColumnFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneRowOfColumnFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneRowOfColumnFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneRowOfColumnFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneRowOfColumnFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &RowResult{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOneRowOfColumnFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOneRowOfColumnFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOneRowOfColumnFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOneRowOfColumnFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOneRowOfColumnFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOneRowOfColumnFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneColumnOfColumnFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneColumnOfColumnFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneColumnOfColumnFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartRowKey = append(m.StartRowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartRowKey == nil {
				m.StartRowKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndRowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndRowKey = append(m.EndRowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndRowKey == nil {
				m.EndRowKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneColumnOfColumnFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneColumnOfColumnFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneColumnOfColumnFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Column == nil {
				m.Column = &ColumnResult{}
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastRowKey = append(m.LastRowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LastRowKey == nil {
				m.LastRowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTiapHbaselikeKvrpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTiapHbaselikeKvrpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTiapHbaselikeKvrpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTiapHbaselikeKvrpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tiap_hbaselike_kvrpcpb.proto", fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f)
}

var fileDescriptor_tiap_hbaselike_kvrpcpb_3508e8c8f38f7e0f = []byte{
	// 1137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xae, 0x63, 0xc7, 0xa9, 0x8f, 0x9d, 0xc4, 0x99, 0xb8, 0xae, 0x5b, 0x15, 0x27, 0x19, 0x55,
	0xa4, 0xfc, 0xc8, 0x45, 0xa9, 0xda, 0x42, 0xe0, 0x06, 0x87, 0x02, 0xa5, 0x40, 0x61, 0x41, 0x51,
	0x85, 0x84, 0xac, 0xb5, 0x3d, 0x76, 0x96, 0xac, 0x77, 0x27, 0x3b, 0xeb, 0x58, 0xb9, 0x87, 0x77,
	0xe0, 0x15, 0xb8, 0xe0, 0x3d, 0xb8, 0xe4, 0x11, 0x50, 0x78, 0x11, 0x34, 0x3f, 0xde, 0xdd, 0xd9,
	0xf5, 0xee, 0x3a, 0x16, 0x77, 0x99, 0x33, 0x67, 0xbe, 0xef, 0x7c, 0x67, 0x3d, 0xdf, 0x1c, 0x05,
	0x1e, 0xf8, 0x96, 0x49, 0x7b, 0x67, 0x7d, 0x93, 0x11, 0xdb, 0x3a, 0x27, 0xbd, 0xf3, 0x4b, 0x8f,
	0x0e, 0x68, 0xbf, 0x43, 0x3d, 0xd7, 0x77, 0x51, 0x73, 0xf1, 0xee, 0xfd, 0xc6, 0xd8, 0x1d, 0xbb,
	0x22, 0xe5, 0x31, 0xff, 0x4b, 0x66, 0xdf, 0x47, 0x22, 0x5b, 0x43, 0xc0, 0xbf, 0x55, 0xa0, 0xf2,
	0xea, 0xd4, 0x20, 0x17, 0x53, 0xc2, 0x7c, 0xf4, 0x14, 0xca, 0x67, 0xc4, 0x1c, 0x12, 0xaf, 0x55,
	0xd8, 0x2f, 0x3c, 0xaa, 0x1e, 0xbd, 0xd5, 0xd1, 0x8e, 0x04, 0x89, 0x5f, 0x8a, 0x24, 0x43, 0x25,
	0xa3, 0xaf, 0xa0, 0x36, 0x26, 0x7e, 0x6f, 0x40, 0x6c, 0xbb, 0xe7, 0x91, 0x8b, 0xd6, 0x9a, 0x38,
	0xfc, 0x76, 0x27, 0xa5, 0xf6, 0x2f, 0x88, 0x7f, 0x42, 0x6c, 0x7b, 0x8e, 0x75, 0xcb, 0x80, 0x71,
	0x10, 0xe1, 0x58, 0x74, 0x1a, 0xc1, 0x2a, 0x66, 0x63, 0x7d, 0x37, 0x8d, 0x63, 0xd1, 0x20, 0x82,
	0x7e, 0x80, 0xed, 0x21, 0xb1, 0x89, 0x4f, 0x42, 0xb8, 0x92, 0x80, 0x7b, 0x27, 0x0d, 0xee, 0x33,
	0x91, 0xae, 0x23, 0x6e, 0x0e, 0xa3, 0x41, 0xf4, 0x13, 0xa0, 0xbe, 0xe9, 0x0f, 0xce, 0x7a, 0x9a,
	0xe4, 0x75, 0x81, 0xfb, 0x5e, 0x1a, 0x6e, 0x97, 0x9f, 0x48, 0xe8, 0xde, 0xee, 0xeb, 0xe1, 0x10,
	0x5b, 0x6b, 0x41, 0x79, 0x09, 0xec, 0x44, 0x1f, 0x24, 0x76, 0x18, 0x46, 0x03, 0xb8, 0x23, 0xb1,
	0xe3, 0x2d, 0xd9, 0x10, 0xf0, 0x9d, 0x4c, 0xf8, 0x45, 0x7d, 0x91, 0xa5, 0x6a, 0x3b, 0xc8, 0x82,
	0x3b, 0xbc, 0x2d, 0x26, 0x87, 0x76, 0x67, 0x3d, 0x77, 0xd4, 0x1b, 0x8c, 0x04, 0xc9, 0x6d, 0x41,
	0xf2, 0x2c, 0xe3, 0x27, 0xf1, 0xa9, 0x6d, 0x1b, 0xee, 0xec, 0xf5, 0xe8, 0xc4, 0xb5, 0xa7, 0x13,
	0xe7, 0x73, 0x73, 0x62, 0xd9, 0x57, 0x21, 0x59, 0x7d, 0x1c, 0xc9, 0x18, 0x71, 0x2a, 0x0f, 0x5a,
	0x4a, 0x49, 0x92, 0xad, 0x22, 0xd8, 0x3e, 0xca, 0xfe, 0xca, 0xd9, 0x84, 0xbb, 0x43, 0x3d, 0x69,
	0x14, 0x91, 0xe7, 0x3a, 0x24, 0x46, 0x08, 0xb9, 0xf2, 0x5e, 0x3b, 0x24, 0x47, 0x5e, 0x90, 0x11,
	0x93, 0x97, 0x64, 0xab, 0x2e, 0x23, 0x2f, 0x9b, 0x50, 0xc9, 0x4b, 0x70, 0xce, 0xe5, 0x0d, 0xc4,
	0xa9, 0x08, 0x67, 0x2d, 0x9b, 0x53, 0x2a, 0x94, 0x5c, 0xa9, 0x9c, 0x63, 0x3d, 0x89, 0x73, 0x76,
	0xd7, 0xa1, 0xe8, 0x91, 0x0b, 0xfc, 0x47, 0x05, 0x80, 0xdb, 0x0b, 0xa3, 0xae, 0xc3, 0x08, 0x7a,
	0x16, 0x33, 0xa2, 0x76, 0xd2, 0x88, 0x64, 0x66, 0xcc, 0x89, 0xbe, 0x81, 0xcd, 0xc8, 0xb5, 0x64,
	0x54, 0x59, 0xd1, 0x61, 0xae, 0x15, 0x29, 0xb4, 0x5b, 0x46, 0x75, 0x1c, 0x86, 0x38, 0x5c, 0xe4,
	0x26, 0x32, 0xaa, 0xdc, 0xe8, 0x30, 0xd7, 0x8d, 0x42, 0x38, 0x1a, 0x86, 0xd0, 0x29, 0xd4, 0xf5,
	0xcb, 0xc7, 0xa8, 0x32, 0xa4, 0x77, 0x97, 0x31, 0xa4, 0x00, 0x74, 0x6b, 0xa8, 0x45, 0xd1, 0xcf,
	0xb0, 0x9b, 0xb0, 0x24, 0x46, 0x95, 0x27, 0xbd, 0xbf, 0x9c, 0x27, 0x05, 0xe0, 0xf5, 0x7e, 0x2c,
	0x1e, 0xc2, 0xeb, 0xbd, 0x28, 0x2f, 0x01, 0x9f, 0x6c, 0x48, 0xbd, 0x1f, 0x8b, 0xa3, 0x11, 0x34,
	0x17, 0x19, 0x13, 0xa3, 0xca, 0x99, 0x1e, 0x2f, 0xed, 0x4c, 0x01, 0xc9, 0x6e, 0x3f, 0xb9, 0x85,
	0x6c, 0x68, 0x2e, 0xf2, 0x26, 0x46, 0x95, 0x39, 0x3d, 0xbf, 0xb1, 0x39, 0x05, 0x7c, 0x3b, 0x31,
	0x77, 0x62, 0x14, 0x4d, 0xe1, 0x5e, 0x8a, 0x3d, 0x31, 0xaa, 0xfc, 0xe9, 0x78, 0x15, 0x7f, 0x0a,
	0x38, 0x1b, 0x49, 0x83, 0x0a, 0x45, 0xc6, 0x3d, 0x83, 0x51, 0x65, 0x51, 0xcf, 0x6f, 0x6c, 0x51,
	0x9a, 0xc8, 0xa8, 0x5f, 0x68, 0x22, 0x17, 0x10, 0x56, 0x97, 0x11, 0x99, 0xc3, 0xd9, 0x48, 0xda,
	0x94, 0xa4, 0x4d, 0xf1, 0x29, 0x46, 0x95, 0x51, 0x1d, 0xaf, 0x62, 0x54, 0x21, 0x6d, 0xd2, 0xa9,
	0x18, 0xed, 0x96, 0xa1, 0xc4, 0x19, 0xb0, 0x05, 0x25, 0xfe, 0xa3, 0x42, 0x4d, 0x28, 0x8f, 0xc4,
	0x49, 0x61, 0x52, 0x15, 0x43, 0xad, 0xd0, 0x5d, 0xd8, 0xe0, 0xad, 0x38, 0x27, 0x57, 0xc2, 0x7e,
	0x6a, 0x46, 0xd9, 0x73, 0x67, 0xaf, 0xc8, 0x15, 0x3f, 0x20, 0xeb, 0x15, 0x3e, 0x52, 0x31, 0xd4,
	0x0a, 0xb5, 0x60, 0xe3, 0x92, 0x78, 0xcc, 0x72, 0x1d, 0x61, 0x07, 0x45, 0x63, 0xbe, 0xc4, 0x16,
	0x54, 0x0c, 0x77, 0x66, 0x10, 0x36, 0xb5, 0xfd, 0x28, 0x6e, 0x41, 0xc3, 0x3d, 0x81, 0xaa, 0xea,
	0x83, 0xe5, 0x8c, 0xdc, 0xd6, 0xda, 0x7e, 0xf1, 0x51, 0xf5, 0x08, 0xa7, 0x75, 0x40, 0xaa, 0x7a,
	0xe9, 0x8c, 0x5c, 0x03, 0x06, 0xc1, 0xdf, 0xf8, 0x17, 0x80, 0x70, 0x07, 0xed, 0x05, 0x90, 0x8e,
	0x39, 0x21, 0x4a, 0xa0, 0x4a, 0xff, 0xd6, 0x9c, 0x10, 0x74, 0x00, 0x35, 0x95, 0x70, 0x69, 0xda,
	0x53, 0xa2, 0x94, 0xaa, 0x43, 0xa7, 0x3c, 0x14, 0x95, 0x55, 0xd4, 0x65, 0x9d, 0x43, 0x4d, 0x72,
	0x29, 0x65, 0xb9, 0x6c, 0xc7, 0x70, 0x9b, 0x4b, 0x8f, 0xc8, 0xdb, 0x4b, 0x93, 0x67, 0xb8, 0x33,
	0xa1, 0x8d, 0xf7, 0x4a, 0x08, 0x7b, 0x01, 0x1b, 0x2a, 0x96, 0xde, 0xc1, 0x7c, 0x35, 0xb8, 0x0b,
	0x5b, 0xfa, 0x00, 0x87, 0x3e, 0x80, 0x12, 0xf7, 0x2a, 0xf5, 0x44, 0x3d, 0x48, 0xed, 0x37, 0x3f,
	0x22, 0x32, 0xf1, 0x21, 0x6c, 0xc7, 0x0c, 0x17, 0x35, 0x60, 0x5d, 0x52, 0xca, 0x82, 0xe4, 0x02,
	0xbf, 0x81, 0x2d, 0x7d, 0xa2, 0xbb, 0x39, 0x59, 0x88, 0xbc, 0x16, 0x45, 0xde, 0x81, 0xed, 0x98,
	0x29, 0xe3, 0x17, 0xb0, 0x93, 0x98, 0xef, 0x56, 0x10, 0xd7, 0x00, 0x94, 0x34, 0x63, 0xfc, 0x12,
	0x76, 0x17, 0x0c, 0xbf, 0xe8, 0x08, 0xd6, 0xf9, 0x21, 0xd6, 0x2a, 0x88, 0xaf, 0x99, 0x8d, 0x2f,
	0x53, 0x71, 0x07, 0x1a, 0x8b, 0xde, 0x2c, 0x7e, 0xad, 0x84, 0x36, 0x09, 0x56, 0x33, 0xd4, 0x0a,
	0x9b, 0x8a, 0x3a, 0xd6, 0xc9, 0x15, 0xa8, 0x23, 0x14, 0x6b, 0x1a, 0x45, 0x53, 0x95, 0x14, 0x6f,
	0xe9, 0xd7, 0xd0, 0x5c, 0x3c, 0x37, 0xaf, 0x24, 0xfc, 0x1e, 0xdc, 0x4d, 0x79, 0xeb, 0xf0, 0x87,
	0xd0, 0xce, 0x9e, 0x9d, 0xd3, 0x5c, 0x0a, 0xbf, 0x81, 0xbd, 0x9c, 0x87, 0x0d, 0x3d, 0x85, 0x92,
	0xe7, 0xce, 0xe6, 0xa5, 0x1e, 0x64, 0xdc, 0x38, 0x79, 0x8f, 0x0d, 0x91, 0x8e, 0x3f, 0x86, 0x83,
	0xdc, 0x09, 0x3b, 0xb5, 0xac, 0x87, 0x80, 0xf3, 0x9f, 0x3f, 0xfc, 0xbd, 0x90, 0x9d, 0x31, 0xe2,
	0xde, 0xd8, 0x9c, 0xf1, 0xa9, 0xe8, 0x47, 0xd6, 0x7b, 0x84, 0x9e, 0x40, 0xd1, 0x73, 0x67, 0xea,
	0x4a, 0x2c, 0xd1, 0x0e, 0x9e, 0x8d, 0x7f, 0x9c, 0x77, 0xe3, 0x7f, 0xad, 0x36, 0x68, 0x53, 0x56,
	0xc1, 0xf8, 0xcf, 0x02, 0x1c, 0xe4, 0x4e, 0xe6, 0xa9, 0xe4, 0xe1, 0x73, 0xb5, 0xa6, 0x3d, 0x57,
	0x18, 0x36, 0x99, 0x6f, 0x7a, 0x7e, 0x6f, 0x5e, 0x5a, 0x51, 0xba, 0xa5, 0x08, 0x1a, 0xd2, 0x50,
	0xdb, 0x50, 0x25, 0xce, 0x30, 0xc8, 0x28, 0x89, 0x8c, 0x0a, 0x71, 0x86, 0x6a, 0xbf, 0x01, 0xeb,
	0xb6, 0x35, 0xb1, 0x7c, 0x31, 0xa4, 0x16, 0x0d, 0xb9, 0xc0, 0xbf, 0x16, 0x00, 0xe7, 0x3f, 0xd0,
	0xe8, 0x93, 0xa0, 0x30, 0xf9, 0x29, 0x1e, 0x66, 0x3f, 0x75, 0xea, 0x6b, 0xcc, 0xcb, 0xdf, 0x87,
	0x9a, 0x6d, 0xb2, 0xb0, 0x7a, 0xd9, 0x58, 0xe0, 0x31, 0x59, 0x5c, 0xb7, 0xfe, 0xd7, 0x75, 0xbb,
	0xf0, 0xf7, 0x75, 0xbb, 0xf0, 0xcf, 0x75, 0xbb, 0xf0, 0xfb, 0xbf, 0xed, 0x5b, 0xfd, 0xb2, 0xf8,
	0x6f, 0xc9, 0x93, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x66, 0xdb, 0x70, 0xc2, 0x8f, 0x11, 0x00,
	0x00,
}
