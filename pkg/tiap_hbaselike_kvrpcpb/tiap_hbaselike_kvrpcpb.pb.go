// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiap_hbaselike_kvrpcpb.proto

package tiap_hbaselike_kvrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	tiap_kvrpcpb "github.com/tutububug/kvproto/pkg/tiap_kvrpcpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KVRequest struct {
	Header *tiap_kvrpcpb.KVRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*KVRequest_GetRowReq
	//	*KVRequest_PutRowReq
	//	*KVRequest_DeleteRowReq
	//	*KVRequest_BatchGetRowReq
	//	*KVRequest_BatchPutRowReq
	//	*KVRequest_BatchDeleteRowReq
	Req                  isKVRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KVRequest) Reset()         { *m = KVRequest{} }
func (m *KVRequest) String() string { return proto.CompactTextString(m) }
func (*KVRequest) ProtoMessage()    {}
func (*KVRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{0}
}
func (m *KVRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KVRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVRequest.Merge(dst, src)
}
func (m *KVRequest) XXX_Size() int {
	return m.Size()
}
func (m *KVRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KVRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KVRequest proto.InternalMessageInfo

type isKVRequest_Req interface {
	isKVRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVRequest_GetRowReq struct {
	GetRowReq *GetRowRequest `protobuf:"bytes,2,opt,name=get_row_req,json=getRowReq,oneof"`
}
type KVRequest_PutRowReq struct {
	PutRowReq *PutRowRequest `protobuf:"bytes,3,opt,name=put_row_req,json=putRowReq,oneof"`
}
type KVRequest_DeleteRowReq struct {
	DeleteRowReq *DeleteRowRequest `protobuf:"bytes,4,opt,name=delete_row_req,json=deleteRowReq,oneof"`
}
type KVRequest_BatchGetRowReq struct {
	BatchGetRowReq *BatchGetRowRequest `protobuf:"bytes,5,opt,name=batch_get_row_req,json=batchGetRowReq,oneof"`
}
type KVRequest_BatchPutRowReq struct {
	BatchPutRowReq *BatchPutRowRequest `protobuf:"bytes,6,opt,name=batch_put_row_req,json=batchPutRowReq,oneof"`
}
type KVRequest_BatchDeleteRowReq struct {
	BatchDeleteRowReq *BatchDeleteRowRequest `protobuf:"bytes,7,opt,name=batch_delete_row_req,json=batchDeleteRowReq,oneof"`
}

func (*KVRequest_GetRowReq) isKVRequest_Req()         {}
func (*KVRequest_PutRowReq) isKVRequest_Req()         {}
func (*KVRequest_DeleteRowReq) isKVRequest_Req()      {}
func (*KVRequest_BatchGetRowReq) isKVRequest_Req()    {}
func (*KVRequest_BatchPutRowReq) isKVRequest_Req()    {}
func (*KVRequest_BatchDeleteRowReq) isKVRequest_Req() {}

func (m *KVRequest) GetReq() isKVRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *KVRequest) GetHeader() *tiap_kvrpcpb.KVRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *KVRequest) GetGetRowReq() *GetRowRequest {
	if x, ok := m.GetReq().(*KVRequest_GetRowReq); ok {
		return x.GetRowReq
	}
	return nil
}

func (m *KVRequest) GetPutRowReq() *PutRowRequest {
	if x, ok := m.GetReq().(*KVRequest_PutRowReq); ok {
		return x.PutRowReq
	}
	return nil
}

func (m *KVRequest) GetDeleteRowReq() *DeleteRowRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteRowReq); ok {
		return x.DeleteRowReq
	}
	return nil
}

func (m *KVRequest) GetBatchGetRowReq() *BatchGetRowRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchGetRowReq); ok {
		return x.BatchGetRowReq
	}
	return nil
}

func (m *KVRequest) GetBatchPutRowReq() *BatchPutRowRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchPutRowReq); ok {
		return x.BatchPutRowReq
	}
	return nil
}

func (m *KVRequest) GetBatchDeleteRowReq() *BatchDeleteRowRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchDeleteRowReq); ok {
		return x.BatchDeleteRowReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVRequest_OneofMarshaler, _KVRequest_OneofUnmarshaler, _KVRequest_OneofSizer, []interface{}{
		(*KVRequest_GetRowReq)(nil),
		(*KVRequest_PutRowReq)(nil),
		(*KVRequest_DeleteRowReq)(nil),
		(*KVRequest_BatchGetRowReq)(nil),
		(*KVRequest_BatchPutRowReq)(nil),
		(*KVRequest_BatchDeleteRowReq)(nil),
	}
}

func _KVRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVRequest)
	// req
	switch x := m.Req.(type) {
	case *KVRequest_GetRowReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetRowReq); err != nil {
			return err
		}
	case *KVRequest_PutRowReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutRowReq); err != nil {
			return err
		}
	case *KVRequest_DeleteRowReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteRowReq); err != nil {
			return err
		}
	case *KVRequest_BatchGetRowReq:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchGetRowReq); err != nil {
			return err
		}
	case *KVRequest_BatchPutRowReq:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchPutRowReq); err != nil {
			return err
		}
	case *KVRequest_BatchDeleteRowReq:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchDeleteRowReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KVRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _KVRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVRequest)
	switch tag {
	case 2: // req.get_row_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetRowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetRowReq{msg}
		return true, err
	case 3: // req.put_row_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_PutRowReq{msg}
		return true, err
	case 4: // req.delete_row_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteRowReq{msg}
		return true, err
	case 5: // req.batch_get_row_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchGetRowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchGetRowReq{msg}
		return true, err
	case 6: // req.batch_put_row_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchPutRowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchPutRowReq{msg}
		return true, err
	case 7: // req.batch_delete_row_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchDeleteRowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchDeleteRowReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KVRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVRequest)
	// req
	switch x := m.Req.(type) {
	case *KVRequest_GetRowReq:
		s := proto.Size(x.GetRowReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_PutRowReq:
		s := proto.Size(x.PutRowReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteRowReq:
		s := proto.Size(x.DeleteRowReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchGetRowReq:
		s := proto.Size(x.BatchGetRowReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchPutRowReq:
		s := proto.Size(x.BatchPutRowReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchDeleteRowReq:
		s := proto.Size(x.BatchDeleteRowReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KVResponse struct {
	Header *tiap_kvrpcpb.KVResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*KVResponse_GetRowResp
	//	*KVResponse_PutRowResp
	//	*KVResponse_DeleteRowResp
	//	*KVResponse_BatchGetRowResp
	//	*KVResponse_BatchPutRowResp
	//	*KVResponse_BatchDeleteRowResp
	Resp                 isKVResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KVResponse) Reset()         { *m = KVResponse{} }
func (m *KVResponse) String() string { return proto.CompactTextString(m) }
func (*KVResponse) ProtoMessage()    {}
func (*KVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{1}
}
func (m *KVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVResponse.Merge(dst, src)
}
func (m *KVResponse) XXX_Size() int {
	return m.Size()
}
func (m *KVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KVResponse proto.InternalMessageInfo

type isKVResponse_Resp interface {
	isKVResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVResponse_GetRowResp struct {
	GetRowResp *GetRowResponse `protobuf:"bytes,2,opt,name=get_row_resp,json=getRowResp,oneof"`
}
type KVResponse_PutRowResp struct {
	PutRowResp *PutRowResponse `protobuf:"bytes,3,opt,name=put_row_resp,json=putRowResp,oneof"`
}
type KVResponse_DeleteRowResp struct {
	DeleteRowResp *DeleteRowResponse `protobuf:"bytes,4,opt,name=delete_row_resp,json=deleteRowResp,oneof"`
}
type KVResponse_BatchGetRowResp struct {
	BatchGetRowResp *BatchGetRowResponse `protobuf:"bytes,5,opt,name=batch_get_row_resp,json=batchGetRowResp,oneof"`
}
type KVResponse_BatchPutRowResp struct {
	BatchPutRowResp *BatchPutRowResponse `protobuf:"bytes,6,opt,name=batch_put_row_resp,json=batchPutRowResp,oneof"`
}
type KVResponse_BatchDeleteRowResp struct {
	BatchDeleteRowResp *BatchDeleteRowResponse `protobuf:"bytes,7,opt,name=batch_delete_row_resp,json=batchDeleteRowResp,oneof"`
}

func (*KVResponse_GetRowResp) isKVResponse_Resp()         {}
func (*KVResponse_PutRowResp) isKVResponse_Resp()         {}
func (*KVResponse_DeleteRowResp) isKVResponse_Resp()      {}
func (*KVResponse_BatchGetRowResp) isKVResponse_Resp()    {}
func (*KVResponse_BatchPutRowResp) isKVResponse_Resp()    {}
func (*KVResponse_BatchDeleteRowResp) isKVResponse_Resp() {}

func (m *KVResponse) GetResp() isKVResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *KVResponse) GetHeader() *tiap_kvrpcpb.KVResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *KVResponse) GetGetRowResp() *GetRowResponse {
	if x, ok := m.GetResp().(*KVResponse_GetRowResp); ok {
		return x.GetRowResp
	}
	return nil
}

func (m *KVResponse) GetPutRowResp() *PutRowResponse {
	if x, ok := m.GetResp().(*KVResponse_PutRowResp); ok {
		return x.PutRowResp
	}
	return nil
}

func (m *KVResponse) GetDeleteRowResp() *DeleteRowResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteRowResp); ok {
		return x.DeleteRowResp
	}
	return nil
}

func (m *KVResponse) GetBatchGetRowResp() *BatchGetRowResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchGetRowResp); ok {
		return x.BatchGetRowResp
	}
	return nil
}

func (m *KVResponse) GetBatchPutRowResp() *BatchPutRowResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchPutRowResp); ok {
		return x.BatchPutRowResp
	}
	return nil
}

func (m *KVResponse) GetBatchDeleteRowResp() *BatchDeleteRowResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchDeleteRowResp); ok {
		return x.BatchDeleteRowResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVResponse_OneofMarshaler, _KVResponse_OneofUnmarshaler, _KVResponse_OneofSizer, []interface{}{
		(*KVResponse_GetRowResp)(nil),
		(*KVResponse_PutRowResp)(nil),
		(*KVResponse_DeleteRowResp)(nil),
		(*KVResponse_BatchGetRowResp)(nil),
		(*KVResponse_BatchPutRowResp)(nil),
		(*KVResponse_BatchDeleteRowResp)(nil),
	}
}

func _KVResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVResponse)
	// resp
	switch x := m.Resp.(type) {
	case *KVResponse_GetRowResp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetRowResp); err != nil {
			return err
		}
	case *KVResponse_PutRowResp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutRowResp); err != nil {
			return err
		}
	case *KVResponse_DeleteRowResp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteRowResp); err != nil {
			return err
		}
	case *KVResponse_BatchGetRowResp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchGetRowResp); err != nil {
			return err
		}
	case *KVResponse_BatchPutRowResp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchPutRowResp); err != nil {
			return err
		}
	case *KVResponse_BatchDeleteRowResp:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchDeleteRowResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KVResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _KVResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVResponse)
	switch tag {
	case 2: // resp.get_row_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetRowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetRowResp{msg}
		return true, err
	case 3: // resp.put_row_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_PutRowResp{msg}
		return true, err
	case 4: // resp.delete_row_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteRowResp{msg}
		return true, err
	case 5: // resp.batch_get_row_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchGetRowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchGetRowResp{msg}
		return true, err
	case 6: // resp.batch_put_row_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchPutRowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchPutRowResp{msg}
		return true, err
	case 7: // resp.batch_delete_row_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchDeleteRowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchDeleteRowResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KVResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVResponse)
	// resp
	switch x := m.Resp.(type) {
	case *KVResponse_GetRowResp:
		s := proto.Size(x.GetRowResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_PutRowResp:
		s := proto.Size(x.PutRowResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteRowResp:
		s := proto.Size(x.DeleteRowResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchGetRowResp:
		s := proto.Size(x.BatchGetRowResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchPutRowResp:
		s := proto.Size(x.BatchPutRowResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchDeleteRowResp:
		s := proto.Size(x.BatchDeleteRowResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetRowRequest struct {
	Row                  *Row     `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRowRequest) Reset()         { *m = GetRowRequest{} }
func (m *GetRowRequest) String() string { return proto.CompactTextString(m) }
func (*GetRowRequest) ProtoMessage()    {}
func (*GetRowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{2}
}
func (m *GetRowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRowRequest.Merge(dst, src)
}
func (m *GetRowRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRowRequest proto.InternalMessageInfo

func (m *GetRowRequest) GetRow() *Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type GetRowResponse struct {
	RowValue             *RowValue `protobuf:"bytes,1,opt,name=row_value,json=rowValue" json:"row_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetRowResponse) Reset()         { *m = GetRowResponse{} }
func (m *GetRowResponse) String() string { return proto.CompactTextString(m) }
func (*GetRowResponse) ProtoMessage()    {}
func (*GetRowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{3}
}
func (m *GetRowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRowResponse.Merge(dst, src)
}
func (m *GetRowResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRowResponse proto.InternalMessageInfo

func (m *GetRowResponse) GetRowValue() *RowValue {
	if m != nil {
		return m.RowValue
	}
	return nil
}

type BatchGetRowRequest struct {
	Rows                 []*Row   `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetRowRequest) Reset()         { *m = BatchGetRowRequest{} }
func (m *BatchGetRowRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetRowRequest) ProtoMessage()    {}
func (*BatchGetRowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{4}
}
func (m *BatchGetRowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetRowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetRowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchGetRowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetRowRequest.Merge(dst, src)
}
func (m *BatchGetRowRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetRowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetRowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetRowRequest proto.InternalMessageInfo

func (m *BatchGetRowRequest) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type BatchGetRowResponse struct {
	RowValues            []*RowValue `protobuf:"bytes,1,rep,name=row_values,json=rowValues" json:"row_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BatchGetRowResponse) Reset()         { *m = BatchGetRowResponse{} }
func (m *BatchGetRowResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetRowResponse) ProtoMessage()    {}
func (*BatchGetRowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{5}
}
func (m *BatchGetRowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetRowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetRowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchGetRowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetRowResponse.Merge(dst, src)
}
func (m *BatchGetRowResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetRowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetRowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetRowResponse proto.InternalMessageInfo

func (m *BatchGetRowResponse) GetRowValues() []*RowValue {
	if m != nil {
		return m.RowValues
	}
	return nil
}

type PutRowRequest struct {
	RowValue             *RowValue `protobuf:"bytes,1,opt,name=row_value,json=rowValue" json:"row_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PutRowRequest) Reset()         { *m = PutRowRequest{} }
func (m *PutRowRequest) String() string { return proto.CompactTextString(m) }
func (*PutRowRequest) ProtoMessage()    {}
func (*PutRowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{6}
}
func (m *PutRowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutRowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutRowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutRowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRowRequest.Merge(dst, src)
}
func (m *PutRowRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutRowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRowRequest proto.InternalMessageInfo

func (m *PutRowRequest) GetRowValue() *RowValue {
	if m != nil {
		return m.RowValue
	}
	return nil
}

type PutRowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutRowResponse) Reset()         { *m = PutRowResponse{} }
func (m *PutRowResponse) String() string { return proto.CompactTextString(m) }
func (*PutRowResponse) ProtoMessage()    {}
func (*PutRowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{7}
}
func (m *PutRowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutRowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutRowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutRowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRowResponse.Merge(dst, src)
}
func (m *PutRowResponse) XXX_Size() int {
	return m.Size()
}
func (m *PutRowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutRowResponse proto.InternalMessageInfo

type BatchPutRowRequest struct {
	RowValues            []*RowValue `protobuf:"bytes,1,rep,name=row_values,json=rowValues" json:"row_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BatchPutRowRequest) Reset()         { *m = BatchPutRowRequest{} }
func (m *BatchPutRowRequest) String() string { return proto.CompactTextString(m) }
func (*BatchPutRowRequest) ProtoMessage()    {}
func (*BatchPutRowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{8}
}
func (m *BatchPutRowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPutRowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPutRowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchPutRowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPutRowRequest.Merge(dst, src)
}
func (m *BatchPutRowRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchPutRowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPutRowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPutRowRequest proto.InternalMessageInfo

func (m *BatchPutRowRequest) GetRowValues() []*RowValue {
	if m != nil {
		return m.RowValues
	}
	return nil
}

type BatchPutRowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchPutRowResponse) Reset()         { *m = BatchPutRowResponse{} }
func (m *BatchPutRowResponse) String() string { return proto.CompactTextString(m) }
func (*BatchPutRowResponse) ProtoMessage()    {}
func (*BatchPutRowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{9}
}
func (m *BatchPutRowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPutRowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPutRowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchPutRowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPutRowResponse.Merge(dst, src)
}
func (m *BatchPutRowResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchPutRowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPutRowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPutRowResponse proto.InternalMessageInfo

type DeleteRowRequest struct {
	Row                  *Row     `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRowRequest) Reset()         { *m = DeleteRowRequest{} }
func (m *DeleteRowRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRowRequest) ProtoMessage()    {}
func (*DeleteRowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{10}
}
func (m *DeleteRowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteRowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRowRequest.Merge(dst, src)
}
func (m *DeleteRowRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRowRequest proto.InternalMessageInfo

func (m *DeleteRowRequest) GetRow() *Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type DeleteRowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRowResponse) Reset()         { *m = DeleteRowResponse{} }
func (m *DeleteRowResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRowResponse) ProtoMessage()    {}
func (*DeleteRowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{11}
}
func (m *DeleteRowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteRowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRowResponse.Merge(dst, src)
}
func (m *DeleteRowResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRowResponse proto.InternalMessageInfo

type BatchDeleteRowRequest struct {
	Rows                 []*Row   `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeleteRowRequest) Reset()         { *m = BatchDeleteRowRequest{} }
func (m *BatchDeleteRowRequest) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteRowRequest) ProtoMessage()    {}
func (*BatchDeleteRowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{12}
}
func (m *BatchDeleteRowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDeleteRowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDeleteRowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchDeleteRowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteRowRequest.Merge(dst, src)
}
func (m *BatchDeleteRowRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchDeleteRowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteRowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteRowRequest proto.InternalMessageInfo

func (m *BatchDeleteRowRequest) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type BatchDeleteRowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeleteRowResponse) Reset()         { *m = BatchDeleteRowResponse{} }
func (m *BatchDeleteRowResponse) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteRowResponse) ProtoMessage()    {}
func (*BatchDeleteRowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{13}
}
func (m *BatchDeleteRowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDeleteRowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDeleteRowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchDeleteRowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteRowResponse.Merge(dst, src)
}
func (m *BatchDeleteRowResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchDeleteRowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteRowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteRowResponse proto.InternalMessageInfo

type Row struct {
	DbName               string        `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TableName            string        `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RowKey               []byte        `protobuf:"bytes,3,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	Families             *ColumnFamily `protobuf:"bytes,4,opt,name=families" json:"families,omitempty"`
	Ttl                  int64         `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{14}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(dst, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *Row) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Row) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *Row) GetFamilies() *ColumnFamily {
	if m != nil {
		return m.Families
	}
	return nil
}

func (m *Row) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type ColumnFamily struct {
	M                    map[string]*Columns `protobuf:"bytes,1,rep,name=m" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ColumnFamily) Reset()         { *m = ColumnFamily{} }
func (m *ColumnFamily) String() string { return proto.CompactTextString(m) }
func (*ColumnFamily) ProtoMessage()    {}
func (*ColumnFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{15}
}
func (m *ColumnFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnFamily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnFamily.Merge(dst, src)
}
func (m *ColumnFamily) XXX_Size() int {
	return m.Size()
}
func (m *ColumnFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnFamily.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnFamily proto.InternalMessageInfo

func (m *ColumnFamily) GetM() map[string]*Columns {
	if m != nil {
		return m.M
	}
	return nil
}

type Columns struct {
	Columns              []*Column `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Columns) Reset()         { *m = Columns{} }
func (m *Columns) String() string { return proto.CompactTextString(m) }
func (*Columns) ProtoMessage()    {}
func (*Columns) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{16}
}
func (m *Columns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Columns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Columns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Columns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Columns.Merge(dst, src)
}
func (m *Columns) XXX_Size() int {
	return m.Size()
}
func (m *Columns) XXX_DiscardUnknown() {
	xxx_messageInfo_Columns.DiscardUnknown(m)
}

var xxx_messageInfo_Columns proto.InternalMessageInfo

func (m *Columns) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Column struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MinStamp             int64    `protobuf:"varint,2,opt,name=min_stamp,json=minStamp,proto3" json:"min_stamp,omitempty"`
	MaxStamp             int64    `protobuf:"varint,3,opt,name=max_stamp,json=maxStamp,proto3" json:"max_stamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{17}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(dst, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetMinStamp() int64 {
	if m != nil {
		return m.MinStamp
	}
	return 0
}

func (m *Column) GetMaxStamp() int64 {
	if m != nil {
		return m.MaxStamp
	}
	return 0
}

type RowValue struct {
	DbName               string             `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TableName            string             `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RowKey               []byte             `protobuf:"bytes,3,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	FamilyValues         *ColumnFamilyValue `protobuf:"bytes,4,opt,name=family_values,json=familyValues" json:"family_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RowValue) Reset()         { *m = RowValue{} }
func (m *RowValue) String() string { return proto.CompactTextString(m) }
func (*RowValue) ProtoMessage()    {}
func (*RowValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{18}
}
func (m *RowValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowValue.Merge(dst, src)
}
func (m *RowValue) XXX_Size() int {
	return m.Size()
}
func (m *RowValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RowValue.DiscardUnknown(m)
}

var xxx_messageInfo_RowValue proto.InternalMessageInfo

func (m *RowValue) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *RowValue) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *RowValue) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *RowValue) GetFamilyValues() *ColumnFamilyValue {
	if m != nil {
		return m.FamilyValues
	}
	return nil
}

type ColumnFamilyValue struct {
	M                    map[string]*ColumnValues `protobuf:"bytes,1,rep,name=m" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ColumnFamilyValue) Reset()         { *m = ColumnFamilyValue{} }
func (m *ColumnFamilyValue) String() string { return proto.CompactTextString(m) }
func (*ColumnFamilyValue) ProtoMessage()    {}
func (*ColumnFamilyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{19}
}
func (m *ColumnFamilyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnFamilyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnFamilyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnFamilyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnFamilyValue.Merge(dst, src)
}
func (m *ColumnFamilyValue) XXX_Size() int {
	return m.Size()
}
func (m *ColumnFamilyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnFamilyValue.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnFamilyValue proto.InternalMessageInfo

func (m *ColumnFamilyValue) GetM() map[string]*ColumnValues {
	if m != nil {
		return m.M
	}
	return nil
}

type ColumnValues struct {
	ColumnValues         []*ColumnValue `protobuf:"bytes,1,rep,name=column_values,json=columnValues" json:"column_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ColumnValues) Reset()         { *m = ColumnValues{} }
func (m *ColumnValues) String() string { return proto.CompactTextString(m) }
func (*ColumnValues) ProtoMessage()    {}
func (*ColumnValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{20}
}
func (m *ColumnValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnValues.Merge(dst, src)
}
func (m *ColumnValues) XXX_Size() int {
	return m.Size()
}
func (m *ColumnValues) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnValues.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnValues proto.InternalMessageInfo

func (m *ColumnValues) GetColumnValues() []*ColumnValue {
	if m != nil {
		return m.ColumnValues
	}
	return nil
}

type ColumnValue struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ttl                  int64    `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnValue) Reset()         { *m = ColumnValue{} }
func (m *ColumnValue) String() string { return proto.CompactTextString(m) }
func (*ColumnValue) ProtoMessage()    {}
func (*ColumnValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f, []int{21}
}
func (m *ColumnValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnValue.Merge(dst, src)
}
func (m *ColumnValue) XXX_Size() int {
	return m.Size()
}
func (m *ColumnValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnValue.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnValue proto.InternalMessageInfo

func (m *ColumnValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ColumnValue) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ColumnValue) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*KVRequest)(nil), "tiap_hbaselike_kvrpcpb.KVRequest")
	proto.RegisterType((*KVResponse)(nil), "tiap_hbaselike_kvrpcpb.KVResponse")
	proto.RegisterType((*GetRowRequest)(nil), "tiap_hbaselike_kvrpcpb.GetRowRequest")
	proto.RegisterType((*GetRowResponse)(nil), "tiap_hbaselike_kvrpcpb.GetRowResponse")
	proto.RegisterType((*BatchGetRowRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchGetRowRequest")
	proto.RegisterType((*BatchGetRowResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchGetRowResponse")
	proto.RegisterType((*PutRowRequest)(nil), "tiap_hbaselike_kvrpcpb.PutRowRequest")
	proto.RegisterType((*PutRowResponse)(nil), "tiap_hbaselike_kvrpcpb.PutRowResponse")
	proto.RegisterType((*BatchPutRowRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchPutRowRequest")
	proto.RegisterType((*BatchPutRowResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchPutRowResponse")
	proto.RegisterType((*DeleteRowRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteRowRequest")
	proto.RegisterType((*DeleteRowResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteRowResponse")
	proto.RegisterType((*BatchDeleteRowRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchDeleteRowRequest")
	proto.RegisterType((*BatchDeleteRowResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchDeleteRowResponse")
	proto.RegisterType((*Row)(nil), "tiap_hbaselike_kvrpcpb.Row")
	proto.RegisterType((*ColumnFamily)(nil), "tiap_hbaselike_kvrpcpb.ColumnFamily")
	proto.RegisterMapType((map[string]*Columns)(nil), "tiap_hbaselike_kvrpcpb.ColumnFamily.MEntry")
	proto.RegisterType((*Columns)(nil), "tiap_hbaselike_kvrpcpb.Columns")
	proto.RegisterType((*Column)(nil), "tiap_hbaselike_kvrpcpb.Column")
	proto.RegisterType((*RowValue)(nil), "tiap_hbaselike_kvrpcpb.RowValue")
	proto.RegisterType((*ColumnFamilyValue)(nil), "tiap_hbaselike_kvrpcpb.ColumnFamilyValue")
	proto.RegisterMapType((map[string]*ColumnValues)(nil), "tiap_hbaselike_kvrpcpb.ColumnFamilyValue.MEntry")
	proto.RegisterType((*ColumnValues)(nil), "tiap_hbaselike_kvrpcpb.ColumnValues")
	proto.RegisterType((*ColumnValue)(nil), "tiap_hbaselike_kvrpcpb.ColumnValue")
}
func (m *KVRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KVRequest_GetRowReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetRowReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetRowReq.Size()))
		n3, err := m.GetRowReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *KVRequest_PutRowReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PutRowReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.PutRowReq.Size()))
		n4, err := m.PutRowReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *KVRequest_DeleteRowReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteRowReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteRowReq.Size()))
		n5, err := m.DeleteRowReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *KVRequest_BatchGetRowReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchGetRowReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchGetRowReq.Size()))
		n6, err := m.BatchGetRowReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *KVRequest_BatchPutRowReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchPutRowReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchPutRowReq.Size()))
		n7, err := m.BatchPutRowReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *KVRequest_BatchDeleteRowReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchDeleteRowReq != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchDeleteRowReq.Size()))
		n8, err := m.BatchDeleteRowReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *KVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Header.Size()))
		n9, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Resp != nil {
		nn10, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KVResponse_GetRowResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetRowResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetRowResp.Size()))
		n11, err := m.GetRowResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *KVResponse_PutRowResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PutRowResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.PutRowResp.Size()))
		n12, err := m.PutRowResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *KVResponse_DeleteRowResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteRowResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteRowResp.Size()))
		n13, err := m.DeleteRowResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *KVResponse_BatchGetRowResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchGetRowResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchGetRowResp.Size()))
		n14, err := m.BatchGetRowResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *KVResponse_BatchPutRowResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchPutRowResp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchPutRowResp.Size()))
		n15, err := m.BatchPutRowResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *KVResponse_BatchDeleteRowResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchDeleteRowResp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchDeleteRowResp.Size()))
		n16, err := m.BatchDeleteRowResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *GetRowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Row != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Row.Size()))
		n17, err := m.Row.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RowValue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.RowValue.Size()))
		n18, err := m.RowValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchGetRowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetRowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchGetRowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetRowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowValues) > 0 {
		for _, msg := range m.RowValues {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutRowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutRowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RowValue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.RowValue.Size()))
		n19, err := m.RowValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutRowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutRowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPutRowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPutRowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowValues) > 0 {
		for _, msg := range m.RowValues {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPutRowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPutRowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteRowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Row != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Row.Size()))
		n20, err := m.Row.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteRowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDeleteRowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDeleteRowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDeleteRowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDeleteRowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.TableName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if m.Families != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Families.Size()))
		n21, err := m.Families.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Ttl != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnFamily) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, _ := range m.M {
			dAtA[i] = 0xa
			i++
			v := m.M[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTiapHbaselikeKvrpcpb(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTiapHbaselikeKvrpcpb(uint64(len(k))) + msgSize
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(v.Size()))
				n22, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n22
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Columns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Columns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.MinStamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.MinStamp))
	}
	if m.MaxStamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.MaxStamp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.TableName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if m.FamilyValues != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.FamilyValues.Size()))
		n23, err := m.FamilyValues.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnFamilyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnFamilyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, _ := range m.M {
			dAtA[i] = 0xa
			i++
			v := m.M[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTiapHbaselikeKvrpcpb(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTiapHbaselikeKvrpcpb(uint64(len(k))) + msgSize
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(v.Size()))
				n24, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n24
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnValues) > 0 {
		for _, msg := range m.ColumnValues {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Timestamp))
	}
	if m.Ttl != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTiapHbaselikeKvrpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KVRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVRequest_GetRowReq) Size() (n int) {
	var l int
	_ = l
	if m.GetRowReq != nil {
		l = m.GetRowReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_PutRowReq) Size() (n int) {
	var l int
	_ = l
	if m.PutRowReq != nil {
		l = m.PutRowReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteRowReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteRowReq != nil {
		l = m.DeleteRowReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchGetRowReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchGetRowReq != nil {
		l = m.BatchGetRowReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchPutRowReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchPutRowReq != nil {
		l = m.BatchPutRowReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchDeleteRowReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchDeleteRowReq != nil {
		l = m.BatchDeleteRowReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVResponse_GetRowResp) Size() (n int) {
	var l int
	_ = l
	if m.GetRowResp != nil {
		l = m.GetRowResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_PutRowResp) Size() (n int) {
	var l int
	_ = l
	if m.PutRowResp != nil {
		l = m.PutRowResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteRowResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteRowResp != nil {
		l = m.DeleteRowResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchGetRowResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchGetRowResp != nil {
		l = m.BatchGetRowResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchPutRowResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchPutRowResp != nil {
		l = m.BatchPutRowResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchDeleteRowResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchDeleteRowResp != nil {
		l = m.BatchDeleteRowResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *GetRowRequest) Size() (n int) {
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRowResponse) Size() (n int) {
	var l int
	_ = l
	if m.RowValue != nil {
		l = m.RowValue.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetRowRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetRowResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.RowValues) > 0 {
		for _, e := range m.RowValues {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutRowRequest) Size() (n int) {
	var l int
	_ = l
	if m.RowValue != nil {
		l = m.RowValue.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutRowResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPutRowRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.RowValues) > 0 {
		for _, e := range m.RowValues {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPutRowResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRowRequest) Size() (n int) {
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRowResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDeleteRowRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDeleteRowResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Families != nil {
		l = m.Families.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Ttl != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnFamily) Size() (n int) {
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, v := range m.M {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTiapHbaselikeKvrpcpb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTiapHbaselikeKvrpcpb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTiapHbaselikeKvrpcpb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Columns) Size() (n int) {
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Column) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.MinStamp != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.MinStamp))
	}
	if m.MaxStamp != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.MaxStamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.FamilyValues != nil {
		l = m.FamilyValues.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnFamilyValue) Size() (n int) {
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, v := range m.M {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTiapHbaselikeKvrpcpb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTiapHbaselikeKvrpcpb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTiapHbaselikeKvrpcpb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnValues) Size() (n int) {
	var l int
	_ = l
	if len(m.ColumnValues) > 0 {
		for _, e := range m.ColumnValues {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Timestamp))
	}
	if m.Ttl != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTiapHbaselikeKvrpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTiapHbaselikeKvrpcpb(x uint64) (n int) {
	return sovTiapHbaselikeKvrpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KVRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_kvrpcpb.KVRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetRowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetRowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetRowReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutRowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutRowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_PutRowReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteRowReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchGetRowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchGetRowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchGetRowReq{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPutRowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchPutRowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchPutRowReq{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDeleteRowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchDeleteRowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchDeleteRowReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_kvrpcpb.KVResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetRowResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetRowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetRowResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutRowResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutRowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_PutRowResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRowResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteRowResp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchGetRowResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchGetRowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchGetRowResp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPutRowResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchPutRowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchPutRowResp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDeleteRowResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchDeleteRowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchDeleteRowResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &Row{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RowValue == nil {
				m.RowValue = &RowValue{}
			}
			if err := m.RowValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetRowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetRowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetRowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetRowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetRowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetRowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowValues = append(m.RowValues, &RowValue{})
			if err := m.RowValues[len(m.RowValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutRowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutRowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutRowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RowValue == nil {
				m.RowValue = &RowValue{}
			}
			if err := m.RowValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutRowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutRowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutRowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPutRowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPutRowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPutRowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowValues = append(m.RowValues, &RowValue{})
			if err := m.RowValues[len(m.RowValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPutRowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPutRowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPutRowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &Row{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDeleteRowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDeleteRowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDeleteRowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDeleteRowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDeleteRowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDeleteRowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Families", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Families == nil {
				m.Families = &ColumnFamily{}
			}
			if err := m.Families.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = make(map[string]*Columns)
			}
			var mapkey string
			var mapvalue *Columns
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTiapHbaselikeKvrpcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTiapHbaselikeKvrpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTiapHbaselikeKvrpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Columns{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.M[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Columns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Columns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Columns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Column{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStamp", wireType)
			}
			m.MinStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStamp", wireType)
			}
			m.MaxStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FamilyValues == nil {
				m.FamilyValues = &ColumnFamilyValue{}
			}
			if err := m.FamilyValues.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnFamilyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnFamilyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnFamilyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = make(map[string]*ColumnValues)
			}
			var mapkey string
			var mapvalue *ColumnValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTiapHbaselikeKvrpcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTiapHbaselikeKvrpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTiapHbaselikeKvrpcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ColumnValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTiapHbaselikeKvrpcpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.M[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnValues = append(m.ColumnValues, &ColumnValue{})
			if err := m.ColumnValues[len(m.ColumnValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTiapHbaselikeKvrpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTiapHbaselikeKvrpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTiapHbaselikeKvrpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTiapHbaselikeKvrpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tiap_hbaselike_kvrpcpb.proto", fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f)
}

var fileDescriptor_tiap_hbaselike_kvrpcpb_94912e67f547294f = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x59, 0x67, 0x9d, 0x3d, 0xb1, 0x73, 0x99, 0x26, 0x6d, 0x94, 0xb4, 0x26, 0x1a,
	0xa0, 0x2a, 0x54, 0xd9, 0x22, 0x50, 0x51, 0xa9, 0x44, 0x81, 0x94, 0xd2, 0x88, 0x8a, 0x50, 0x4d,
	0x55, 0x83, 0xfa, 0x62, 0x76, 0xed, 0xa9, 0xbd, 0xb2, 0xd7, 0xbb, 0xd9, 0x59, 0xc7, 0xf5, 0x37,
	0xe1, 0x91, 0x67, 0x78, 0xe0, 0x33, 0xf0, 0xc6, 0x23, 0x4f, 0x3c, 0xa3, 0xf0, 0x45, 0xd0, 0x5c,
	0xf6, 0xea, 0xdb, 0x56, 0xe1, 0x29, 0xb3, 0xe7, 0x9c, 0xf9, 0xcd, 0x99, 0x73, 0xfe, 0x73, 0x1c,
	0xb8, 0x19, 0xb9, 0x76, 0xd0, 0xea, 0x39, 0x36, 0xa3, 0x03, 0xb7, 0x4f, 0x5b, 0xfd, 0x8b, 0x30,
	0x68, 0x07, 0x8e, 0x15, 0x84, 0x7e, 0xe4, 0xa3, 0xeb, 0xb3, 0xbd, 0x07, 0xbb, 0x5d, 0xbf, 0xeb,
	0x8b, 0x90, 0x7b, 0x7c, 0x25, 0xa3, 0x0f, 0x90, 0x88, 0xce, 0x11, 0xf0, 0x1f, 0x15, 0x30, 0x9f,
	0x35, 0x09, 0x3d, 0x1f, 0x51, 0x16, 0xa1, 0xfb, 0x60, 0xf4, 0xa8, 0xdd, 0xa1, 0xe1, 0xbe, 0x76,
	0xa4, 0xdd, 0xd9, 0xf8, 0xf8, 0x96, 0x95, 0xdb, 0x92, 0x04, 0x9e, 0x8a, 0x20, 0xa2, 0x82, 0xd1,
	0x53, 0xd8, 0xe8, 0xd2, 0xa8, 0x15, 0xfa, 0xe3, 0x56, 0x48, 0xcf, 0xf7, 0x57, 0xc5, 0xde, 0xf7,
	0xad, 0x39, 0xa9, 0x3f, 0xa5, 0x11, 0xf1, 0xc7, 0x31, 0x69, 0x85, 0x98, 0xdd, 0xd8, 0xc0, 0x41,
	0xc1, 0x28, 0x05, 0xe9, 0x8b, 0x41, 0xcf, 0x47, 0x05, 0x50, 0x10, 0x1b, 0xd0, 0x73, 0xd8, 0xec,
	0xd0, 0x01, 0x8d, 0x68, 0xc2, 0xaa, 0x08, 0xd6, 0x9d, 0x79, 0xac, 0xaf, 0x45, 0x74, 0x0e, 0x57,
	0xeb, 0x64, 0x6c, 0xe8, 0x07, 0xd8, 0x71, 0xec, 0xa8, 0xdd, 0x6b, 0x65, 0x6f, 0xba, 0x26, 0xa0,
	0x1f, 0xce, 0x83, 0x9e, 0xf0, 0x0d, 0xc5, 0xeb, 0x6e, 0x3a, 0x39, 0x6b, 0x0a, 0xce, 0xde, 0xdc,
	0x28, 0x01, 0x2e, 0x5e, 0x5f, 0x82, 0x13, 0x2b, 0xfa, 0x09, 0x76, 0x25, 0xb8, 0x50, 0x89, 0xaa,
	0x60, 0x1f, 0x2f, 0x64, 0xcf, 0x28, 0x87, 0xcc, 0x32, 0xeb, 0x38, 0x59, 0x03, 0x3d, 0xa4, 0xe7,
	0xf8, 0xef, 0x0a, 0x00, 0x97, 0x06, 0x0b, 0xfc, 0x21, 0xa3, 0xe8, 0xd3, 0x82, 0x88, 0x1a, 0xd3,
	0x22, 0x92, 0x91, 0x05, 0x15, 0x7d, 0x0b, 0xb5, 0xb4, 0xb6, 0x2c, 0x50, 0x32, 0xba, 0xbd, 0x4c,
	0x46, 0x8a, 0xb5, 0x42, 0xa0, 0x9b, 0x58, 0x38, 0x2b, 0x2d, 0x27, 0x0b, 0x94, 0x92, 0x6e, 0x2f,
	0x53, 0x52, 0xca, 0x0a, 0x12, 0x0b, 0x7a, 0x01, 0x5b, 0xb9, 0x0a, 0xb2, 0x40, 0x89, 0xe9, 0x83,
	0x12, 0x62, 0x4a, 0x88, 0xf5, 0x4e, 0xd6, 0x88, 0x5e, 0x01, 0x2a, 0xca, 0x89, 0x05, 0x4a, 0x4f,
	0x77, 0x4b, 0xe9, 0x29, 0x21, 0x6f, 0x39, 0x79, 0x73, 0xca, 0xce, 0x95, 0xc0, 0x28, 0xc1, 0x9e,
	0xaa, 0xc3, 0x96, 0x93, 0x37, 0xa3, 0x36, 0xec, 0xcd, 0x10, 0x15, 0x0b, 0x94, 0xaa, 0xac, 0xb2,
	0xaa, 0x4a, 0x4e, 0x40, 0xce, 0x94, 0xe7, 0xc4, 0x80, 0x0a, 0x67, 0xe2, 0x47, 0x50, 0xcf, 0xbd,
	0x1e, 0x74, 0x0c, 0x7a, 0xe8, 0x8f, 0x95, 0xae, 0x0e, 0xe7, 0x9d, 0xc5, 0x37, 0xf0, 0x38, 0xfc,
	0x3d, 0x6c, 0xe6, 0xab, 0x85, 0x3e, 0x07, 0x93, 0x67, 0x7c, 0x61, 0x0f, 0x46, 0x54, 0x61, 0x8e,
	0x16, 0x60, 0x9a, 0x3c, 0x8e, 0xac, 0x87, 0x6a, 0x85, 0x9f, 0x00, 0x9a, 0x7e, 0xd3, 0xe8, 0x1e,
	0x54, 0x42, 0x7f, 0xcc, 0xf6, 0xb5, 0x23, 0x7d, 0x59, 0x5a, 0x22, 0x10, 0x37, 0xe1, 0xda, 0x8c,
	0x56, 0xa2, 0x2f, 0x00, 0x92, 0xe4, 0x62, 0xda, 0xf2, 0xec, 0xcc, 0x38, 0x3b, 0x86, 0xcf, 0xa0,
	0x9e, 0x1b, 0x0a, 0x57, 0xbd, 0xee, 0x36, 0x6c, 0xe6, 0x15, 0x81, 0x5f, 0xaa, 0x02, 0xe4, 0x8f,
	0xb9, 0x72, 0xe2, 0x7b, 0xaa, 0x20, 0x85, 0xd3, 0xbe, 0x82, 0xed, 0xe2, 0x20, 0x7a, 0x5b, 0x09,
	0x5c, 0x83, 0x9d, 0x29, 0xd5, 0xe1, 0x53, 0xd8, 0x9b, 0x39, 0xe5, 0xde, 0xbe, 0x93, 0xfb, 0x70,
	0x7d, 0xb6, 0xb2, 0xf1, 0xaf, 0x1a, 0xe8, 0xc4, 0x1f, 0xa3, 0x1b, 0x50, 0xed, 0x38, 0xad, 0xa1,
	0xed, 0xc9, 0x06, 0x98, 0xc4, 0xe8, 0x38, 0x67, 0xb6, 0x47, 0xd1, 0x2d, 0x80, 0xc8, 0x76, 0x06,
	0x54, 0xfa, 0x56, 0x85, 0xcf, 0x14, 0x16, 0xe1, 0xbe, 0x01, 0x55, 0x5e, 0xd3, 0x3e, 0x9d, 0x88,
	0xe1, 0x55, 0x23, 0x46, 0xe8, 0x8f, 0x9f, 0xd1, 0x09, 0xfa, 0x12, 0xd6, 0x5f, 0xdb, 0x9e, 0x3b,
	0x70, 0x29, 0x53, 0x73, 0xe8, 0xbd, 0x79, 0x79, 0x3e, 0xf6, 0x07, 0x23, 0x6f, 0xf8, 0x0d, 0x8f,
	0x9e, 0x90, 0x64, 0x17, 0xda, 0x06, 0x3d, 0x8a, 0x06, 0x62, 0xd8, 0xe8, 0x84, 0x2f, 0xf1, 0x2f,
	0x1a, 0xd4, 0xb2, 0xc1, 0xe8, 0x33, 0xd0, 0x3c, 0x55, 0x85, 0xbb, 0x65, 0xe8, 0xd6, 0x77, 0x4f,
	0x86, 0x51, 0x38, 0x21, 0x9a, 0x77, 0xf0, 0x12, 0x0c, 0xf9, 0xc1, 0xcf, 0xe1, 0xe9, 0xcb, 0x6b,
	0xf3, 0x25, 0xba, 0x0f, 0x6b, 0x52, 0x8b, 0x72, 0xb6, 0xbf, 0xb3, 0x18, 0xcd, 0x88, 0x8c, 0x7e,
	0xb8, 0xfa, 0x40, 0xc3, 0x8f, 0xa1, 0xaa, 0xac, 0xe8, 0x01, 0x54, 0xdb, 0x72, 0xa9, 0x52, 0x6c,
	0x2c, 0xe6, 0x90, 0x38, 0x1c, 0x37, 0xc1, 0x90, 0x26, 0x84, 0xa0, 0x92, 0xe9, 0x89, 0x58, 0xa3,
	0x43, 0x30, 0x3d, 0x77, 0xd8, 0x62, 0x91, 0xed, 0xc9, 0x5f, 0x1f, 0x9d, 0xac, 0x7b, 0xee, 0xf0,
	0x05, 0xff, 0x16, 0x4e, 0xfb, 0x8d, 0x72, 0xea, 0xca, 0x69, 0xbf, 0x11, 0x4e, 0xfc, 0x9b, 0x06,
	0xeb, 0xb1, 0xae, 0xff, 0xff, 0x8e, 0x9f, 0x41, 0x5d, 0xf4, 0x6e, 0x12, 0xbf, 0xb0, 0x25, 0x3f,
	0x3f, 0xd9, 0xc6, 0xc8, 0xa7, 0x56, 0x7b, 0x9d, 0x7e, 0x30, 0xfc, 0xbb, 0x06, 0x3b, 0x53, 0x31,
	0xe8, 0x51, 0xda, 0xf2, 0x8f, 0x4a, 0x93, 0x33, 0x7d, 0x7f, 0xb5, 0xa0, 0xef, 0x0f, 0xf3, 0x7d,
	0x5f, 0x22, 0x58, 0x99, 0x66, 0xb6, 0xf9, 0x3f, 0xc6, 0xf2, 0x94, 0x2e, 0x74, 0x0a, 0x75, 0xd9,
	0xd2, 0xfc, 0xcc, 0x79, 0xb7, 0x04, 0x97, 0xd4, 0xda, 0x19, 0x12, 0xee, 0xc2, 0x46, 0xc6, 0x39,
	0x53, 0x16, 0xbb, 0xd9, 0xe4, 0x6b, 0x2a, 0x2d, 0x74, 0x13, 0xcc, 0xc8, 0xf5, 0x68, 0x56, 0x0f,
	0xa9, 0x21, 0x7e, 0x62, 0x95, 0xe4, 0x89, 0x9d, 0x1c, 0xff, 0x79, 0xd9, 0xd0, 0xfe, 0xba, 0x6c,
	0x68, 0xff, 0x5c, 0x36, 0xb4, 0x9f, 0xff, 0x6d, 0xac, 0xc0, 0x61, 0xdb, 0xf7, 0x2c, 0xd6, 0xf3,
	0x03, 0x4a, 0xad, 0x8e, 0x6b, 0xf5, 0x2f, 0x58, 0xe4, 0x87, 0x54, 0xfe, 0x5f, 0xee, 0x18, 0xe2,
	0xcf, 0x27, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x97, 0x21, 0xbf, 0x00, 0x0c, 0x00, 0x00,
}
