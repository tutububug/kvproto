// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiap_hbaselike_kvrpcpb.proto

package tiap_hbaselike_kvrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	tiap_kvrpcpb "github.com/tutububug/kvproto/pkg/tiap_kvrpcpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KVRequest struct {
	Header *tiap_kvrpcpb.KVRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*KVRequest_GetCellReq
	//	*KVRequest_PutCellReq
	//	*KVRequest_DeleteCellReq
	//	*KVRequest_BatchGetCellReq
	//	*KVRequest_BatchPutCellReq
	//	*KVRequest_BatchDeleteCellReq
	//	*KVRequest_GetAllRowOfFamilyReq
	//	*KVRequest_DeleteAllRowOfFamilyReq
	//	*KVRequest_GetOneRowOfFamilyReq
	//	*KVRequest_DeleteOneRowOfFamilyReq
	//	*KVRequest_GetOneColumnOfFamilyReq
	Req                  isKVRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KVRequest) Reset()         { *m = KVRequest{} }
func (m *KVRequest) String() string { return proto.CompactTextString(m) }
func (*KVRequest) ProtoMessage()    {}
func (*KVRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{0}
}
func (m *KVRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KVRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVRequest.Merge(dst, src)
}
func (m *KVRequest) XXX_Size() int {
	return m.Size()
}
func (m *KVRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KVRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KVRequest proto.InternalMessageInfo

type isKVRequest_Req interface {
	isKVRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVRequest_GetCellReq struct {
	GetCellReq *GetCellRequest `protobuf:"bytes,2,opt,name=get_cell_req,json=getCellReq,oneof"`
}
type KVRequest_PutCellReq struct {
	PutCellReq *PutCellRequest `protobuf:"bytes,3,opt,name=put_cell_req,json=putCellReq,oneof"`
}
type KVRequest_DeleteCellReq struct {
	DeleteCellReq *DeleteCellRequest `protobuf:"bytes,4,opt,name=delete_cell_req,json=deleteCellReq,oneof"`
}
type KVRequest_BatchGetCellReq struct {
	BatchGetCellReq *BatchGetCellRequest `protobuf:"bytes,5,opt,name=batch_get_cell_req,json=batchGetCellReq,oneof"`
}
type KVRequest_BatchPutCellReq struct {
	BatchPutCellReq *BatchPutCellRequest `protobuf:"bytes,6,opt,name=batch_put_cell_req,json=batchPutCellReq,oneof"`
}
type KVRequest_BatchDeleteCellReq struct {
	BatchDeleteCellReq *BatchDeleteCellRequest `protobuf:"bytes,7,opt,name=batch_delete_cell_req,json=batchDeleteCellReq,oneof"`
}
type KVRequest_GetAllRowOfFamilyReq struct {
	GetAllRowOfFamilyReq *GetAllRowOfFamilyRequest `protobuf:"bytes,8,opt,name=get_all_row_of_family_req,json=getAllRowOfFamilyReq,oneof"`
}
type KVRequest_DeleteAllRowOfFamilyReq struct {
	DeleteAllRowOfFamilyReq *DeleteAllRowOfFamilyRequest `protobuf:"bytes,9,opt,name=delete_all_row_of_family_req,json=deleteAllRowOfFamilyReq,oneof"`
}
type KVRequest_GetOneRowOfFamilyReq struct {
	GetOneRowOfFamilyReq *GetOneRowOfFamilyRequest `protobuf:"bytes,10,opt,name=get_one_row_of_family_req,json=getOneRowOfFamilyReq,oneof"`
}
type KVRequest_DeleteOneRowOfFamilyReq struct {
	DeleteOneRowOfFamilyReq *DeleteOneRowOfFamilyRequest `protobuf:"bytes,11,opt,name=delete_one_row_of_family_req,json=deleteOneRowOfFamilyReq,oneof"`
}
type KVRequest_GetOneColumnOfFamilyReq struct {
	GetOneColumnOfFamilyReq *GetOneColumnOfFamilyRequest `protobuf:"bytes,12,opt,name=get_one_column_of_family_req,json=getOneColumnOfFamilyReq,oneof"`
}

func (*KVRequest_GetCellReq) isKVRequest_Req()              {}
func (*KVRequest_PutCellReq) isKVRequest_Req()              {}
func (*KVRequest_DeleteCellReq) isKVRequest_Req()           {}
func (*KVRequest_BatchGetCellReq) isKVRequest_Req()         {}
func (*KVRequest_BatchPutCellReq) isKVRequest_Req()         {}
func (*KVRequest_BatchDeleteCellReq) isKVRequest_Req()      {}
func (*KVRequest_GetAllRowOfFamilyReq) isKVRequest_Req()    {}
func (*KVRequest_DeleteAllRowOfFamilyReq) isKVRequest_Req() {}
func (*KVRequest_GetOneRowOfFamilyReq) isKVRequest_Req()    {}
func (*KVRequest_DeleteOneRowOfFamilyReq) isKVRequest_Req() {}
func (*KVRequest_GetOneColumnOfFamilyReq) isKVRequest_Req() {}

func (m *KVRequest) GetReq() isKVRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *KVRequest) GetHeader() *tiap_kvrpcpb.KVRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *KVRequest) GetGetCellReq() *GetCellRequest {
	if x, ok := m.GetReq().(*KVRequest_GetCellReq); ok {
		return x.GetCellReq
	}
	return nil
}

func (m *KVRequest) GetPutCellReq() *PutCellRequest {
	if x, ok := m.GetReq().(*KVRequest_PutCellReq); ok {
		return x.PutCellReq
	}
	return nil
}

func (m *KVRequest) GetDeleteCellReq() *DeleteCellRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteCellReq); ok {
		return x.DeleteCellReq
	}
	return nil
}

func (m *KVRequest) GetBatchGetCellReq() *BatchGetCellRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchGetCellReq); ok {
		return x.BatchGetCellReq
	}
	return nil
}

func (m *KVRequest) GetBatchPutCellReq() *BatchPutCellRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchPutCellReq); ok {
		return x.BatchPutCellReq
	}
	return nil
}

func (m *KVRequest) GetBatchDeleteCellReq() *BatchDeleteCellRequest {
	if x, ok := m.GetReq().(*KVRequest_BatchDeleteCellReq); ok {
		return x.BatchDeleteCellReq
	}
	return nil
}

func (m *KVRequest) GetGetAllRowOfFamilyReq() *GetAllRowOfFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_GetAllRowOfFamilyReq); ok {
		return x.GetAllRowOfFamilyReq
	}
	return nil
}

func (m *KVRequest) GetDeleteAllRowOfFamilyReq() *DeleteAllRowOfFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteAllRowOfFamilyReq); ok {
		return x.DeleteAllRowOfFamilyReq
	}
	return nil
}

func (m *KVRequest) GetGetOneRowOfFamilyReq() *GetOneRowOfFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_GetOneRowOfFamilyReq); ok {
		return x.GetOneRowOfFamilyReq
	}
	return nil
}

func (m *KVRequest) GetDeleteOneRowOfFamilyReq() *DeleteOneRowOfFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_DeleteOneRowOfFamilyReq); ok {
		return x.DeleteOneRowOfFamilyReq
	}
	return nil
}

func (m *KVRequest) GetGetOneColumnOfFamilyReq() *GetOneColumnOfFamilyRequest {
	if x, ok := m.GetReq().(*KVRequest_GetOneColumnOfFamilyReq); ok {
		return x.GetOneColumnOfFamilyReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVRequest_OneofMarshaler, _KVRequest_OneofUnmarshaler, _KVRequest_OneofSizer, []interface{}{
		(*KVRequest_GetCellReq)(nil),
		(*KVRequest_PutCellReq)(nil),
		(*KVRequest_DeleteCellReq)(nil),
		(*KVRequest_BatchGetCellReq)(nil),
		(*KVRequest_BatchPutCellReq)(nil),
		(*KVRequest_BatchDeleteCellReq)(nil),
		(*KVRequest_GetAllRowOfFamilyReq)(nil),
		(*KVRequest_DeleteAllRowOfFamilyReq)(nil),
		(*KVRequest_GetOneRowOfFamilyReq)(nil),
		(*KVRequest_DeleteOneRowOfFamilyReq)(nil),
		(*KVRequest_GetOneColumnOfFamilyReq)(nil),
	}
}

func _KVRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVRequest)
	// req
	switch x := m.Req.(type) {
	case *KVRequest_GetCellReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCellReq); err != nil {
			return err
		}
	case *KVRequest_PutCellReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutCellReq); err != nil {
			return err
		}
	case *KVRequest_DeleteCellReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteCellReq); err != nil {
			return err
		}
	case *KVRequest_BatchGetCellReq:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchGetCellReq); err != nil {
			return err
		}
	case *KVRequest_BatchPutCellReq:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchPutCellReq); err != nil {
			return err
		}
	case *KVRequest_BatchDeleteCellReq:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchDeleteCellReq); err != nil {
			return err
		}
	case *KVRequest_GetAllRowOfFamilyReq:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetAllRowOfFamilyReq); err != nil {
			return err
		}
	case *KVRequest_DeleteAllRowOfFamilyReq:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteAllRowOfFamilyReq); err != nil {
			return err
		}
	case *KVRequest_GetOneRowOfFamilyReq:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneRowOfFamilyReq); err != nil {
			return err
		}
	case *KVRequest_DeleteOneRowOfFamilyReq:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteOneRowOfFamilyReq); err != nil {
			return err
		}
	case *KVRequest_GetOneColumnOfFamilyReq:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneColumnOfFamilyReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KVRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _KVRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVRequest)
	switch tag {
	case 2: // req.get_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetCellReq{msg}
		return true, err
	case 3: // req.put_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_PutCellReq{msg}
		return true, err
	case 4: // req.delete_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteCellReq{msg}
		return true, err
	case 5: // req.batch_get_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchGetCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchGetCellReq{msg}
		return true, err
	case 6: // req.batch_put_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchPutCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchPutCellReq{msg}
		return true, err
	case 7: // req.batch_delete_cell_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchDeleteCellRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_BatchDeleteCellReq{msg}
		return true, err
	case 8: // req.get_all_row_of_family_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetAllRowOfFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetAllRowOfFamilyReq{msg}
		return true, err
	case 9: // req.delete_all_row_of_family_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteAllRowOfFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteAllRowOfFamilyReq{msg}
		return true, err
	case 10: // req.get_one_row_of_family_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneRowOfFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetOneRowOfFamilyReq{msg}
		return true, err
	case 11: // req.delete_one_row_of_family_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteOneRowOfFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_DeleteOneRowOfFamilyReq{msg}
		return true, err
	case 12: // req.get_one_column_of_family_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneColumnOfFamilyRequest)
		err := b.DecodeMessage(msg)
		m.Req = &KVRequest_GetOneColumnOfFamilyReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KVRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVRequest)
	// req
	switch x := m.Req.(type) {
	case *KVRequest_GetCellReq:
		s := proto.Size(x.GetCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_PutCellReq:
		s := proto.Size(x.PutCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteCellReq:
		s := proto.Size(x.DeleteCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchGetCellReq:
		s := proto.Size(x.BatchGetCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchPutCellReq:
		s := proto.Size(x.BatchPutCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_BatchDeleteCellReq:
		s := proto.Size(x.BatchDeleteCellReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_GetAllRowOfFamilyReq:
		s := proto.Size(x.GetAllRowOfFamilyReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteAllRowOfFamilyReq:
		s := proto.Size(x.DeleteAllRowOfFamilyReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_GetOneRowOfFamilyReq:
		s := proto.Size(x.GetOneRowOfFamilyReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_DeleteOneRowOfFamilyReq:
		s := proto.Size(x.DeleteOneRowOfFamilyReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVRequest_GetOneColumnOfFamilyReq:
		s := proto.Size(x.GetOneColumnOfFamilyReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KVResponse struct {
	Header *tiap_kvrpcpb.KVResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*KVResponse_GetCellResp
	//	*KVResponse_PutCellResp
	//	*KVResponse_DeleteCellResp
	//	*KVResponse_BatchGetCellResp
	//	*KVResponse_BatchPutCellResp
	//	*KVResponse_BatchDeleteCellResp
	//	*KVResponse_GetAllRowOfFamilyResp
	//	*KVResponse_DeleteAllRowOfFamilyResp
	//	*KVResponse_GetOneRowOfFamilyResp
	//	*KVResponse_DeleteOneRowOfFamilyResp
	//	*KVResponse_GetOneColumnOfFamilyResp
	Resp                 isKVResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KVResponse) Reset()         { *m = KVResponse{} }
func (m *KVResponse) String() string { return proto.CompactTextString(m) }
func (*KVResponse) ProtoMessage()    {}
func (*KVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{1}
}
func (m *KVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVResponse.Merge(dst, src)
}
func (m *KVResponse) XXX_Size() int {
	return m.Size()
}
func (m *KVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KVResponse proto.InternalMessageInfo

type isKVResponse_Resp interface {
	isKVResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVResponse_GetCellResp struct {
	GetCellResp *GetCellResponse `protobuf:"bytes,2,opt,name=get_cell_resp,json=getCellResp,oneof"`
}
type KVResponse_PutCellResp struct {
	PutCellResp *PutCellResponse `protobuf:"bytes,3,opt,name=put_cell_resp,json=putCellResp,oneof"`
}
type KVResponse_DeleteCellResp struct {
	DeleteCellResp *DeleteCellResponse `protobuf:"bytes,4,opt,name=delete_cell_resp,json=deleteCellResp,oneof"`
}
type KVResponse_BatchGetCellResp struct {
	BatchGetCellResp *BatchGetCellResponse `protobuf:"bytes,5,opt,name=batch_get_cell_resp,json=batchGetCellResp,oneof"`
}
type KVResponse_BatchPutCellResp struct {
	BatchPutCellResp *BatchPutCellResponse `protobuf:"bytes,6,opt,name=batch_put_cell_resp,json=batchPutCellResp,oneof"`
}
type KVResponse_BatchDeleteCellResp struct {
	BatchDeleteCellResp *BatchDeleteCellResponse `protobuf:"bytes,7,opt,name=batch_delete_cell_resp,json=batchDeleteCellResp,oneof"`
}
type KVResponse_GetAllRowOfFamilyResp struct {
	GetAllRowOfFamilyResp *GetAllRowOfFamilyResponse `protobuf:"bytes,8,opt,name=get_all_row_of_family_resp,json=getAllRowOfFamilyResp,oneof"`
}
type KVResponse_DeleteAllRowOfFamilyResp struct {
	DeleteAllRowOfFamilyResp *DeleteAllRowOfFamilyResponse `protobuf:"bytes,9,opt,name=delete_all_row_of_family_resp,json=deleteAllRowOfFamilyResp,oneof"`
}
type KVResponse_GetOneRowOfFamilyResp struct {
	GetOneRowOfFamilyResp *GetOneRowOfFamilyResponse `protobuf:"bytes,10,opt,name=get_one_row_of_family_resp,json=getOneRowOfFamilyResp,oneof"`
}
type KVResponse_DeleteOneRowOfFamilyResp struct {
	DeleteOneRowOfFamilyResp *DeleteOneRowOfFamilyResponse `protobuf:"bytes,11,opt,name=delete_one_row_of_family_resp,json=deleteOneRowOfFamilyResp,oneof"`
}
type KVResponse_GetOneColumnOfFamilyResp struct {
	GetOneColumnOfFamilyResp *GetOneColumnOfFamilyResponse `protobuf:"bytes,12,opt,name=get_one_column_of_family_resp,json=getOneColumnOfFamilyResp,oneof"`
}

func (*KVResponse_GetCellResp) isKVResponse_Resp()              {}
func (*KVResponse_PutCellResp) isKVResponse_Resp()              {}
func (*KVResponse_DeleteCellResp) isKVResponse_Resp()           {}
func (*KVResponse_BatchGetCellResp) isKVResponse_Resp()         {}
func (*KVResponse_BatchPutCellResp) isKVResponse_Resp()         {}
func (*KVResponse_BatchDeleteCellResp) isKVResponse_Resp()      {}
func (*KVResponse_GetAllRowOfFamilyResp) isKVResponse_Resp()    {}
func (*KVResponse_DeleteAllRowOfFamilyResp) isKVResponse_Resp() {}
func (*KVResponse_GetOneRowOfFamilyResp) isKVResponse_Resp()    {}
func (*KVResponse_DeleteOneRowOfFamilyResp) isKVResponse_Resp() {}
func (*KVResponse_GetOneColumnOfFamilyResp) isKVResponse_Resp() {}

func (m *KVResponse) GetResp() isKVResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *KVResponse) GetHeader() *tiap_kvrpcpb.KVResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *KVResponse) GetGetCellResp() *GetCellResponse {
	if x, ok := m.GetResp().(*KVResponse_GetCellResp); ok {
		return x.GetCellResp
	}
	return nil
}

func (m *KVResponse) GetPutCellResp() *PutCellResponse {
	if x, ok := m.GetResp().(*KVResponse_PutCellResp); ok {
		return x.PutCellResp
	}
	return nil
}

func (m *KVResponse) GetDeleteCellResp() *DeleteCellResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteCellResp); ok {
		return x.DeleteCellResp
	}
	return nil
}

func (m *KVResponse) GetBatchGetCellResp() *BatchGetCellResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchGetCellResp); ok {
		return x.BatchGetCellResp
	}
	return nil
}

func (m *KVResponse) GetBatchPutCellResp() *BatchPutCellResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchPutCellResp); ok {
		return x.BatchPutCellResp
	}
	return nil
}

func (m *KVResponse) GetBatchDeleteCellResp() *BatchDeleteCellResponse {
	if x, ok := m.GetResp().(*KVResponse_BatchDeleteCellResp); ok {
		return x.BatchDeleteCellResp
	}
	return nil
}

func (m *KVResponse) GetGetAllRowOfFamilyResp() *GetAllRowOfFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_GetAllRowOfFamilyResp); ok {
		return x.GetAllRowOfFamilyResp
	}
	return nil
}

func (m *KVResponse) GetDeleteAllRowOfFamilyResp() *DeleteAllRowOfFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteAllRowOfFamilyResp); ok {
		return x.DeleteAllRowOfFamilyResp
	}
	return nil
}

func (m *KVResponse) GetGetOneRowOfFamilyResp() *GetOneRowOfFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_GetOneRowOfFamilyResp); ok {
		return x.GetOneRowOfFamilyResp
	}
	return nil
}

func (m *KVResponse) GetDeleteOneRowOfFamilyResp() *DeleteOneRowOfFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_DeleteOneRowOfFamilyResp); ok {
		return x.DeleteOneRowOfFamilyResp
	}
	return nil
}

func (m *KVResponse) GetGetOneColumnOfFamilyResp() *GetOneColumnOfFamilyResponse {
	if x, ok := m.GetResp().(*KVResponse_GetOneColumnOfFamilyResp); ok {
		return x.GetOneColumnOfFamilyResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVResponse_OneofMarshaler, _KVResponse_OneofUnmarshaler, _KVResponse_OneofSizer, []interface{}{
		(*KVResponse_GetCellResp)(nil),
		(*KVResponse_PutCellResp)(nil),
		(*KVResponse_DeleteCellResp)(nil),
		(*KVResponse_BatchGetCellResp)(nil),
		(*KVResponse_BatchPutCellResp)(nil),
		(*KVResponse_BatchDeleteCellResp)(nil),
		(*KVResponse_GetAllRowOfFamilyResp)(nil),
		(*KVResponse_DeleteAllRowOfFamilyResp)(nil),
		(*KVResponse_GetOneRowOfFamilyResp)(nil),
		(*KVResponse_DeleteOneRowOfFamilyResp)(nil),
		(*KVResponse_GetOneColumnOfFamilyResp)(nil),
	}
}

func _KVResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVResponse)
	// resp
	switch x := m.Resp.(type) {
	case *KVResponse_GetCellResp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCellResp); err != nil {
			return err
		}
	case *KVResponse_PutCellResp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutCellResp); err != nil {
			return err
		}
	case *KVResponse_DeleteCellResp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteCellResp); err != nil {
			return err
		}
	case *KVResponse_BatchGetCellResp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchGetCellResp); err != nil {
			return err
		}
	case *KVResponse_BatchPutCellResp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchPutCellResp); err != nil {
			return err
		}
	case *KVResponse_BatchDeleteCellResp:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchDeleteCellResp); err != nil {
			return err
		}
	case *KVResponse_GetAllRowOfFamilyResp:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetAllRowOfFamilyResp); err != nil {
			return err
		}
	case *KVResponse_DeleteAllRowOfFamilyResp:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteAllRowOfFamilyResp); err != nil {
			return err
		}
	case *KVResponse_GetOneRowOfFamilyResp:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneRowOfFamilyResp); err != nil {
			return err
		}
	case *KVResponse_DeleteOneRowOfFamilyResp:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteOneRowOfFamilyResp); err != nil {
			return err
		}
	case *KVResponse_GetOneColumnOfFamilyResp:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetOneColumnOfFamilyResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KVResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _KVResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVResponse)
	switch tag {
	case 2: // resp.get_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetCellResp{msg}
		return true, err
	case 3: // resp.put_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_PutCellResp{msg}
		return true, err
	case 4: // resp.delete_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteCellResp{msg}
		return true, err
	case 5: // resp.batch_get_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchGetCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchGetCellResp{msg}
		return true, err
	case 6: // resp.batch_put_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchPutCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchPutCellResp{msg}
		return true, err
	case 7: // resp.batch_delete_cell_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchDeleteCellResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_BatchDeleteCellResp{msg}
		return true, err
	case 8: // resp.get_all_row_of_family_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetAllRowOfFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetAllRowOfFamilyResp{msg}
		return true, err
	case 9: // resp.delete_all_row_of_family_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteAllRowOfFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteAllRowOfFamilyResp{msg}
		return true, err
	case 10: // resp.get_one_row_of_family_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneRowOfFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetOneRowOfFamilyResp{msg}
		return true, err
	case 11: // resp.delete_one_row_of_family_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteOneRowOfFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_DeleteOneRowOfFamilyResp{msg}
		return true, err
	case 12: // resp.get_one_column_of_family_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetOneColumnOfFamilyResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &KVResponse_GetOneColumnOfFamilyResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KVResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVResponse)
	// resp
	switch x := m.Resp.(type) {
	case *KVResponse_GetCellResp:
		s := proto.Size(x.GetCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_PutCellResp:
		s := proto.Size(x.PutCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteCellResp:
		s := proto.Size(x.DeleteCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchGetCellResp:
		s := proto.Size(x.BatchGetCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchPutCellResp:
		s := proto.Size(x.BatchPutCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_BatchDeleteCellResp:
		s := proto.Size(x.BatchDeleteCellResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_GetAllRowOfFamilyResp:
		s := proto.Size(x.GetAllRowOfFamilyResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteAllRowOfFamilyResp:
		s := proto.Size(x.DeleteAllRowOfFamilyResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_GetOneRowOfFamilyResp:
		s := proto.Size(x.GetOneRowOfFamilyResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_DeleteOneRowOfFamilyResp:
		s := proto.Size(x.DeleteOneRowOfFamilyResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVResponse_GetOneColumnOfFamilyResp:
		s := proto.Size(x.GetOneColumnOfFamilyResp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Cell struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	RowKey               []byte   `protobuf:"bytes,2,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	Column               string   `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	Version              int64    `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{2}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(dst, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Cell) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *Cell) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *Cell) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RowResult struct {
	RowKey               []byte        `protobuf:"bytes,1,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	ColumnInfo           []*ColumnInfo `protobuf:"bytes,2,rep,name=column_info,json=columnInfo" json:"column_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RowResult) Reset()         { *m = RowResult{} }
func (m *RowResult) String() string { return proto.CompactTextString(m) }
func (*RowResult) ProtoMessage()    {}
func (*RowResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{3}
}
func (m *RowResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowResult.Merge(dst, src)
}
func (m *RowResult) XXX_Size() int {
	return m.Size()
}
func (m *RowResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RowResult.DiscardUnknown(m)
}

var xxx_messageInfo_RowResult proto.InternalMessageInfo

func (m *RowResult) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *RowResult) GetColumnInfo() []*ColumnInfo {
	if m != nil {
		return m.ColumnInfo
	}
	return nil
}

type ColumnInfo struct {
	ColumnName           string   `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnValue          []byte   `protobuf:"bytes,2,opt,name=column_value,json=columnValue,proto3" json:"column_value,omitempty"`
	Version              int64    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnInfo) Reset()         { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()    {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{4}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(dst, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ColumnInfo) GetColumnValue() []byte {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

func (m *ColumnInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ColumnResult struct {
	ColumnName           string     `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	RowInfo              []*RowInfo `protobuf:"bytes,2,rep,name=row_info,json=rowInfo" json:"row_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ColumnResult) Reset()         { *m = ColumnResult{} }
func (m *ColumnResult) String() string { return proto.CompactTextString(m) }
func (*ColumnResult) ProtoMessage()    {}
func (*ColumnResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{5}
}
func (m *ColumnResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ColumnResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnResult.Merge(dst, src)
}
func (m *ColumnResult) XXX_Size() int {
	return m.Size()
}
func (m *ColumnResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnResult.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnResult proto.InternalMessageInfo

func (m *ColumnResult) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ColumnResult) GetRowInfo() []*RowInfo {
	if m != nil {
		return m.RowInfo
	}
	return nil
}

type RowInfo struct {
	RowKey               []byte   `protobuf:"bytes,1,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	ColumnValue          []byte   `protobuf:"bytes,2,opt,name=column_value,json=columnValue,proto3" json:"column_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowInfo) Reset()         { *m = RowInfo{} }
func (m *RowInfo) String() string { return proto.CompactTextString(m) }
func (*RowInfo) ProtoMessage()    {}
func (*RowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{6}
}
func (m *RowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowInfo.Merge(dst, src)
}
func (m *RowInfo) XXX_Size() int {
	return m.Size()
}
func (m *RowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RowInfo proto.InternalMessageInfo

func (m *RowInfo) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

func (m *RowInfo) GetColumnValue() []byte {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

type GetCellRequest struct {
	Cell                 *Cell    `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCellRequest) Reset()         { *m = GetCellRequest{} }
func (m *GetCellRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellRequest) ProtoMessage()    {}
func (*GetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{7}
}
func (m *GetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellRequest.Merge(dst, src)
}
func (m *GetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellRequest proto.InternalMessageInfo

func (m *GetCellRequest) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type GetCellResponse struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCellResponse) Reset()         { *m = GetCellResponse{} }
func (m *GetCellResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellResponse) ProtoMessage()    {}
func (*GetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{8}
}
func (m *GetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellResponse.Merge(dst, src)
}
func (m *GetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellResponse proto.InternalMessageInfo

func (m *GetCellResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutCellRequest struct {
	Cell                 *Cell    `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutCellRequest) Reset()         { *m = PutCellRequest{} }
func (m *PutCellRequest) String() string { return proto.CompactTextString(m) }
func (*PutCellRequest) ProtoMessage()    {}
func (*PutCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{9}
}
func (m *PutCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutCellRequest.Merge(dst, src)
}
func (m *PutCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutCellRequest proto.InternalMessageInfo

func (m *PutCellRequest) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *PutCellRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutCellResponse) Reset()         { *m = PutCellResponse{} }
func (m *PutCellResponse) String() string { return proto.CompactTextString(m) }
func (*PutCellResponse) ProtoMessage()    {}
func (*PutCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{10}
}
func (m *PutCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PutCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutCellResponse.Merge(dst, src)
}
func (m *PutCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *PutCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutCellResponse proto.InternalMessageInfo

type DeleteCellRequest struct {
	Cell                 *Cell    `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCellRequest) Reset()         { *m = DeleteCellRequest{} }
func (m *DeleteCellRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCellRequest) ProtoMessage()    {}
func (*DeleteCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{11}
}
func (m *DeleteCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCellRequest.Merge(dst, src)
}
func (m *DeleteCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCellRequest proto.InternalMessageInfo

func (m *DeleteCellRequest) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type DeleteCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCellResponse) Reset()         { *m = DeleteCellResponse{} }
func (m *DeleteCellResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCellResponse) ProtoMessage()    {}
func (*DeleteCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{12}
}
func (m *DeleteCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCellResponse.Merge(dst, src)
}
func (m *DeleteCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCellResponse proto.InternalMessageInfo

type BatchGetCellRequest struct {
	Cells                []*Cell  `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetCellRequest) Reset()         { *m = BatchGetCellRequest{} }
func (m *BatchGetCellRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetCellRequest) ProtoMessage()    {}
func (*BatchGetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{13}
}
func (m *BatchGetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchGetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetCellRequest.Merge(dst, src)
}
func (m *BatchGetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetCellRequest proto.InternalMessageInfo

func (m *BatchGetCellRequest) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type BatchGetCellResponse struct {
	Values               [][]byte `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetCellResponse) Reset()         { *m = BatchGetCellResponse{} }
func (m *BatchGetCellResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetCellResponse) ProtoMessage()    {}
func (*BatchGetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{14}
}
func (m *BatchGetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchGetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetCellResponse.Merge(dst, src)
}
func (m *BatchGetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetCellResponse proto.InternalMessageInfo

func (m *BatchGetCellResponse) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type BatchPutCellRequest struct {
	Cells                []*Cell  `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	Values               [][]byte `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchPutCellRequest) Reset()         { *m = BatchPutCellRequest{} }
func (m *BatchPutCellRequest) String() string { return proto.CompactTextString(m) }
func (*BatchPutCellRequest) ProtoMessage()    {}
func (*BatchPutCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{15}
}
func (m *BatchPutCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPutCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPutCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchPutCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPutCellRequest.Merge(dst, src)
}
func (m *BatchPutCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchPutCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPutCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPutCellRequest proto.InternalMessageInfo

func (m *BatchPutCellRequest) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *BatchPutCellRequest) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type BatchPutCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchPutCellResponse) Reset()         { *m = BatchPutCellResponse{} }
func (m *BatchPutCellResponse) String() string { return proto.CompactTextString(m) }
func (*BatchPutCellResponse) ProtoMessage()    {}
func (*BatchPutCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{16}
}
func (m *BatchPutCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPutCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPutCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchPutCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPutCellResponse.Merge(dst, src)
}
func (m *BatchPutCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchPutCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPutCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPutCellResponse proto.InternalMessageInfo

type BatchDeleteCellRequest struct {
	Cells                []*Cell  `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeleteCellRequest) Reset()         { *m = BatchDeleteCellRequest{} }
func (m *BatchDeleteCellRequest) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteCellRequest) ProtoMessage()    {}
func (*BatchDeleteCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{17}
}
func (m *BatchDeleteCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDeleteCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDeleteCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchDeleteCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteCellRequest.Merge(dst, src)
}
func (m *BatchDeleteCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchDeleteCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteCellRequest proto.InternalMessageInfo

func (m *BatchDeleteCellRequest) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type BatchDeleteCellResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeleteCellResponse) Reset()         { *m = BatchDeleteCellResponse{} }
func (m *BatchDeleteCellResponse) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteCellResponse) ProtoMessage()    {}
func (*BatchDeleteCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{18}
}
func (m *BatchDeleteCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDeleteCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDeleteCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BatchDeleteCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteCellResponse.Merge(dst, src)
}
func (m *BatchDeleteCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchDeleteCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteCellResponse proto.InternalMessageInfo

type GetAllRowOfFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllRowOfFamilyRequest) Reset()         { *m = GetAllRowOfFamilyRequest{} }
func (m *GetAllRowOfFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRowOfFamilyRequest) ProtoMessage()    {}
func (*GetAllRowOfFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{19}
}
func (m *GetAllRowOfFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRowOfFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRowOfFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllRowOfFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRowOfFamilyRequest.Merge(dst, src)
}
func (m *GetAllRowOfFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRowOfFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRowOfFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRowOfFamilyRequest proto.InternalMessageInfo

func (m *GetAllRowOfFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type GetAllRowOfFamilyResponse struct {
	Rows                 []*RowResult `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetAllRowOfFamilyResponse) Reset()         { *m = GetAllRowOfFamilyResponse{} }
func (m *GetAllRowOfFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllRowOfFamilyResponse) ProtoMessage()    {}
func (*GetAllRowOfFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{20}
}
func (m *GetAllRowOfFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRowOfFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRowOfFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllRowOfFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRowOfFamilyResponse.Merge(dst, src)
}
func (m *GetAllRowOfFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRowOfFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRowOfFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRowOfFamilyResponse proto.InternalMessageInfo

func (m *GetAllRowOfFamilyResponse) GetRows() []*RowResult {
	if m != nil {
		return m.Rows
	}
	return nil
}

type DeleteAllRowOfFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllRowOfFamilyRequest) Reset()         { *m = DeleteAllRowOfFamilyRequest{} }
func (m *DeleteAllRowOfFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAllRowOfFamilyRequest) ProtoMessage()    {}
func (*DeleteAllRowOfFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{21}
}
func (m *DeleteAllRowOfFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllRowOfFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllRowOfFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAllRowOfFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllRowOfFamilyRequest.Merge(dst, src)
}
func (m *DeleteAllRowOfFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllRowOfFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllRowOfFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllRowOfFamilyRequest proto.InternalMessageInfo

func (m *DeleteAllRowOfFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type DeleteAllRowOfFamilyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllRowOfFamilyResponse) Reset()         { *m = DeleteAllRowOfFamilyResponse{} }
func (m *DeleteAllRowOfFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAllRowOfFamilyResponse) ProtoMessage()    {}
func (*DeleteAllRowOfFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{22}
}
func (m *DeleteAllRowOfFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllRowOfFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllRowOfFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAllRowOfFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllRowOfFamilyResponse.Merge(dst, src)
}
func (m *DeleteAllRowOfFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllRowOfFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllRowOfFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllRowOfFamilyResponse proto.InternalMessageInfo

type GetOneRowOfFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	RowKey               []byte   `protobuf:"bytes,2,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOneRowOfFamilyRequest) Reset()         { *m = GetOneRowOfFamilyRequest{} }
func (m *GetOneRowOfFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GetOneRowOfFamilyRequest) ProtoMessage()    {}
func (*GetOneRowOfFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{23}
}
func (m *GetOneRowOfFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneRowOfFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneRowOfFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneRowOfFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneRowOfFamilyRequest.Merge(dst, src)
}
func (m *GetOneRowOfFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneRowOfFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneRowOfFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneRowOfFamilyRequest proto.InternalMessageInfo

func (m *GetOneRowOfFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *GetOneRowOfFamilyRequest) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

type GetOneRowOfFamilyResponse struct {
	Row                  *RowResult `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetOneRowOfFamilyResponse) Reset()         { *m = GetOneRowOfFamilyResponse{} }
func (m *GetOneRowOfFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GetOneRowOfFamilyResponse) ProtoMessage()    {}
func (*GetOneRowOfFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{24}
}
func (m *GetOneRowOfFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneRowOfFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneRowOfFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneRowOfFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneRowOfFamilyResponse.Merge(dst, src)
}
func (m *GetOneRowOfFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneRowOfFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneRowOfFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneRowOfFamilyResponse proto.InternalMessageInfo

func (m *GetOneRowOfFamilyResponse) GetRow() *RowResult {
	if m != nil {
		return m.Row
	}
	return nil
}

type DeleteOneRowOfFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	RowKey               []byte   `protobuf:"bytes,2,opt,name=row_key,json=rowKey,proto3" json:"row_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOneRowOfFamilyRequest) Reset()         { *m = DeleteOneRowOfFamilyRequest{} }
func (m *DeleteOneRowOfFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOneRowOfFamilyRequest) ProtoMessage()    {}
func (*DeleteOneRowOfFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{25}
}
func (m *DeleteOneRowOfFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOneRowOfFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOneRowOfFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteOneRowOfFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOneRowOfFamilyRequest.Merge(dst, src)
}
func (m *DeleteOneRowOfFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOneRowOfFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOneRowOfFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOneRowOfFamilyRequest proto.InternalMessageInfo

func (m *DeleteOneRowOfFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *DeleteOneRowOfFamilyRequest) GetRowKey() []byte {
	if m != nil {
		return m.RowKey
	}
	return nil
}

type DeleteOneRowOfFamilyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOneRowOfFamilyResponse) Reset()         { *m = DeleteOneRowOfFamilyResponse{} }
func (m *DeleteOneRowOfFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteOneRowOfFamilyResponse) ProtoMessage()    {}
func (*DeleteOneRowOfFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{26}
}
func (m *DeleteOneRowOfFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOneRowOfFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOneRowOfFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteOneRowOfFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOneRowOfFamilyResponse.Merge(dst, src)
}
func (m *DeleteOneRowOfFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOneRowOfFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOneRowOfFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOneRowOfFamilyResponse proto.InternalMessageInfo

type GetOneColumnOfFamilyRequest struct {
	Family               string   `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Column               string   `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	StartRowKey          []byte   `protobuf:"bytes,3,opt,name=start_row_key,json=startRowKey,proto3" json:"start_row_key,omitempty"`
	EndRowKey            []byte   `protobuf:"bytes,4,opt,name=end_row_key,json=endRowKey,proto3" json:"end_row_key,omitempty"`
	Limit                int64    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOneColumnOfFamilyRequest) Reset()         { *m = GetOneColumnOfFamilyRequest{} }
func (m *GetOneColumnOfFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GetOneColumnOfFamilyRequest) ProtoMessage()    {}
func (*GetOneColumnOfFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{27}
}
func (m *GetOneColumnOfFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneColumnOfFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneColumnOfFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneColumnOfFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneColumnOfFamilyRequest.Merge(dst, src)
}
func (m *GetOneColumnOfFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneColumnOfFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneColumnOfFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneColumnOfFamilyRequest proto.InternalMessageInfo

func (m *GetOneColumnOfFamilyRequest) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *GetOneColumnOfFamilyRequest) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *GetOneColumnOfFamilyRequest) GetStartRowKey() []byte {
	if m != nil {
		return m.StartRowKey
	}
	return nil
}

func (m *GetOneColumnOfFamilyRequest) GetEndRowKey() []byte {
	if m != nil {
		return m.EndRowKey
	}
	return nil
}

func (m *GetOneColumnOfFamilyRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetOneColumnOfFamilyResponse struct {
	Column               *ColumnResult `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	LastRowKey           []byte        `protobuf:"bytes,2,opt,name=last_row_key,json=lastRowKey,proto3" json:"last_row_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetOneColumnOfFamilyResponse) Reset()         { *m = GetOneColumnOfFamilyResponse{} }
func (m *GetOneColumnOfFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GetOneColumnOfFamilyResponse) ProtoMessage()    {}
func (*GetOneColumnOfFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b, []int{28}
}
func (m *GetOneColumnOfFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneColumnOfFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneColumnOfFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOneColumnOfFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneColumnOfFamilyResponse.Merge(dst, src)
}
func (m *GetOneColumnOfFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneColumnOfFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneColumnOfFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneColumnOfFamilyResponse proto.InternalMessageInfo

func (m *GetOneColumnOfFamilyResponse) GetColumn() *ColumnResult {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *GetOneColumnOfFamilyResponse) GetLastRowKey() []byte {
	if m != nil {
		return m.LastRowKey
	}
	return nil
}

func init() {
	proto.RegisterType((*KVRequest)(nil), "tiap_hbaselike_kvrpcpb.KVRequest")
	proto.RegisterType((*KVResponse)(nil), "tiap_hbaselike_kvrpcpb.KVResponse")
	proto.RegisterType((*Cell)(nil), "tiap_hbaselike_kvrpcpb.Cell")
	proto.RegisterType((*RowResult)(nil), "tiap_hbaselike_kvrpcpb.RowResult")
	proto.RegisterType((*ColumnInfo)(nil), "tiap_hbaselike_kvrpcpb.ColumnInfo")
	proto.RegisterType((*ColumnResult)(nil), "tiap_hbaselike_kvrpcpb.ColumnResult")
	proto.RegisterType((*RowInfo)(nil), "tiap_hbaselike_kvrpcpb.RowInfo")
	proto.RegisterType((*GetCellRequest)(nil), "tiap_hbaselike_kvrpcpb.GetCellRequest")
	proto.RegisterType((*GetCellResponse)(nil), "tiap_hbaselike_kvrpcpb.GetCellResponse")
	proto.RegisterType((*PutCellRequest)(nil), "tiap_hbaselike_kvrpcpb.PutCellRequest")
	proto.RegisterType((*PutCellResponse)(nil), "tiap_hbaselike_kvrpcpb.PutCellResponse")
	proto.RegisterType((*DeleteCellRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteCellRequest")
	proto.RegisterType((*DeleteCellResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteCellResponse")
	proto.RegisterType((*BatchGetCellRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchGetCellRequest")
	proto.RegisterType((*BatchGetCellResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchGetCellResponse")
	proto.RegisterType((*BatchPutCellRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchPutCellRequest")
	proto.RegisterType((*BatchPutCellResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchPutCellResponse")
	proto.RegisterType((*BatchDeleteCellRequest)(nil), "tiap_hbaselike_kvrpcpb.BatchDeleteCellRequest")
	proto.RegisterType((*BatchDeleteCellResponse)(nil), "tiap_hbaselike_kvrpcpb.BatchDeleteCellResponse")
	proto.RegisterType((*GetAllRowOfFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.GetAllRowOfFamilyRequest")
	proto.RegisterType((*GetAllRowOfFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.GetAllRowOfFamilyResponse")
	proto.RegisterType((*DeleteAllRowOfFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteAllRowOfFamilyRequest")
	proto.RegisterType((*DeleteAllRowOfFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteAllRowOfFamilyResponse")
	proto.RegisterType((*GetOneRowOfFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.GetOneRowOfFamilyRequest")
	proto.RegisterType((*GetOneRowOfFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.GetOneRowOfFamilyResponse")
	proto.RegisterType((*DeleteOneRowOfFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.DeleteOneRowOfFamilyRequest")
	proto.RegisterType((*DeleteOneRowOfFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.DeleteOneRowOfFamilyResponse")
	proto.RegisterType((*GetOneColumnOfFamilyRequest)(nil), "tiap_hbaselike_kvrpcpb.GetOneColumnOfFamilyRequest")
	proto.RegisterType((*GetOneColumnOfFamilyResponse)(nil), "tiap_hbaselike_kvrpcpb.GetOneColumnOfFamilyResponse")
}
func (m *KVRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KVRequest_GetCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetCellReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetCellReq.Size()))
		n3, err := m.GetCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *KVRequest_PutCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PutCellReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.PutCellReq.Size()))
		n4, err := m.PutCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *KVRequest_DeleteCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteCellReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteCellReq.Size()))
		n5, err := m.DeleteCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *KVRequest_BatchGetCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchGetCellReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchGetCellReq.Size()))
		n6, err := m.BatchGetCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *KVRequest_BatchPutCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchPutCellReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchPutCellReq.Size()))
		n7, err := m.BatchPutCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *KVRequest_BatchDeleteCellReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchDeleteCellReq != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchDeleteCellReq.Size()))
		n8, err := m.BatchDeleteCellReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *KVRequest_GetAllRowOfFamilyReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetAllRowOfFamilyReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetAllRowOfFamilyReq.Size()))
		n9, err := m.GetAllRowOfFamilyReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *KVRequest_DeleteAllRowOfFamilyReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteAllRowOfFamilyReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteAllRowOfFamilyReq.Size()))
		n10, err := m.DeleteAllRowOfFamilyReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *KVRequest_GetOneRowOfFamilyReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneRowOfFamilyReq != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneRowOfFamilyReq.Size()))
		n11, err := m.GetOneRowOfFamilyReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *KVRequest_DeleteOneRowOfFamilyReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteOneRowOfFamilyReq != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteOneRowOfFamilyReq.Size()))
		n12, err := m.DeleteOneRowOfFamilyReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *KVRequest_GetOneColumnOfFamilyReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneColumnOfFamilyReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneColumnOfFamilyReq.Size()))
		n13, err := m.GetOneColumnOfFamilyReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *KVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Header.Size()))
		n14, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Resp != nil {
		nn15, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KVResponse_GetCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetCellResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetCellResp.Size()))
		n16, err := m.GetCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *KVResponse_PutCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PutCellResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.PutCellResp.Size()))
		n17, err := m.PutCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *KVResponse_DeleteCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteCellResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteCellResp.Size()))
		n18, err := m.DeleteCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *KVResponse_BatchGetCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchGetCellResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchGetCellResp.Size()))
		n19, err := m.BatchGetCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *KVResponse_BatchPutCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchPutCellResp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchPutCellResp.Size()))
		n20, err := m.BatchPutCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *KVResponse_BatchDeleteCellResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchDeleteCellResp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.BatchDeleteCellResp.Size()))
		n21, err := m.BatchDeleteCellResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *KVResponse_GetAllRowOfFamilyResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetAllRowOfFamilyResp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetAllRowOfFamilyResp.Size()))
		n22, err := m.GetAllRowOfFamilyResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *KVResponse_DeleteAllRowOfFamilyResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteAllRowOfFamilyResp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteAllRowOfFamilyResp.Size()))
		n23, err := m.DeleteAllRowOfFamilyResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *KVResponse_GetOneRowOfFamilyResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneRowOfFamilyResp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneRowOfFamilyResp.Size()))
		n24, err := m.GetOneRowOfFamilyResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *KVResponse_DeleteOneRowOfFamilyResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteOneRowOfFamilyResp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.DeleteOneRowOfFamilyResp.Size()))
		n25, err := m.DeleteOneRowOfFamilyResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *KVResponse_GetOneColumnOfFamilyResp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetOneColumnOfFamilyResp != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.GetOneColumnOfFamilyResp.Size()))
		n26, err := m.GetOneColumnOfFamilyResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if len(m.Column) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Column)))
		i += copy(dAtA[i:], m.Column)
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if len(m.ColumnInfo) > 0 {
		for _, msg := range m.ColumnInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if len(m.ColumnValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnValue)))
		i += copy(dAtA[i:], m.ColumnValue)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ColumnResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if len(m.RowInfo) > 0 {
		for _, msg := range m.RowInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if len(m.ColumnValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.ColumnValue)))
		i += copy(dAtA[i:], m.ColumnValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Cell.Size()))
		n27, err := m.Cell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Cell.Size()))
		n28, err := m.Cell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Cell.Size()))
		n29, err := m.Cell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchGetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchGetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPutCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPutCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPutCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPutCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDeleteCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDeleteCellRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDeleteCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDeleteCellResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllRowOfFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRowOfFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllRowOfFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRowOfFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAllRowOfFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllRowOfFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAllRowOfFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllRowOfFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneRowOfFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneRowOfFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneRowOfFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneRowOfFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Row != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Row.Size()))
		n30, err := m.Row.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteOneRowOfFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOneRowOfFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.RowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.RowKey)))
		i += copy(dAtA[i:], m.RowKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteOneRowOfFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOneRowOfFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneColumnOfFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneColumnOfFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.Column) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.Column)))
		i += copy(dAtA[i:], m.Column)
	}
	if len(m.StartRowKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.StartRowKey)))
		i += copy(dAtA[i:], m.StartRowKey)
	}
	if len(m.EndRowKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.EndRowKey)))
		i += copy(dAtA[i:], m.EndRowKey)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOneColumnOfFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneColumnOfFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Column != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(m.Column.Size()))
		n31, err := m.Column.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.LastRowKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTiapHbaselikeKvrpcpb(dAtA, i, uint64(len(m.LastRowKey)))
		i += copy(dAtA[i:], m.LastRowKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTiapHbaselikeKvrpcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KVRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVRequest_GetCellReq) Size() (n int) {
	var l int
	_ = l
	if m.GetCellReq != nil {
		l = m.GetCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_PutCellReq) Size() (n int) {
	var l int
	_ = l
	if m.PutCellReq != nil {
		l = m.PutCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteCellReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteCellReq != nil {
		l = m.DeleteCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchGetCellReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchGetCellReq != nil {
		l = m.BatchGetCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchPutCellReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchPutCellReq != nil {
		l = m.BatchPutCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_BatchDeleteCellReq) Size() (n int) {
	var l int
	_ = l
	if m.BatchDeleteCellReq != nil {
		l = m.BatchDeleteCellReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_GetAllRowOfFamilyReq) Size() (n int) {
	var l int
	_ = l
	if m.GetAllRowOfFamilyReq != nil {
		l = m.GetAllRowOfFamilyReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteAllRowOfFamilyReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteAllRowOfFamilyReq != nil {
		l = m.DeleteAllRowOfFamilyReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_GetOneRowOfFamilyReq) Size() (n int) {
	var l int
	_ = l
	if m.GetOneRowOfFamilyReq != nil {
		l = m.GetOneRowOfFamilyReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_DeleteOneRowOfFamilyReq) Size() (n int) {
	var l int
	_ = l
	if m.DeleteOneRowOfFamilyReq != nil {
		l = m.DeleteOneRowOfFamilyReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVRequest_GetOneColumnOfFamilyReq) Size() (n int) {
	var l int
	_ = l
	if m.GetOneColumnOfFamilyReq != nil {
		l = m.GetOneColumnOfFamilyReq.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVResponse_GetCellResp) Size() (n int) {
	var l int
	_ = l
	if m.GetCellResp != nil {
		l = m.GetCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_PutCellResp) Size() (n int) {
	var l int
	_ = l
	if m.PutCellResp != nil {
		l = m.PutCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteCellResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteCellResp != nil {
		l = m.DeleteCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchGetCellResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchGetCellResp != nil {
		l = m.BatchGetCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchPutCellResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchPutCellResp != nil {
		l = m.BatchPutCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_BatchDeleteCellResp) Size() (n int) {
	var l int
	_ = l
	if m.BatchDeleteCellResp != nil {
		l = m.BatchDeleteCellResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_GetAllRowOfFamilyResp) Size() (n int) {
	var l int
	_ = l
	if m.GetAllRowOfFamilyResp != nil {
		l = m.GetAllRowOfFamilyResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteAllRowOfFamilyResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteAllRowOfFamilyResp != nil {
		l = m.DeleteAllRowOfFamilyResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_GetOneRowOfFamilyResp) Size() (n int) {
	var l int
	_ = l
	if m.GetOneRowOfFamilyResp != nil {
		l = m.GetOneRowOfFamilyResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_DeleteOneRowOfFamilyResp) Size() (n int) {
	var l int
	_ = l
	if m.DeleteOneRowOfFamilyResp != nil {
		l = m.DeleteOneRowOfFamilyResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *KVResponse_GetOneColumnOfFamilyResp) Size() (n int) {
	var l int
	_ = l
	if m.GetOneColumnOfFamilyResp != nil {
		l = m.GetOneColumnOfFamilyResp.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	return n
}
func (m *Cell) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Column)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if len(m.ColumnInfo) > 0 {
		for _, e := range m.ColumnInfo {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.ColumnValue)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if len(m.RowInfo) > 0 {
		for _, e := range m.RowInfo {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.ColumnValue)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCellRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCellResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutCellRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCellRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetCellRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetCellResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPutCellRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPutCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDeleteCellRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDeleteCellResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllRowOfFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllRowOfFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllRowOfFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllRowOfFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneRowOfFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneRowOfFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOneRowOfFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.RowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOneRowOfFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneColumnOfFamilyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.Column)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.StartRowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.EndRowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovTiapHbaselikeKvrpcpb(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOneColumnOfFamilyResponse) Size() (n int) {
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	l = len(m.LastRowKey)
	if l > 0 {
		n += 1 + l + sovTiapHbaselikeKvrpcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTiapHbaselikeKvrpcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTiapHbaselikeKvrpcpb(x uint64) (n int) {
	return sovTiapHbaselikeKvrpcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KVRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_kvrpcpb.KVRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetCellReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_PutCellReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteCellReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchGetCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchGetCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchGetCellReq{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPutCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchPutCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchPutCellReq{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDeleteCellReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchDeleteCellRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_BatchDeleteCellReq{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAllRowOfFamilyReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetAllRowOfFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetAllRowOfFamilyReq{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAllRowOfFamilyReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteAllRowOfFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteAllRowOfFamilyReq{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneRowOfFamilyReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneRowOfFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetOneRowOfFamilyReq{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteOneRowOfFamilyReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteOneRowOfFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_DeleteOneRowOfFamilyReq{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneColumnOfFamilyReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneColumnOfFamilyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &KVRequest_GetOneColumnOfFamilyReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &tiap_kvrpcpb.KVResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetCellResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_PutCellResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteCellResp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchGetCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchGetCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchGetCellResp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPutCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchPutCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchPutCellResp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDeleteCellResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchDeleteCellResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_BatchDeleteCellResp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAllRowOfFamilyResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetAllRowOfFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetAllRowOfFamilyResp{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAllRowOfFamilyResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteAllRowOfFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteAllRowOfFamilyResp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneRowOfFamilyResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneRowOfFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetOneRowOfFamilyResp{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteOneRowOfFamilyResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteOneRowOfFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_DeleteOneRowOfFamilyResp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOneColumnOfFamilyResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOneColumnOfFamilyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &KVResponse_GetOneColumnOfFamilyResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnInfo = append(m.ColumnInfo, &ColumnInfo{})
			if err := m.ColumnInfo[len(m.ColumnInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnValue = append(m.ColumnValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ColumnValue == nil {
				m.ColumnValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowInfo = append(m.RowInfo, &RowInfo{})
			if err := m.RowInfo[len(m.RowInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnValue = append(m.ColumnValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ColumnValue == nil {
				m.ColumnValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPutCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPutCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPutCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPutCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPutCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPutCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDeleteCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDeleteCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDeleteCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDeleteCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDeleteCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDeleteCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRowOfFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRowOfFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRowOfFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRowOfFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRowOfFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRowOfFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &RowResult{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllRowOfFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllRowOfFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllRowOfFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllRowOfFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllRowOfFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllRowOfFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneRowOfFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneRowOfFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneRowOfFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneRowOfFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneRowOfFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneRowOfFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &RowResult{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOneRowOfFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOneRowOfFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOneRowOfFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowKey = append(m.RowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RowKey == nil {
				m.RowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOneRowOfFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOneRowOfFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOneRowOfFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneColumnOfFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneColumnOfFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneColumnOfFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartRowKey = append(m.StartRowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartRowKey == nil {
				m.StartRowKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndRowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndRowKey = append(m.EndRowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndRowKey == nil {
				m.EndRowKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneColumnOfFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneColumnOfFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneColumnOfFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Column == nil {
				m.Column = &ColumnResult{}
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastRowKey = append(m.LastRowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LastRowKey == nil {
				m.LastRowKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTiapHbaselikeKvrpcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTiapHbaselikeKvrpcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTiapHbaselikeKvrpcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTiapHbaselikeKvrpcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTiapHbaselikeKvrpcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTiapHbaselikeKvrpcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTiapHbaselikeKvrpcpb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tiap_hbaselike_kvrpcpb.proto", fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b)
}

var fileDescriptor_tiap_hbaselike_kvrpcpb_fca95cbd1a13894b = []byte{
	// 1127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x8e, 0xe3, 0x9f, 0xd4, 0xc7, 0xce, 0x4f, 0x27, 0xae, 0xe3, 0xa4, 0xae, 0x9b, 0x8e, 0x10,
	0x29, 0x3f, 0x72, 0xdb, 0xa4, 0xe1, 0x02, 0x71, 0x83, 0x43, 0x81, 0x12, 0x68, 0xab, 0x45, 0x8a,
	0x10, 0x12, 0xb2, 0xd6, 0xf6, 0xd8, 0x31, 0x5e, 0xef, 0x6e, 0x76, 0xd7, 0xb1, 0x72, 0xc3, 0x2b,
	0x70, 0xcb, 0x1b, 0xf0, 0x00, 0xbc, 0x04, 0x97, 0x3c, 0x02, 0x0a, 0x2f, 0x82, 0xe6, 0x67, 0xff,
	0x67, 0xd6, 0x76, 0xd4, 0xbb, 0xcc, 0x39, 0x67, 0xbe, 0xef, 0x7c, 0xc7, 0x3b, 0xdf, 0x8c, 0x02,
	0x4d, 0x6f, 0xac, 0xdb, 0xdd, 0xcb, 0x9e, 0xee, 0x12, 0x63, 0x3c, 0x21, 0xdd, 0xc9, 0xb5, 0x63,
	0xf7, 0xed, 0x5e, 0xdb, 0x76, 0x2c, 0xcf, 0x42, 0x75, 0x79, 0xf6, 0xa0, 0x36, 0xb2, 0x46, 0x16,
	0x2b, 0x79, 0x46, 0xff, 0xe2, 0xd5, 0x07, 0x88, 0x55, 0xc7, 0x10, 0xf0, 0xef, 0x65, 0x28, 0x9f,
	0x5f, 0x68, 0xe4, 0x6a, 0x46, 0x5c, 0x0f, 0x9d, 0x42, 0xe9, 0x92, 0xe8, 0x03, 0xe2, 0x34, 0x72,
	0x87, 0xb9, 0xa7, 0x95, 0xe3, 0x47, 0xed, 0xd8, 0x96, 0xa0, 0xf0, 0x5b, 0x56, 0xa4, 0x89, 0x62,
	0xf4, 0x1d, 0x54, 0x47, 0xc4, 0xeb, 0xf6, 0x89, 0x61, 0x74, 0x1d, 0x72, 0xd5, 0x58, 0x67, 0x9b,
	0x3f, 0x6c, 0x2b, 0x7a, 0xff, 0x86, 0x78, 0x67, 0xc4, 0x30, 0x7c, 0xac, 0x35, 0x0d, 0x46, 0x41,
	0x84, 0x62, 0xd9, 0xb3, 0x08, 0x56, 0x3e, 0x1b, 0xeb, 0xdd, 0x2c, 0x89, 0x65, 0x07, 0x11, 0xf4,
	0x23, 0x6c, 0x0f, 0x88, 0x41, 0x3c, 0x12, 0xc2, 0x15, 0x18, 0xdc, 0x47, 0x2a, 0xb8, 0xaf, 0x58,
	0x79, 0x1c, 0x71, 0x73, 0x10, 0x0d, 0xa2, 0x9f, 0x01, 0xf5, 0x74, 0xaf, 0x7f, 0xd9, 0x8d, 0x49,
	0x2e, 0x32, 0xdc, 0x4f, 0x54, 0xb8, 0x1d, 0xba, 0x23, 0xa5, 0x7b, 0xbb, 0x17, 0x0f, 0x87, 0xd8,
	0xb1, 0x11, 0x94, 0x96, 0xc0, 0x4e, 0xcd, 0x81, 0x63, 0x87, 0x61, 0xd4, 0x87, 0x07, 0x1c, 0x3b,
	0x39, 0x92, 0x0d, 0x06, 0xdf, 0xce, 0x84, 0x97, 0xcd, 0x85, 0xb7, 0x1a, 0xcb, 0xa0, 0x09, 0xec,
	0xd3, 0xb1, 0xe8, 0x14, 0xda, 0x9a, 0x77, 0xad, 0x61, 0x77, 0xa8, 0x4f, 0xc7, 0xc6, 0x0d, 0x23,
	0xba, 0xc7, 0x88, 0x9e, 0x67, 0x7c, 0x16, 0x5f, 0x1a, 0x86, 0x66, 0xcd, 0xdf, 0x0e, 0xbf, 0x66,
	0x9b, 0x42, 0xaa, 0xda, 0x48, 0x92, 0x43, 0x1e, 0x34, 0x85, 0x16, 0x39, 0x5f, 0x99, 0xf1, 0x9d,
	0x64, 0xff, 0xd6, 0x2a, 0xca, 0xbd, 0x81, 0x3c, 0xed, 0x4b, 0xb4, 0x4c, 0x22, 0xa1, 0x84, 0x85,
	0x12, 0xdf, 0x9a, 0x44, 0x29, 0x31, 0x95, 0x8b, 0x48, 0x94, 0xf3, 0x55, 0x96, 0x91, 0xa8, 0xa2,
	0x14, 0x12, 0xa5, 0xac, 0xbe, 0xc4, 0xbe, 0x65, 0xcc, 0xa6, 0x66, 0x82, 0xb5, 0x9a, 0xcd, 0xca,
	0x55, 0x9e, 0xb1, 0x9d, 0x12, 0xd6, 0x91, 0x3c, 0xdd, 0x29, 0x42, 0xde, 0x21, 0x57, 0xf8, 0xaf,
	0x32, 0x00, 0x35, 0x1a, 0xd7, 0xb6, 0x4c, 0x97, 0xa0, 0xcf, 0x12, 0x96, 0xd4, 0x4a, 0x5b, 0x12,
	0xaf, 0x4c, 0x78, 0xd2, 0x0f, 0xb0, 0x19, 0x39, 0xa0, 0xae, 0x2d, 0x4c, 0xe9, 0x68, 0xa1, 0x29,
	0x09, 0xb4, 0x35, 0xad, 0x32, 0x0a, 0x43, 0x14, 0x2e, 0x72, 0x26, 0x5d, 0x5b, 0xf8, 0xd2, 0xd1,
	0x42, 0x5f, 0x0a, 0xe1, 0xec, 0x30, 0x84, 0x2e, 0x60, 0x27, 0x7e, 0x0c, 0x5d, 0x5b, 0x58, 0xd3,
	0xc7, 0xcb, 0x58, 0x53, 0x00, 0xba, 0x35, 0x88, 0x45, 0xd1, 0x2f, 0xb0, 0x9b, 0x32, 0x27, 0xd7,
	0x16, 0xee, 0xf4, 0xe9, 0x72, 0xee, 0x14, 0x80, 0xef, 0xf4, 0x12, 0xf1, 0x10, 0x3e, 0x3e, 0x8b,
	0xd2, 0x12, 0xf0, 0xe9, 0x81, 0xec, 0xf4, 0x12, 0x71, 0x34, 0x84, 0xba, 0xcc, 0xa2, 0x5c, 0x5b,
	0x78, 0xd4, 0xb3, 0xa5, 0x3d, 0x2a, 0x20, 0xd9, 0xed, 0xa5, 0x53, 0xc8, 0x84, 0x03, 0x95, 0x4b,
	0xb9, 0xb6, 0xb0, 0xa9, 0x17, 0x2b, 0xd8, 0x54, 0xc0, 0xf6, 0x60, 0x24, 0x4b, 0xa2, 0x39, 0x3c,
	0xca, 0x30, 0x2a, 0xd7, 0x16, 0x4e, 0xf5, 0x72, 0x35, 0xa7, 0x0a, 0x58, 0x1b, 0x03, 0x45, 0xde,
	0x17, 0x2a, 0xf3, 0x0e, 0xd7, 0x16, 0x66, 0xf5, 0x62, 0x05, 0xb3, 0x8a, 0x09, 0x4d, 0x27, 0x23,
	0x42, 0x15, 0x94, 0x95, 0x65, 0x84, 0x2a, 0x59, 0x1b, 0x03, 0x45, 0x9e, 0x12, 0x67, 0x38, 0x96,
	0x6b, 0x0b, 0xcb, 0x7a, 0xb9, 0x9a, 0x65, 0x85, 0xc4, 0x23, 0x45, 0xbe, 0x53, 0x82, 0x02, 0xc5,
	0xc7, 0x63, 0x28, 0xd0, 0xcf, 0x0b, 0xd5, 0xa1, 0xc4, 0x69, 0x99, 0x5d, 0x95, 0x35, 0xb1, 0x42,
	0x7b, 0xb0, 0x41, 0xc7, 0x31, 0x21, 0x37, 0xcc, 0x88, 0xaa, 0x5a, 0xc9, 0xb1, 0xe6, 0xe7, 0xe4,
	0x86, 0x6e, 0xe0, 0x1d, 0x33, 0x47, 0x29, 0x6b, 0x62, 0x85, 0x1a, 0xb0, 0x71, 0x4d, 0x1c, 0x77,
	0x6c, 0x99, 0xcc, 0x18, 0xf2, 0x9a, 0xbf, 0xc4, 0x63, 0x28, 0x6b, 0xd6, 0x5c, 0x23, 0xee, 0xcc,
	0xf0, 0xa2, 0xb8, 0xb9, 0x18, 0xee, 0x19, 0x54, 0xc4, 0x24, 0xc6, 0xe6, 0xd0, 0x6a, 0xac, 0x1f,
	0xe6, 0x9f, 0x56, 0x8e, 0xb1, 0x4a, 0x3f, 0x57, 0xf6, 0xda, 0x1c, 0x5a, 0x1a, 0xf4, 0x83, 0xbf,
	0xf1, 0xaf, 0x00, 0x61, 0x06, 0x3d, 0x0e, 0x20, 0x4d, 0x7d, 0x4a, 0x84, 0x40, 0x51, 0xfe, 0x46,
	0x9f, 0x12, 0xf4, 0x04, 0xaa, 0xa2, 0xe0, 0x5a, 0x37, 0x66, 0x44, 0x28, 0x15, 0x9b, 0x2e, 0x68,
	0x28, 0x2a, 0x2b, 0x1f, 0x97, 0x35, 0x81, 0x2a, 0xe7, 0x12, 0xca, 0x16, 0xb2, 0x7d, 0x0e, 0xf7,
	0xa8, 0xf4, 0x88, 0xbc, 0xc7, 0x2a, 0x79, 0x9a, 0x35, 0x67, 0xda, 0xe8, 0xac, 0x98, 0xb0, 0x57,
	0xb0, 0x21, 0x62, 0xea, 0x09, 0x2e, 0x56, 0x83, 0x3b, 0xb0, 0x15, 0x7f, 0xd4, 0xa1, 0xe7, 0x50,
	0xa0, 0xae, 0x25, 0x2e, 0xab, 0xa6, 0x72, 0xde, 0x74, 0x0b, 0xab, 0xc4, 0x47, 0xb0, 0x9d, 0xb0,
	0x5e, 0x54, 0x83, 0x22, 0xa7, 0xe4, 0x0d, 0xf1, 0x05, 0xfe, 0x09, 0xb6, 0xe2, 0xaf, 0xbc, 0xd5,
	0xc9, 0x42, 0xe4, 0xf5, 0x28, 0xf2, 0x7d, 0xd8, 0x4e, 0xd8, 0x33, 0x7e, 0x05, 0xf7, 0x53, 0x6f,
	0xbe, 0x3b, 0x88, 0xab, 0x01, 0x4a, 0xdb, 0x32, 0x7e, 0x0d, 0xbb, 0x92, 0x07, 0x31, 0x3a, 0x86,
	0x22, 0xdd, 0xe4, 0x36, 0x72, 0xec, 0xd7, 0xcc, 0xc6, 0xe7, 0xa5, 0xb8, 0x0d, 0x35, 0xd9, 0xed,
	0x45, 0x8f, 0x15, 0xd3, 0xc6, 0xc1, 0xaa, 0x9a, 0x58, 0x61, 0x5d, 0x50, 0x27, 0x26, 0x79, 0x07,
	0xea, 0x08, 0xc5, 0x7a, 0x8c, 0xa2, 0x2e, 0x5a, 0x4a, 0x8e, 0xf4, 0x7b, 0xa8, 0xcb, 0xdf, 0xd2,
	0x77, 0x12, 0xbe, 0x0f, 0x7b, 0x8a, 0x5b, 0x0f, 0x1f, 0x43, 0x43, 0xf5, 0x96, 0x56, 0xf9, 0x13,
	0xd6, 0x60, 0x5f, 0x79, 0xb1, 0xa1, 0x53, 0x28, 0x38, 0xd6, 0xdc, 0x6f, 0xef, 0x49, 0xc6, 0x29,
	0xe3, 0x67, 0x57, 0x63, 0xe5, 0xf8, 0x14, 0x1e, 0x66, 0xbc, 0xb1, 0x95, 0xad, 0xb4, 0xa0, 0x99,
	0x75, 0xe1, 0xe1, 0x73, 0x26, 0x4f, 0xfa, 0xa8, 0x5d, 0xd9, 0x7e, 0xf1, 0x3b, 0xa6, 0x5b, 0x7e,
	0xe3, 0xa0, 0x13, 0xc8, 0x3b, 0xd6, 0x5c, 0x7c, 0xee, 0x4b, 0xc8, 0xa6, 0xd5, 0xf8, 0x8d, 0xaf,
	0xfa, 0x3d, 0x75, 0x18, 0x8c, 0x43, 0xde, 0x24, 0xfe, 0x33, 0x07, 0x0f, 0x33, 0x5e, 0xdc, 0x4a,
	0xc2, 0xf0, 0xe2, 0x59, 0x8f, 0x5d, 0x3c, 0x18, 0x36, 0x5d, 0x4f, 0x77, 0xbc, 0xae, 0xdf, 0x4e,
	0x9e, 0xfb, 0x1e, 0x0b, 0x6a, 0xdc, 0x1a, 0x5b, 0x50, 0x21, 0xe6, 0x20, 0xa8, 0x28, 0xb0, 0x8a,
	0x32, 0x31, 0x07, 0x22, 0x5f, 0x83, 0xa2, 0x31, 0x9e, 0x8e, 0x3d, 0xf6, 0xf0, 0xcc, 0x6b, 0x7c,
	0x81, 0x7f, 0x83, 0x66, 0xd6, 0x3d, 0x8b, 0xbe, 0x08, 0x3a, 0xe2, 0x13, 0xff, 0x20, 0xfb, 0xb6,
	0x12, 0x43, 0xf7, 0xfb, 0x3e, 0x84, 0xaa, 0xa1, 0xbb, 0x61, 0xdb, 0x7c, 0x8a, 0x40, 0x63, 0xbc,
	0xab, 0xce, 0xce, 0xdf, 0xb7, 0xad, 0xdc, 0x3f, 0xb7, 0xad, 0xdc, 0xbf, 0xb7, 0xad, 0xdc, 0x1f,
	0xff, 0xb5, 0xd6, 0x7a, 0x25, 0xf6, 0x4f, 0x90, 0x93, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0xb3, 0xb6, 0x09, 0x66, 0x11, 0x00, 0x00,
}
