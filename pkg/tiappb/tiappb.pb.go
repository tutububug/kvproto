// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiappb.proto

package tiap_servicepb

import (
	"fmt"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	tiap_adminrpcpb "github.com/tutububug/kvproto/pkg/tiap_adminrpcpb"

	tiap_hbaselike_adminrpcpb "github.com/tutububug/kvproto/pkg/tiap_hbaselike_adminrpcpb"

	tiap_hbaselike_kvrpcpb "github.com/tutububug/kvproto/pkg/tiap_hbaselike_kvrpcpb"

	tiap_raw_adminrpcpb "github.com/tutububug/kvproto/pkg/tiap_raw_adminrpcpb"

	tiap_raw_kvrpcpb "github.com/tutububug/kvproto/pkg/tiap_raw_kvrpcpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TiapKV service

type TiapKVClient interface {
	RawKV(ctx context.Context, in *tiap_raw_kvrpcpb.KVRequest, opts ...grpc.CallOption) (*tiap_raw_kvrpcpb.KVResponse, error)
	HBaseLikeKV(ctx context.Context, in *tiap_hbaselike_kvrpcpb.KVRequest, opts ...grpc.CallOption) (*tiap_hbaselike_kvrpcpb.KVResponse, error)
}

type tiapKVClient struct {
	cc *grpc.ClientConn
}

func NewTiapKVClient(cc *grpc.ClientConn) TiapKVClient {
	return &tiapKVClient{cc}
}

func (c *tiapKVClient) RawKV(ctx context.Context, in *tiap_raw_kvrpcpb.KVRequest, opts ...grpc.CallOption) (*tiap_raw_kvrpcpb.KVResponse, error) {
	out := new(tiap_raw_kvrpcpb.KVResponse)
	err := c.cc.Invoke(ctx, "/tiap_servicepb.TiapKV/RawKV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiapKVClient) HBaseLikeKV(ctx context.Context, in *tiap_hbaselike_kvrpcpb.KVRequest, opts ...grpc.CallOption) (*tiap_hbaselike_kvrpcpb.KVResponse, error) {
	out := new(tiap_hbaselike_kvrpcpb.KVResponse)
	err := c.cc.Invoke(ctx, "/tiap_servicepb.TiapKV/HBaseLikeKV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TiapKV service

type TiapKVServer interface {
	RawKV(context.Context, *tiap_raw_kvrpcpb.KVRequest) (*tiap_raw_kvrpcpb.KVResponse, error)
	HBaseLikeKV(context.Context, *tiap_hbaselike_kvrpcpb.KVRequest) (*tiap_hbaselike_kvrpcpb.KVResponse, error)
}

func RegisterTiapKVServer(s *grpc.Server, srv TiapKVServer) {
	s.RegisterService(&_TiapKV_serviceDesc, srv)
}

func _TiapKV_RawKV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tiap_raw_kvrpcpb.KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiapKVServer).RawKV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiap_servicepb.TiapKV/RawKV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiapKVServer).RawKV(ctx, req.(*tiap_raw_kvrpcpb.KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TiapKV_HBaseLikeKV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tiap_hbaselike_kvrpcpb.KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiapKVServer).HBaseLikeKV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiap_servicepb.TiapKV/HBaseLikeKV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiapKVServer).HBaseLikeKV(ctx, req.(*tiap_hbaselike_kvrpcpb.KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TiapKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tiap_servicepb.TiapKV",
	HandlerType: (*TiapKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawKV",
			Handler:    _TiapKV_RawKV_Handler,
		},
		{
			MethodName: "HBaseLikeKV",
			Handler:    _TiapKV_HBaseLikeKV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiappb.proto",
}

// Client API for TiapAdmin service

type TiapAdminClient interface {
	DBAdmin(ctx context.Context, in *tiap_adminrpcpb.AdminRequest, opts ...grpc.CallOption) (*tiap_adminrpcpb.AdminResponse, error)
	RawTableAdmin(ctx context.Context, in *tiap_raw_adminrpcpb.AdminRequest, opts ...grpc.CallOption) (*tiap_raw_adminrpcpb.AdminResponse, error)
	HBaseLikeTableAdmin(ctx context.Context, in *tiap_hbaselike_adminrpcpb.AdminRequest, opts ...grpc.CallOption) (*tiap_hbaselike_adminrpcpb.AdminResponse, error)
}

type tiapAdminClient struct {
	cc *grpc.ClientConn
}

func NewTiapAdminClient(cc *grpc.ClientConn) TiapAdminClient {
	return &tiapAdminClient{cc}
}

func (c *tiapAdminClient) DBAdmin(ctx context.Context, in *tiap_adminrpcpb.AdminRequest, opts ...grpc.CallOption) (*tiap_adminrpcpb.AdminResponse, error) {
	out := new(tiap_adminrpcpb.AdminResponse)
	err := c.cc.Invoke(ctx, "/tiap_servicepb.TiapAdmin/DBAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiapAdminClient) RawTableAdmin(ctx context.Context, in *tiap_raw_adminrpcpb.AdminRequest, opts ...grpc.CallOption) (*tiap_raw_adminrpcpb.AdminResponse, error) {
	out := new(tiap_raw_adminrpcpb.AdminResponse)
	err := c.cc.Invoke(ctx, "/tiap_servicepb.TiapAdmin/RawTableAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiapAdminClient) HBaseLikeTableAdmin(ctx context.Context, in *tiap_hbaselike_adminrpcpb.AdminRequest, opts ...grpc.CallOption) (*tiap_hbaselike_adminrpcpb.AdminResponse, error) {
	out := new(tiap_hbaselike_adminrpcpb.AdminResponse)
	err := c.cc.Invoke(ctx, "/tiap_servicepb.TiapAdmin/HBaseLikeTableAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TiapAdmin service

type TiapAdminServer interface {
	DBAdmin(context.Context, *tiap_adminrpcpb.AdminRequest) (*tiap_adminrpcpb.AdminResponse, error)
	RawTableAdmin(context.Context, *tiap_raw_adminrpcpb.AdminRequest) (*tiap_raw_adminrpcpb.AdminResponse, error)
	HBaseLikeTableAdmin(context.Context, *tiap_hbaselike_adminrpcpb.AdminRequest) (*tiap_hbaselike_adminrpcpb.AdminResponse, error)
}

func RegisterTiapAdminServer(s *grpc.Server, srv TiapAdminServer) {
	s.RegisterService(&_TiapAdmin_serviceDesc, srv)
}

func _TiapAdmin_DBAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tiap_adminrpcpb.AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiapAdminServer).DBAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiap_servicepb.TiapAdmin/DBAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiapAdminServer).DBAdmin(ctx, req.(*tiap_adminrpcpb.AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TiapAdmin_RawTableAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tiap_raw_adminrpcpb.AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiapAdminServer).RawTableAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiap_servicepb.TiapAdmin/RawTableAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiapAdminServer).RawTableAdmin(ctx, req.(*tiap_raw_adminrpcpb.AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TiapAdmin_HBaseLikeTableAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tiap_hbaselike_adminrpcpb.AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiapAdminServer).HBaseLikeTableAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiap_servicepb.TiapAdmin/HBaseLikeTableAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiapAdminServer).HBaseLikeTableAdmin(ctx, req.(*tiap_hbaselike_adminrpcpb.AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TiapAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tiap_servicepb.TiapAdmin",
	HandlerType: (*TiapAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DBAdmin",
			Handler:    _TiapAdmin_DBAdmin_Handler,
		},
		{
			MethodName: "RawTableAdmin",
			Handler:    _TiapAdmin_RawTableAdmin_Handler,
		},
		{
			MethodName: "HBaseLikeTableAdmin",
			Handler:    _TiapAdmin_HBaseLikeTableAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiappb.proto",
}

func init() { proto.RegisterFile("tiappb.proto", fileDescriptor_tiappb_6c9eeacd44a79724) }

var fileDescriptor_tiappb_6c9eeacd44a79724 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xc9, 0x4c, 0x2c,
	0x28, 0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x03, 0xf1, 0xe2, 0x8b, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0x0b, 0x92, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x52, 0xfa, 0x20,
	0x16, 0x44, 0x95, 0x94, 0x18, 0x58, 0x55, 0x51, 0x62, 0x79, 0x7c, 0x76, 0x59, 0x51, 0x41, 0x32,
	0x4c, 0xb7, 0x94, 0x0c, 0x58, 0x3c, 0x23, 0x29, 0xb1, 0x38, 0x35, 0x27, 0x33, 0x3b, 0x15, 0x4d,
	0x56, 0x14, 0x2c, 0x9b, 0x98, 0x92, 0x9b, 0x99, 0x87, 0x2c, 0x2c, 0x09, 0x37, 0x0c, 0x43, 0x4a,
	0x1e, 0xcd, 0x3c, 0x74, 0x05, 0x46, 0xcb, 0x18, 0xb9, 0xd8, 0x42, 0x32, 0x13, 0x0b, 0xbc, 0xc3,
	0x84, 0x5c, 0xb8, 0x58, 0x83, 0x12, 0xcb, 0xbd, 0xc3, 0x84, 0xa4, 0xf5, 0x30, 0x5c, 0xe7, 0x1d,
	0x16, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x25, 0x83, 0x5d, 0xb2, 0xb8, 0x20, 0x3f, 0xaf,
	0x38, 0x55, 0x89, 0x41, 0x28, 0x8c, 0x8b, 0xdb, 0xc3, 0x29, 0xb1, 0x38, 0xd5, 0x27, 0x33, 0x3b,
	0xd5, 0x3b, 0x4c, 0x48, 0x51, 0x0f, 0x87, 0x8f, 0x10, 0x26, 0x2a, 0xe1, 0x53, 0x02, 0x33, 0xd7,
	0x68, 0x2e, 0x13, 0x17, 0x27, 0xc8, 0xa1, 0x8e, 0x20, 0x1f, 0x08, 0x79, 0x71, 0xb1, 0xbb, 0x38,
	0x41, 0x98, 0xb2, 0x7a, 0xe8, 0xa1, 0x02, 0x16, 0x87, 0x99, 0x2e, 0x87, 0x4b, 0x1a, 0xee, 0xe2,
	0x08, 0x2e, 0xde, 0xa0, 0xc4, 0xf2, 0x90, 0xc4, 0xa4, 0x9c, 0x54, 0x88, 0x89, 0x8a, 0x7a, 0xd8,
	0x02, 0x14, 0xc5, 0x54, 0x25, 0x7c, 0x4a, 0xe0, 0x26, 0x67, 0x71, 0x09, 0xc3, 0xc3, 0x02, 0xc9,
	0x7c, 0x75, 0x3d, 0xdc, 0xb1, 0x82, 0x62, 0x8b, 0x06, 0x61, 0x85, 0x30, 0xbb, 0x9c, 0x04, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18,
	0x92, 0xd8, 0xc0, 0x31, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xcd, 0xc6, 0x5e, 0xa0,
	0x02, 0x00, 0x00,
}
